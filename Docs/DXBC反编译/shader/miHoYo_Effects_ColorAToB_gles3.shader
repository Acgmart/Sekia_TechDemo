//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/Effects/ColorAToB" {
Properties {
_DayColor ("DayColor", Color) = (1,1,1,1)
_TotalFade ("TotalFade", Range(0, 1)) = 0
_ColorALerp0 ("ColorALerp0", Color) = (0.3308824,0.3308824,0.3308824,1)
_ColorALerp1 ("ColorALerp1", Color) = (0.6691177,0.6691177,0.6691177,1)
_ColorALerp1tScale ("ColorALerp1tScale", Float) = 1
_ColorBLerp0 ("ColorBLerp0", Color) = (1,1,1,1)
_ColorBLerp1 ("ColorBLerp1", Color) = (1,1,1,1)
_ColorBScale ("ColorBScale", Float) = 1
_ColorAToB ("ColorAToB", Range(0, 1)) = 0
_MaskTex ("MaskTex", 2D) = "white" { }
_MaskChannelNum ("MaskChannelNum", Range(0, 4)) = 1
_MaskTexPannerXY ("MaskTexPanner(XY)", Vector) = (0,0,0,0)
_MaskScale ("MaskScale", Float) = 1
_LerpTex ("LerpTex", 2D) = "white" { }
_LerpTexUVPannerXY ("LerpTexUVPanner(XY)", Vector) = (0,0,0,0)
_LerpChannelNum ("LerpChannelNum", Range(0, 4)) = 1
_LerpChannelScale ("LerpChannelScale", Float) = 1
_ByDistortUVScale ("ByDistortUVScale", Float) = 0
_ByAffactAlpha ("ByAffactAlpha", Range(0, 1)) = 0
_DissolveMaskTex ("DissolveMaskTex", 2D) = "white" { }
_DissolveChannel ("DissolveChannel", Range(0, 4)) = 1
_DissovleTexPannerXY ("DissovleTexPanner(XY)", Vector) = (0,0,0,0)
_DissolveChannelScale ("DissolveChannelScale", Float) = 1
[Toggle(_SETDISTANCEFADE_ON)] _SetDistanceFade ("SetDistanceFade", Float) = 0
[Header(DistanceFade)] [Toggle(_DISTANCEINVERT_ON)] _DistanceInvert ("DistanceInvert", Float) = 0
_AlphaFadeDistance ("AlphaFadeDistance", Float) = 150
_AlphaFadeDistanceOffset ("AlphaFadeDistanceOffset", Float) = 0
[Header(MiHoYoDepthFade)] [Toggle(_SOFTPARTICLES_ON)] _SOFTPARTICLES ("SOFTPARTICLES", Float) = 0
_DepthThresh ("DepthThresh", Range(0.001, 20)) = 1
_DepthFade ("DepthFade", Range(0.001, 20)) = 1
_SinScale ("SinScale", Float) = 0.12
_AvatarAcceleration ("AvatarAcceleration", Vector) = (0,0,0,0)
[Header(Motion Vectors)] _MotionVectorsAlphaCutoff ("Motion Vectors Alpha Cutoff", Range(0, 1)) = 0.1
[Header(Cull Mode)] [Enum(UnityEngine.Rendering.CullMode)] _Cull ("Cull Mode", Float) = 2
_MHYZBias ("Z Bias", Float) = 0
_PolygonOffsetFactor ("Polygon Offset Factor", Float) = 0
_PolygonOffsetUnit ("Polygon Offset Unit", Float) = 0
[Header(Blend Mode)] [Enum(UnityEngine.Rendering.BlendMode)] _SrcBlendMode ("Src Blend Mode", Float) = 1
[Enum(UnityEngine.Rendering.BlendMode)] _DstBlendMode ("Dst Blend Mode", Float) = 0
[Enum(UnityEngine.Rendering.BlendOp)] _BlendOP ("BlendOp Mode", Float) = 0
[Header(Depth Mode)] [Enum(Off, 0, On, 1)] _Zwrite ("ZWrite Mode", Float) = 1
[Enum(UnityEngine.Rendering.CompareFunction)] _Ztest ("ZTest Mode", Float) = 4
[Header(Fog Mode)] [Toggle(EFFECTED_BY_FOG)] _EffectedByFog ("Effected by fog", Float) = 0
}
SubShader {
 Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "MAIN"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZTest Off
  ZWrite Off
  Cull Off
  GpuProgramID 64577
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    SV_Target0.w = u_xlat16_2.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_1 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    SV_Target0.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat5.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
mediump vec4 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_7;
float u_xlat10;
float u_xlat15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat5.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat5.xy;
    u_xlat16_1.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_1 = texture(_DissolveMaskTex, u_xlat16_1.xy);
    u_xlat16_2 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_5.xy = u_xlat10_1.xy * u_xlat16_2.xy;
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.z * u_xlat16_2.z + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat10_1.w * u_xlat16_2.w + u_xlat16_5.x;
    u_xlat16_2.x = min(abs(_DissolveChannel), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_2.x;
    u_xlat16_2.x = float(1.0) / _DissolveChannelScale;
    u_xlat16_7.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = _ColorAToB * u_xlat16_7.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x + (-u_xlat16_2.x);
    u_xlat16_5.x = u_xlat16_5.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_2.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_7.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _ColorBLerp0.xyz;
    u_xlat16_3.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _ColorALerp0.xyz;
    u_xlat16_4.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_7.xyz + (-u_xlat16_3.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * _DayColor.xyz;
    u_xlat5.xyz = u_xlat16_7.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat5.xyz + vs_TEXCOORD3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat5.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat5.xy;
    u_xlat16_7.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat5.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat16_7.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_7.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_2.x = _ByAffactAlpha * u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_7.x = (-_TotalFade) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;
    u_xlat0.x = u_xlat16_2.x * vs_COLOR0.w;
    u_xlat5.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat10 = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat15 + u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeDistanceOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat5.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    SV_Target0.w = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    SV_Target0.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat6.x) + 1.0;
    u_xlat1.w = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
float u_xlat14;
float u_xlat16;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = u_xlat0.z * _HeigtFogParams.x;
    u_xlat9 = u_xlat2.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<abs(u_xlat2.x));
#else
    u_xlatb2 = 0.00999999978<abs(u_xlat2.x);
#endif
    u_xlat16_3.x = (u_xlatb2) ? u_xlat9 : 1.0;
    u_xlat2.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat9 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat16 = u_xlat9 * -1.44269502;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = u_xlat16 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_10 = (u_xlatb9) ? u_xlat16 : 1.0;
    u_xlat9 = u_xlat2.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat9 = u_xlat2.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat9) + 2.0;
    u_xlat16_10 = u_xlat9 * u_xlat16_10;
    u_xlat9 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat9 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat16 = (-u_xlat9) + 1.0;
    u_xlat23 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat7.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat23) + 2.0;
    u_xlat16_3.x = u_xlat23 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.x = u_xlat2.x + (-_HeigtFogRamp.w);
    u_xlat2.x = u_xlat2.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat7.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat6.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat7.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat7.x;
#endif
    u_xlat7.x = (-u_xlat2.x) + 2.0;
    u_xlat7.x = u_xlat7.x * u_xlat2.x;
    u_xlat14 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat14 : u_xlat7.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat7.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat16 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat7.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
float u_xlat3;
int u_xlati9;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati9 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat3;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat1.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
mediump vec2 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat14;
bool u_xlatb14;
float u_xlat16;
int u_xlati21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati21 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati21 = u_xlati21 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat0.xyz = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = u_xlat2.y * _HeigtFogParams.x;
    u_xlat14 = u_xlat0.x * -1.44269502;
    u_xlat14 = exp2(u_xlat14);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat14 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<abs(u_xlat0.x));
#else
    u_xlatb0 = 0.00999999978<abs(u_xlat0.x);
#endif
    u_xlat16_3.x = (u_xlatb0) ? u_xlat14 : 1.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat14 = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat23 = u_xlat14 * -1.44269502;
    u_xlat23 = exp2(u_xlat23);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = u_xlat23 / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_10 = (u_xlatb14) ? u_xlat23 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat16_10 = exp2((-u_xlat16_10));
    u_xlat16_3.y = (-u_xlat16_10) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat14 = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat14) + 2.0;
    u_xlat16_10 = u_xlat14 * u_xlat16_10;
    u_xlat14 = u_xlat16_10 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat14 = u_xlat14 + 1.0;
    u_xlat16_3.x = u_xlat14 * u_xlat16_3.x;
    u_xlat14 = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23 = (-u_xlat14) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat9 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat9);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat9;
#endif
    u_xlat9 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat0.x = u_xlat0.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat9) + 2.0;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat9 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat16 : u_xlat9;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat9 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_3.x = (-u_xlat9) + 2.0;
    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;
    u_xlat5.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat0.x = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat23 * u_xlat0.x;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    vs_TEXCOORD3.xyz = u_xlat4.xyz * vec3(u_xlat14) + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati21 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat2.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat7 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat7;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _ColorALerp0;
uniform 	mediump vec4 _ColorALerp1;
uniform 	mediump float _ColorALerp1tScale;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ColorBScale;
uniform 	mediump vec4 _ColorBLerp0;
uniform 	mediump vec4 _ColorBLerp1;
uniform 	mediump vec2 _DissovleTexPannerXY;
uniform 	vec4 _DissolveMaskTex_ST;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _DissolveChannel;
uniform 	mediump float _DissolveChannelScale;
uniform 	mediump float _ColorAToB;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _DissolveMaskTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump float u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_23;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * vec2(_LerpTexUVPannerXY.x, _LerpTexUVPannerXY.y) + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_2.x = min(abs(_LerpChannelNum), 1.0);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_2.x + u_xlat16_0.x;
    u_xlat16_1.x = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _ColorALerp1.xyz * vec3(_ColorALerp1tScale) + (-_ColorALerp0.xyz);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + _ColorALerp0.xyz;
    u_xlat16_2.xyz = (-_ColorBLerp0.xyz) + _ColorBLerp1.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xxx * u_xlat16_2.xyz + _ColorBLerp0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveMaskTex_ST.xy + _DissolveMaskTex_ST.zw;
    u_xlat7.xy = _Time.yy * _DissovleTexPannerXY.xy + u_xlat7.xy;
    u_xlat16_3.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat7.xy;
    u_xlat10_3 = texture(_DissolveMaskTex, u_xlat16_3.xy);
    u_xlat16_4 = (-vec4(vec4(_DissolveChannel, _DissolveChannel, _DissolveChannel, _DissolveChannel))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_4 = min(abs(u_xlat16_4), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_4 = (-u_xlat16_4) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_23 = min(abs(_DissolveChannel), 1.0);
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_5 = float(1.0) / _DissolveChannelScale;
    u_xlat16_12 = u_xlat16_5 + 1.0;
    u_xlat16_5 = _ColorAToB * u_xlat16_12 + (-u_xlat16_5);
    u_xlat16_7.xy = u_xlat10_3.xy * u_xlat16_4.xy;
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.z * u_xlat16_4.z + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat10_3.w * u_xlat16_4.w + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_23 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat16_5) + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * _DissolveChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_6.xyz = vec3(vec3(_ColorBScale, _ColorBScale, _ColorBScale)) * u_xlat16_2.xyz + (-u_xlat16_8.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat6.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat6.xy;
    u_xlat16_8.xy = u_xlat16_0.xx * vec2(_ByDistortUVScale) + u_xlat6.xy;
    u_xlat10_2 = texture(_MaskTex, u_xlat16_8.xy);
    u_xlat16_3 = (-vec4(_MaskChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_3 = min(abs(u_xlat16_3), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = (-u_xlat16_3) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_8.x = min(abs(_MaskChannelNum), 1.0);
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_6.xy = u_xlat10_2.xy * u_xlat16_3.xy;
    u_xlat16_0.x = u_xlat16_6.y + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat10_2.z * u_xlat16_3.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_2.w * u_xlat16_3.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_8.x + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat6.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat13 + u_xlat6.x;
    u_xlat16_8.x = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat6.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat6.x = u_xlat6.x + (-_AlphaFadeDistanceOffset);
    u_xlat6.x = u_xlat6.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.w = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_7.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = vs_TEXCOORD3.www * u_xlat0.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
}
}
 Pass {
  Name "DISTORTIONVECTORS"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "DISTORTIONVECTORS" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Off
  GpuProgramID 114224
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.497999996, 0.497999996, 0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
int u_xlati6;
void main()
{
    u_xlat0.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat0.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati6 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati6 << 3;
    u_xlat1 = u_xlat0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.497999996, 0.497999996, 0.0, 1.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
}
}
 Pass {
  Name "MOTIONVECTORS"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "MOTIONVECTORS" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Off
  GpuProgramID 175979
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat16_1.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat16_1.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat16_1.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat16_1.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat16_1.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat16_1.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat16_1.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_1.x * vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat16_1.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlat1 = u_xlat4.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	vec3 _AvatarAcceleration;
uniform 	mediump float _SinScale;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat4.x = in_TEXCOORD0.z * _Time.y;
    u_xlat16_1.x = sin(u_xlat4.x);
    u_xlat16_1.x = u_xlat16_1.x * _SinScale;
    u_xlat16_1.yz = u_xlat16_1.xx * vec2(0.5, 0.5);
    u_xlat16_1.xyz = _AvatarAcceleration.xyz * in_TEXCOORD0.www + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz + in_POSITION0.xyz;
    u_xlati2 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati2 = u_xlati2 << 3;
    u_xlat1 = u_xlat4.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat4.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat4.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    gl_Position.z = u_xlat0.x * u_xlat3.w + u_xlat3.z;
    gl_Position.xyw = u_xlat3.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + unity_Builtins0Array[u_xlati2 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat2.y = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.xzw = u_xlat2.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat4.x = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD6.x = (-u_xlat0.x);
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump float _TotalFade;
uniform 	mediump vec2 _MaskTexPannerXY;
uniform 	vec4 _MaskTex_ST;
uniform 	mediump vec2 _LerpTexUVPannerXY;
uniform 	vec4 _LerpTex_ST;
uniform 	mediump float _LerpChannelNum;
uniform 	mediump float _ByDistortUVScale;
uniform 	mediump float _MaskChannelNum;
uniform 	mediump float _MaskScale;
uniform 	mediump float _LerpChannelScale;
uniform 	mediump float _ByAffactAlpha;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeDistanceOffset;
uniform lowp sampler2D _LerpTex;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
ivec2 u_xlati3;
vec2 u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _LerpTex_ST.xy + _LerpTex_ST.zw;
    u_xlat0.xy = _Time.yy * _LerpTexUVPannerXY.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_LerpTex, u_xlat0.xy);
    u_xlat16_1 = (-vec4(_LerpChannelNum)) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_1 = min(abs(u_xlat16_1), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_1 = (-u_xlat16_1) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_1.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_1.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_1.w + u_xlat16_0.x;
    u_xlat16_1.xy = min(abs(vec2(_LerpChannelNum, _MaskChannelNum)), vec2(1.0, 1.0));
    u_xlat16_1.xy = (-u_xlat16_1.xy) + vec2(1.0, 1.0);
    u_xlat16_0.x = u_xlat16_0.x + u_xlat16_1.x;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat4.xy = _Time.yy * vec2(_MaskTexPannerXY.x, _MaskTexPannerXY.y) + u_xlat4.xy;
    u_xlat16_1.xz = u_xlat16_0.xx * vec2(vec2(_ByDistortUVScale, _ByDistortUVScale)) + u_xlat4.xy;
    u_xlat16_13 = u_xlat16_0.x * _LerpChannelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat16_1.xz);
    u_xlat16_2 = (-vec4(vec4(_MaskChannelNum, _MaskChannelNum, _MaskChannelNum, _MaskChannelNum))) + vec4(1.0, 2.0, 3.0, 4.0);
    u_xlat16_2 = min(abs(u_xlat16_2), vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_2 = (-u_xlat16_2) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_0.xy = u_xlat10_0.xy * u_xlat16_2.xy;
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.z * u_xlat16_2.z + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat10_0.w * u_xlat16_2.w + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_1.y + u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * _MaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_13 * u_xlat16_0.x + (-u_xlat16_0.x);
    u_xlat16_1.x = _ByAffactAlpha * u_xlat16_1.x + u_xlat16_0.x;
    u_xlat16_5 = (-_TotalFade) + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5;
    u_xlat0.x = u_xlat16_1.x * vs_COLOR0.w;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.x = vs_TEXCOORD6.x + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeDistanceOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb0 = u_xlat16_1.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati3.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati3.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
}
}
}
CustomEditor "MiHoYoASEMaterialInspector"
}