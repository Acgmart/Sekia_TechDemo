//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/Internal-PrePassLighting" {
Properties {
_LightTexture0 ("", any) = "" { }
_LightTextureB0 ("", 2D) = "" { }
}
SubShader {
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  ZWrite Off
  GpuProgramID 29147
Program "vp" {
SubProgram "gles3 " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = u_xlat21 * _LightPos.w;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat21 = u_xlat16_4.x * u_xlat21;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat0.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat0.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_4.xxx * u_xlat16_0.xzw;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_4.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_9;
float u_xlat15;
bool u_xlatb15;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat3.xy / u_xlat3.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat3.z<0.0);
#else
    u_xlatb15 = u_xlat3.z<0.0;
#endif
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat15 * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = u_xlat7 * _LightPos.w;
    u_xlat7 = inversesqrt(u_xlat7);
    u_xlat3.xyz = vec3(u_xlat7) * u_xlat3.xyz;
    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = (-u_xlat0.z) * u_xlat21 + u_xlat7;
    u_xlat7 = unity_ShadowFadeCenterAndType.w * u_xlat7 + u_xlat2.z;
    u_xlat7 = u_xlat7 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat7) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_9.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_5.xxx * u_xlat16_9.xyz;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(u_xlat16_22) + u_xlat10_1.xyz;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_21 + (-u_xlat16_2.x);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2.x + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21);
    u_xlat16_1.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat15;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz, -8.0).w;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat22)).w;
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_4.xxx * u_xlat16_0.xzw;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat0.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
lowp float u_xlat10_7;
mediump float u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat22;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
    u_xlat16_0.x = (-_LightShadowData.x) + 1.0;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat15 = _ZBufferParams.x * u_xlat15 + _ZBufferParams.y;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat2.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_0.x = u_xlat10_7 * u_xlat16_0.x + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.z) * u_xlat15 + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat2.z;
    u_xlat14 = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat7.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat14 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.z<0.0);
#else
    u_xlatb14 = u_xlat0.z<0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat22)).w;
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = u_xlat16_11 * u_xlat0.x;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot(u_xlat7.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_4.xxx * u_xlat16_0.xzw;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
float u_xlat16;
bool u_xlatb16;
float u_xlat17;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_8 = (-_LightShadowData.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_8 + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat8.x = (-u_xlat0.z) * u_xlat24 + u_xlat8.x;
    u_xlat8.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat2.z;
    u_xlat16 = u_xlat8.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_6.x = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat0.z<0.0);
#else
    u_xlatb16 = u_xlat0.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat16 * u_xlat0.x;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = u_xlat17 * _LightPos.w;
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat17);
    u_xlat17 = texture(_LightTextureB0, vec2(u_xlat25)).w;
    u_xlat0.x = u_xlat0.x * u_xlat17;
    u_xlat0.x = u_xlat16_14 * u_xlat0.x;
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_30 = dot(u_xlat8.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_30);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_7.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat8.xyz;
    u_xlat16_30 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_8 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_6.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_6.xxx * u_xlat16_0.xzw;
    u_xlat16_6.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_25 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_2 = (-u_xlat16_25) * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_8);
    u_xlat16_0.xyz = vec3(u_xlat16_8) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_6.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_10;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_10 = u_xlat6 + u_xlat10_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_4.x * u_xlat16_10;
    u_xlat0.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp float u_xlat10_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_10;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_10 = u_xlat6 + u_xlat10_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat0.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat16_10;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat15;
bool u_xlatb15;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat15 = dot(u_xlat3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat22 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat23 = sqrt(u_xlat22);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15<u_xlat23);
#else
    u_xlatb15 = u_xlat15<u_xlat23;
#endif
    u_xlat16_4.x = (u_xlatb15) ? _LightShadowData.x : 1.0;
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat22 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_4.xxx * u_xlat16_0.xzw;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec3 u_xlat10_11;
mediump float u_xlat16_12;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat23;
float u_xlat24;
int u_xlati26;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat34 = inversesqrt(u_xlat23);
    u_xlat3.xyz = u_xlat11.xyz * vec3(u_xlat34);
    u_xlat24 = u_xlat23 * _LightPos.w;
    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
    u_xlat4.xyz = u_xlat3.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat4.xyz);
    u_xlat36 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.zxy * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat4.xy = u_xlat4.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat36 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat4.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * vec3(u_xlat34) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat37 = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb37 = !!(u_xlat37<u_xlat23);
#else
        u_xlatb37 = u_xlat37<u_xlat23;
#endif
        u_xlat37 = (u_xlatb37) ? _LightShadowData.x : 1.0;
        u_xlat36 = u_xlat36 + u_xlat37;
    }
    u_xlat16_8.x = u_xlat36 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat24 * u_xlat16_8.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_11.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat3.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_9 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11.x = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_1.x = u_xlat16_33 * u_xlat16_33;
    u_xlat16_12 = u_xlat16_11.x * u_xlat16_1.x + (-u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_12 * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999997e-07);
    u_xlat16_11.x = u_xlat16_1.x / u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * 0.318309873;
    u_xlat16_11.x = min(u_xlat16_11.x, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_1.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33) + u_xlat10_4.xyz;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_11.xyz = u_xlat16_2.xyz / u_xlat16_11.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    u_xlat16_8.xyz = u_xlat16_11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_8.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat3 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat15 = dot(u_xlat3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat22 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat16 = sqrt(u_xlat22);
    u_xlat16 = u_xlat16 * _LightPositionRange.w;
    u_xlat16 = u_xlat16 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15<u_xlat16);
#else
    u_xlatb15 = u_xlat15<u_xlat16;
#endif
    u_xlat16_4.x = (u_xlatb15) ? _LightShadowData.x : 1.0;
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat22 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_4.xxx * u_xlat16_0.xzw;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec3 u_xlat10_11;
mediump float u_xlat16_12;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat23;
float u_xlat24;
int u_xlati26;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat34 = inversesqrt(u_xlat23);
    u_xlat3.xyz = u_xlat11.xyz * vec3(u_xlat34);
    u_xlat24 = u_xlat23 * _LightPos.w;
    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
    u_xlat4.xyz = u_xlat3.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat4.xyz);
    u_xlat36 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.zxy * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat4.xy = u_xlat4.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat36 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat4.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * vec3(u_xlat34) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat37 = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb37 = !!(u_xlat37<u_xlat23);
#else
        u_xlatb37 = u_xlat37<u_xlat23;
#endif
        u_xlat37 = (u_xlatb37) ? _LightShadowData.x : 1.0;
        u_xlat36 = u_xlat36 + u_xlat37;
    }
    u_xlat16_8.x = u_xlat36 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat24 * u_xlat16_8.x;
    u_xlat11.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat11.x = texture(_LightTexture0, u_xlat11.xyz, -8.0).w;
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_11.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat3.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_9 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11.x = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_1.x = u_xlat16_33 * u_xlat16_33;
    u_xlat16_12 = u_xlat16_11.x * u_xlat16_1.x + (-u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_12 * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999997e-07);
    u_xlat16_11.x = u_xlat16_1.x / u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * 0.318309873;
    u_xlat16_11.x = min(u_xlat16_11.x, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_1.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33) + u_xlat10_4.xyz;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_11.xyz = u_xlat16_2.xyz / u_xlat16_11.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    u_xlat16_8.xyz = u_xlat16_11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_8.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat15 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_7.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat7.xyz * u_xlat1.xxx + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_8 = u_xlat16_7.x * u_xlat16_1.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_8 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_7.x = u_xlat16_1.x / u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.318309873;
    u_xlat16_7.x = min(u_xlat16_7.x, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_4.x = u_xlat14 * u_xlat14;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_4.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat22 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat3.z<0.0);
#else
    u_xlatb16 = u_xlat3.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat22 * u_xlat16;
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat15 = u_xlat15 * u_xlat22;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + u_xlat7.xyz;
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat15 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat22 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat15 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyz * vec3(u_xlat14) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_14 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_5 * u_xlat16_5;
    u_xlat16_8.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_15 = u_xlat16_14 * u_xlat16_8.x + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_15 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_14 = u_xlat16_8.x / u_xlat16_14;
    u_xlat16_14 = u_xlat16_14 * 0.318309873;
    u_xlat16_14 = min(u_xlat16_14, 64.0);
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_8.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz;
    u_xlat16_1.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat22 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat3.z<0.0);
#else
    u_xlatb16 = u_xlat3.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat22 * u_xlat16;
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat15 = u_xlat15 * u_xlat22;
    u_xlat22 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat10_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_3 = (-_LightShadowData.x) + 1.0;
    u_xlat16_16 = u_xlat10_16 * u_xlat16_3 + _LightShadowData.x;
    u_xlat16_4.x = u_xlat22 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat15 * u_xlat16_4.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + u_xlat7.xyz;
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat15 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat28 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat3.z<0.0);
#else
    u_xlatb20 = u_xlat3.z<0.0;
#endif
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat28 = u_xlat28 * u_xlat20;
    u_xlat19 = u_xlat19 * _LightPos.w;
    u_xlat19 = texture(_LightTextureB0, vec2(u_xlat19)).w;
    u_xlat19 = u_xlat19 * u_xlat28;
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    vec3 txVec2 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat20 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_3 = (-_LightShadowData.x) + 1.0;
    u_xlat20 = u_xlat20 * u_xlat16_3 + _LightShadowData.x;
    u_xlat16_6.x = u_xlat28 + u_xlat20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat16_6.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_33 = dot(u_xlat9.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_7 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_16.xyz = u_xlat1.xyw * u_xlat2.xxx + u_xlat9.xyz;
    u_xlat16_8 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_8 = inversesqrt(u_xlat16_8);
    u_xlat16_16.xyz = u_xlat16_16.xyz * vec3(u_xlat16_8);
    u_xlat16_1.x = dot(u_xlat16_6.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_27 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_10 = u_xlat16_1.x * u_xlat16_27 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_27 = u_xlat16_27 / u_xlat16_1.x;
    u_xlat16_27 = u_xlat16_27 * 0.318309873;
    u_xlat16_27 = min(u_xlat16_27, 64.0);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat16_6.x = u_xlat9.x * u_xlat9.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_6.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_18) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_1.xyw;
    u_xlat16_9.xyz = vec3(u_xlat16_27) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_9.xyz = u_xlat16_2.xyz / u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_9.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat19 * u_xlat16_6.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_6.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_12;
float u_xlat14;
lowp float u_xlat10_14;
mediump float u_xlat16_19;
float u_xlat21;
mediump float u_xlat16_21;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat10_14 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4.x = u_xlat7.x + u_xlat10_14;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_7.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_11.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_5 = dot((-_LightDir.xyz), u_xlat16_11.xyz);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_12 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_6.xyz = u_xlat7.xyz * u_xlat1.xxx + (-_LightDir.xyz);
    u_xlat16_19 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_19 = inversesqrt(u_xlat16_19);
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
    u_xlat16_7.x = dot(u_xlat16_11.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_8 = u_xlat16_7.x * u_xlat16_1.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_8 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_7.x = u_xlat16_1.x / u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.318309873;
    u_xlat16_7.x = min(u_xlat16_7.x, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_11.x = u_xlat14 * u_xlat14;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_11.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_11.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat1.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_5) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
lowp float u_xlat10_14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat10_14 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4.x = u_xlat7.x + u_xlat10_14;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat7.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyz * vec3(u_xlat14) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_14 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_5 * u_xlat16_5;
    u_xlat16_8.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_15 = u_xlat16_14 * u_xlat16_8.x + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_15 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_14 = u_xlat16_8.x / u_xlat16_14;
    u_xlat16_14 = u_xlat16_14 * 0.318309873;
    u_xlat16_14 = min(u_xlat16_14, 64.0);
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_8.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz;
    u_xlat16_1.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
bool u_xlatb8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_14;
float u_xlat16;
float u_xlat17;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat25 = u_xlat17 * _LightPos.w;
    u_xlat25 = texture(_LightTextureB0, vec2(u_xlat25)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat17 = sqrt(u_xlat17);
    u_xlat17 = u_xlat17 * _LightPositionRange.w;
    u_xlat17 = u_xlat17 * 0.970000029;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
    u_xlat8.x = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<u_xlat17);
#else
    u_xlatb8 = u_xlat8.x<u_xlat17;
#endif
    u_xlat16_5.x = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_5.x = u_xlat0.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat25 * u_xlat16_5.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_8.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat8.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_6 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat8.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_8.x = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat16 = dot((-u_xlat3.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_1.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_9 = u_xlat16_8.x * u_xlat16_1.x + (-u_xlat16_8.x);
    u_xlat16_8.x = u_xlat16_9 * u_xlat16_8.x + 1.0;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_8.x = max(u_xlat16_8.x, 9.99999997e-07);
    u_xlat16_8.x = u_xlat16_1.x / u_xlat16_8.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.318309873;
    u_xlat16_8.x = min(u_xlat16_8.x, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_1.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_5.x = u_xlat16 * u_xlat16;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_24) + u_xlat10_4.xyz;
    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_1.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_8.xyz = u_xlat16_2.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_8.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_29) * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec3 u_xlat10_11;
mediump float u_xlat16_12;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat23;
float u_xlat24;
int u_xlati26;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat34 = inversesqrt(u_xlat23);
    u_xlat3.xyz = u_xlat11.xyz * vec3(u_xlat34);
    u_xlat24 = u_xlat23 * _LightPos.w;
    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
    u_xlat4.xyz = u_xlat3.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat4.xyz);
    u_xlat36 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.zxy * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat4.xy = u_xlat4.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat36 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat4.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * vec3(u_xlat34) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat37 = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb37 = !!(u_xlat37<u_xlat23);
#else
        u_xlatb37 = u_xlat37<u_xlat23;
#endif
        u_xlat37 = (u_xlatb37) ? _LightShadowData.x : 1.0;
        u_xlat36 = u_xlat36 + u_xlat37;
    }
    u_xlat16_8.x = u_xlat36 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat24 * u_xlat16_8.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_11.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat3.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_9 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11.x = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_1.x = u_xlat16_33 * u_xlat16_33;
    u_xlat16_12 = u_xlat16_11.x * u_xlat16_1.x + (-u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_12 * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999997e-07);
    u_xlat16_11.x = u_xlat16_1.x / u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * 0.318309873;
    u_xlat16_11.x = min(u_xlat16_11.x, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_1.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33) + u_xlat10_4.xyz;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_11.xyz = u_xlat16_2.xyz / u_xlat16_11.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    u_xlat16_8.xyz = u_xlat16_11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_8.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
bool u_xlatb8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_14;
float u_xlat16;
float u_xlat17;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat25 = u_xlat17 * _LightPos.w;
    u_xlat25 = texture(_LightTextureB0, vec2(u_xlat25)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat17 = sqrt(u_xlat17);
    u_xlat17 = u_xlat17 * _LightPositionRange.w;
    u_xlat17 = u_xlat17 * 0.970000029;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
    u_xlat8.x = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<u_xlat17);
#else
    u_xlatb8 = u_xlat8.x<u_xlat17;
#endif
    u_xlat16_5.x = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_5.x = u_xlat0.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat25 * u_xlat16_5.x;
    u_xlat8.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xyz, -8.0).w;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_8.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat8.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_6 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat8.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_8.x = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat16 = dot((-u_xlat3.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_1.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_9 = u_xlat16_8.x * u_xlat16_1.x + (-u_xlat16_8.x);
    u_xlat16_8.x = u_xlat16_9 * u_xlat16_8.x + 1.0;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_8.x = max(u_xlat16_8.x, 9.99999997e-07);
    u_xlat16_8.x = u_xlat16_1.x / u_xlat16_8.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.318309873;
    u_xlat16_8.x = min(u_xlat16_8.x, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_1.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_5.x = u_xlat16 * u_xlat16;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_24) + u_xlat10_4.xyz;
    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_1.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_8.xyz = u_xlat16_2.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_8.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_29) * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec3 u_xlat10_11;
mediump float u_xlat16_12;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat23;
float u_xlat24;
int u_xlati26;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat34 = inversesqrt(u_xlat23);
    u_xlat3.xyz = u_xlat11.xyz * vec3(u_xlat34);
    u_xlat24 = u_xlat23 * _LightPos.w;
    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
    u_xlat4.xyz = u_xlat3.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat4.xyz);
    u_xlat36 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.zxy * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat4.xy = u_xlat4.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat36 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat4.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * vec3(u_xlat34) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat37 = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb37 = !!(u_xlat37<u_xlat23);
#else
        u_xlatb37 = u_xlat37<u_xlat23;
#endif
        u_xlat37 = (u_xlatb37) ? _LightShadowData.x : 1.0;
        u_xlat36 = u_xlat36 + u_xlat37;
    }
    u_xlat16_8.x = u_xlat36 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat24 * u_xlat16_8.x;
    u_xlat11.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat11.x = texture(_LightTexture0, u_xlat11.xyz, -8.0).w;
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_11.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat3.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_9 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11.x = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_1.x = u_xlat16_33 * u_xlat16_33;
    u_xlat16_12 = u_xlat16_11.x * u_xlat16_1.x + (-u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_12 * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999997e-07);
    u_xlat16_11.x = u_xlat16_1.x / u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * 0.318309873;
    u_xlat16_11.x = min(u_xlat16_11.x, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_1.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33) + u_xlat10_4.xyz;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_11.xyz = u_xlat16_2.xyz / u_xlat16_11.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    u_xlat16_8.xyz = u_xlat16_11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_8.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
float u_xlat21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat23 = u_xlat21 * _LightPos.w;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat23)).w;
    u_xlat21 = u_xlat16_4.x * u_xlat21;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat0.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat0.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_4.xxx * u_xlat0.xzw;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat18 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_4.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat16_4.xxx * u_xlat8.xyz;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat1.xyz = u_xlat8.xyz * vec3(u_xlat16_19) + u_xlat1.xyz;
    u_xlat16_19 = u_xlat16_2 * u_xlat16_18 + (-u_xlat16_2);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2 + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_18);
    u_xlat1.xyz = vec3(u_xlat16_18) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat3.xy / u_xlat3.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat3.z<0.0);
#else
    u_xlatb3 = u_xlat3.z<0.0;
#endif
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = u_xlat7 * _LightPos.w;
    u_xlat7 = inversesqrt(u_xlat7);
    u_xlat3.xyz = vec3(u_xlat7) * u_xlat3.xyz;
    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = (-u_xlat0.z) * u_xlat21 + u_xlat7;
    u_xlat7 = unity_ShadowFadeCenterAndType.w * u_xlat7 + u_xlat2.z;
    u_xlat7 = u_xlat7 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat7) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz, -8.0).w;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = u_xlat23 * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat23);
    u_xlat23 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat0.x = u_xlat0.x * u_xlat23;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_4.xxx * u_xlat0.xzw;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat18 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat0.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat16_4.xxx * u_xlat8.xyz;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat1.xyz = u_xlat8.xyz * vec3(u_xlat16_19) + u_xlat1.xyz;
    u_xlat16_19 = u_xlat16_2 * u_xlat16_18 + (-u_xlat16_2);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2 + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_18);
    u_xlat1.xyz = vec3(u_xlat16_18) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
lowp float u_xlat10_7;
vec3 u_xlat9;
mediump float u_xlat16_12;
float u_xlat14;
bool u_xlatb14;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
    u_xlat16_0 = (-_LightShadowData.x) + 1.0;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_0 = u_xlat10_7 * u_xlat16_0 + _LightShadowData.x;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.z) * u_xlat2.x + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat9.z;
    u_xlat14 = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat7.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat14 + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat3.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat3.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.z<0.0);
#else
    u_xlatb14 = u_xlat0.z<0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat7.xyz = (-u_xlat3.xyz) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = u_xlat23 * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat23);
    u_xlat23 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat0.x = u_xlat0.x * u_xlat23;
    u_xlat0.x = u_xlat16_12 * u_xlat0.x;
    u_xlat0.x = u_xlat16_5.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat7.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot(u_xlat7.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_5.xxx * u_xlat0.xzw;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
float u_xlat16;
bool u_xlatb16;
float u_xlat24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_8 = (-_LightShadowData.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_8 + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat8.x = (-u_xlat0.z) * u_xlat24 + u_xlat8.x;
    u_xlat8.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat2.z;
    u_xlat16 = u_xlat8.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_6.x = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat0.z<0.0);
#else
    u_xlatb16 = u_xlat0.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat16 * u_xlat0.x;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = u_xlat26 * _LightPos.w;
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat26 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat0.x = u_xlat0.x * u_xlat26;
    u_xlat0.x = u_xlat16_14 * u_xlat0.x;
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_6.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_30 = dot(u_xlat8.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_30);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_7.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat8.xyz;
    u_xlat16_30 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_8 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_6.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_6.xxx * u_xlat0.xzw;
    u_xlat16_6.x = (-u_xlat1.w) + 1.0;
    u_xlat16_25 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_2 = (-u_xlat16_25) * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_1 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_8);
    u_xlat0.xyz = vec3(u_xlat16_8) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_6.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_12;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat2.x + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat9.z;
    u_xlat7 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat7 + u_xlat10_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_5.x * u_xlat16_12;
    u_xlat0.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat2.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_12;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat2.x + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat9.z;
    u_xlat7 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat7 + u_xlat10_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat3.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat3.zz + u_xlat0.xy;
    u_xlat2.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat16_12;
    u_xlat0.x = u_xlat16_5.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat10;
float u_xlat21;
mediump float u_xlat16_22;
float u_xlat23;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat23 = dot(u_xlat3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat3.x);
    u_xlat10 = u_xlat10 * _LightPositionRange.w;
    u_xlat10 = u_xlat10 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23<u_xlat10);
#else
    u_xlatb23 = u_xlat23<u_xlat10;
#endif
    u_xlat16_4.x = (u_xlatb23) ? _LightShadowData.x : 1.0;
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat3.x * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat3.x);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat23);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_4.xxx * u_xlat0.xzw;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bool u_xlatb6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
vec3 u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat24;
float u_xlat33;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati38;
bool u_xlatb39;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat33 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = inversesqrt(u_xlat24);
    u_xlat14.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat4 = u_xlat24 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat4)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat15.xyz = u_xlat14.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat15.xyz = u_xlat14.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat15.xyz);
    u_xlat5.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat15.xyz = u_xlat15.xyz * u_xlat5.xxx;
    u_xlat5.xyz = u_xlat14.yzx * u_xlat15.xyz;
    u_xlat5.xyz = u_xlat15.zxy * u_xlat14.zxy + (-u_xlat5.xyz);
    u_xlat15.xy = u_xlat15.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat37 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat15.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * u_xlat3.xxx + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat6.x = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6.x<u_xlat24);
#else
        u_xlatb6 = u_xlat6.x<u_xlat24;
#endif
        u_xlat6.x = (u_xlatb6) ? _LightShadowData.x : 1.0;
        u_xlat37 = u_xlat37 + u_xlat6.x;
    }
    u_xlat16_8.x = u_xlat37 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4 * u_xlat16_8.x;
    u_xlat11.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat14.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_9 = (-u_xlat1.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat14.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat14.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_34 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_2 = u_xlat16_11 * u_xlat16_34 + (-u_xlat16_11);
    u_xlat16_11 = u_xlat16_2 * u_xlat16_11 + 1.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_11 = max(u_xlat16_11, 9.99999997e-07);
    u_xlat16_11 = u_xlat16_34 / u_xlat16_11;
    u_xlat16_11 = u_xlat16_11 * 0.318309873;
    u_xlat16_11 = min(u_xlat16_11, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_33) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_11) * u_xlat1.xyz;
    u_xlat11.xyz = vec3(u_xlat16_11) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat11.xyz = u_xlat2.xyz / u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + u_xlat11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    u_xlat16_8.xyz = u_xlat11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_8.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat10;
float u_xlat16;
bool u_xlatb16;
float u_xlat21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat3 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat16 = dot(u_xlat3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat3.x);
    u_xlat10 = u_xlat10 * _LightPositionRange.w;
    u_xlat10 = u_xlat10 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<u_xlat10);
#else
    u_xlatb16 = u_xlat16<u_xlat10;
#endif
    u_xlat16_4.x = (u_xlatb16) ? _LightShadowData.x : 1.0;
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat3.x * _LightPos.w;
    u_xlat16 = inversesqrt(u_xlat3.x);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat16);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat23 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat23;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_4.xxx * u_xlat0.xzw;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bool u_xlatb6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
vec3 u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat24;
float u_xlat33;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati38;
bool u_xlatb39;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat33 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = inversesqrt(u_xlat24);
    u_xlat14.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat4 = u_xlat24 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat4)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat15.xyz = u_xlat14.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat15.xyz = u_xlat14.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat15.xyz);
    u_xlat5.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat15.xyz = u_xlat15.xyz * u_xlat5.xxx;
    u_xlat5.xyz = u_xlat14.yzx * u_xlat15.xyz;
    u_xlat5.xyz = u_xlat15.zxy * u_xlat14.zxy + (-u_xlat5.xyz);
    u_xlat15.xy = u_xlat15.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat37 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat15.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * u_xlat3.xxx + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat6.x = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6.x<u_xlat24);
#else
        u_xlatb6 = u_xlat6.x<u_xlat24;
#endif
        u_xlat6.x = (u_xlatb6) ? _LightShadowData.x : 1.0;
        u_xlat37 = u_xlat37 + u_xlat6.x;
    }
    u_xlat16_8.x = u_xlat37 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4 * u_xlat16_8.x;
    u_xlat11.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat11.x = texture(_LightTexture0, u_xlat11.xyz, -8.0).w;
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat11.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat14.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_9 = (-u_xlat1.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat14.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat14.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_34 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_2 = u_xlat16_11 * u_xlat16_34 + (-u_xlat16_11);
    u_xlat16_11 = u_xlat16_2 * u_xlat16_11 + 1.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_11 = max(u_xlat16_11, 9.99999997e-07);
    u_xlat16_11 = u_xlat16_34 / u_xlat16_11;
    u_xlat16_11 = u_xlat16_11 * 0.318309873;
    u_xlat16_11 = min(u_xlat16_11, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_33) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_11) * u_xlat1.xyz;
    u_xlat11.xyz = vec3(u_xlat16_11) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat11.xyz = u_xlat2.xyz / u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + u_xlat11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    u_xlat16_8.xyz = u_xlat11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_8.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat16 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat16);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat3.xxx;
    u_xlat16 = u_xlat16 * _LightPos.w;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat16)).w;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyw * u_xlat3.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_21 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_14) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_21) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyw / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat16 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat7.xyz * u_xlat2.xxx + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_22 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_2 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_2 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_4.x = u_xlat14 * u_xlat14;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_21) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_7) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_7) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyz / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_4.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
float u_xlat10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat16 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat16);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat3.z<0.0);
#else
    u_xlatb10 = u_xlat3.z<0.0;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat10 * u_xlat3.x;
    u_xlat16 = u_xlat16 * _LightPos.w;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat16)).w;
    u_xlat16 = u_xlat16 * u_xlat3.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat7.xyz;
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_21 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_14) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_21) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyw / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat16 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat16 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat16);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat3.xxx;
    u_xlat16 = u_xlat16 * _LightPos.w;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat16)).w;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat16 = u_xlat16 * u_xlat3.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyw * u_xlat3.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_21 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_14) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_21) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyw / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat16 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec2 u_xlat7;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyz * vec3(u_xlat14) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_14 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_9 = u_xlat16_14 * u_xlat16_2 + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_9 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_14 = u_xlat16_2 / u_xlat16_14;
    u_xlat16_14 = u_xlat16_14 * 0.318309873;
    u_xlat16_14 = min(u_xlat16_14, 64.0);
    u_xlat16_22 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_14) * u_xlat1.xyz;
    u_xlat1.xyz = vec3(u_xlat16_14) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat11;
mediump float u_xlat16_11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
float u_xlat18;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat3.z<0.0);
#else
    u_xlatb11 = u_xlat3.z<0.0;
#endif
    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat11.x * u_xlat3.x;
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat18 = texture(_LightTextureB0, vec2(u_xlat18)).w;
    u_xlat18 = u_xlat18 * u_xlat3.x;
    u_xlat3.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat11.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat11.xy,u_xlat11.z);
    u_xlat10_11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
    u_xlat16_11 = u_xlat10_11 * u_xlat16_19 + _LightShadowData.x;
    u_xlat16_5.x = u_xlat3.x + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat16_5.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_6 = (-u_xlat1.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat8.xyz;
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_24 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_2 = u_xlat16_25 * u_xlat16_24 + (-u_xlat16_25);
    u_xlat16_25 = u_xlat16_2 * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_25;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_16 = (-u_xlat16_16) * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat16_5.x = u_xlat8.x * u_xlat8.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_16) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_24) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat2.xyw / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat18 * u_xlat16_5.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_29) * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat12;
bool u_xlatb12;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat20;
mediump float u_xlat16_21;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat27 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat20 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat3.x = inversesqrt(u_xlat20);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat3.z<0.0);
#else
    u_xlatb12 = u_xlat3.z<0.0;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat12.x * u_xlat3.x;
    u_xlat20 = u_xlat20 * _LightPos.w;
    u_xlat20 = texture(_LightTextureB0, vec2(u_xlat20)).w;
    u_xlat20 = u_xlat20 * u_xlat3.x;
    u_xlat3.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat12.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat4.xyz = u_xlat12.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat12.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat12.xyz + _ShadowOffsets[2].xyz;
    vec3 txVec2 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat12.xyz = u_xlat12.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec3 = vec3(u_xlat12.xy,u_xlat12.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat12.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_21 = (-_LightShadowData.x) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat16_21 + _LightShadowData.x;
    u_xlat16_6.x = u_xlat3.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat20 = u_xlat20 * u_xlat16_6.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_33 = dot(u_xlat9.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_7 = (-u_xlat1.w) + 1.0;
    u_xlat16_16.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat9.xyz;
    u_xlat16_8 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_8 = inversesqrt(u_xlat16_8);
    u_xlat16_16.xyz = u_xlat16_16.xyz * vec3(u_xlat16_8);
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_27 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_2 = u_xlat16_28 * u_xlat16_27 + (-u_xlat16_28);
    u_xlat16_28 = u_xlat16_2 * u_xlat16_28 + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = max(u_xlat16_28, 9.99999997e-07);
    u_xlat16_27 = u_xlat16_27 / u_xlat16_28;
    u_xlat16_27 = u_xlat16_27 * 0.318309873;
    u_xlat16_27 = min(u_xlat16_27, 64.0);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat16_6.x = u_xlat9.x * u_xlat9.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_6.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_18) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_27) * u_xlat1.xyz;
    u_xlat9.xyz = vec3(u_xlat16_27) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat9.xyz = u_xlat2.xyw / u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + u_xlat9.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat20 * u_xlat16_6.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat9.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_6.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump float u_xlat16_2;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
vec2 u_xlat17;
mediump float u_xlat16_22;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat17.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat17.xy = floor(u_xlat17.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat17.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat4.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
    u_xlat3.xyw = u_xlat3.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.z;
    u_xlat8.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_16 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_5.x = u_xlat8.x + u_xlat10_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_13.xyz = u_xlat8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6 = dot((-_LightDir.xyz), u_xlat16_13.xyz);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlat8.xyz = (-u_xlat3.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_14 = (-u_xlat1.w) + 1.0;
    u_xlat16_7.xyz = u_xlat8.xyz * u_xlat2.xxx + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_7.xyz = vec3(u_xlat16_22) * u_xlat16_7.xyz;
    u_xlat16_8 = dot(u_xlat16_13.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16 = dot((-_LightDir.xyz), u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_2 = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_2 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_13.x = u_xlat16 * u_xlat16;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_13.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_8) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat2.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_13.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13.x = min(max(u_xlat16_13.x, 0.0), 1.0);
#else
    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_13.x * u_xlat16_5.x;
    u_xlat1.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_6) * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec2 u_xlat8;
vec3 u_xlat9;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_14;
float u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
vec2 u_xlat17;
mediump float u_xlat16_17;
float u_xlat24;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat17.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat17.xy = floor(u_xlat17.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat17.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat4.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
    u_xlat3.xyw = u_xlat3.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.z;
    u_xlat8.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_16 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_5.x = u_xlat8.x + u_xlat10_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat8.xy = u_xlat3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat3.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat3.ww + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xy, -8.0).w;
    u_xlat8.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat1.xyz = (-u_xlat3.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat16_6 = (-u_xlat2.w) + 1.0;
    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16) + (-_LightDir.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat24 = dot((-_LightDir.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_9 = u_xlat16_1 * u_xlat16_1;
    u_xlat16_17 = u_xlat16_16 * u_xlat16_9 + (-u_xlat16_16);
    u_xlat16_16 = u_xlat16_17 * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_16 = max(u_xlat16_16, 9.99999997e-07);
    u_xlat16_16 = u_xlat16_9 / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * 0.318309873;
    u_xlat16_16 = min(u_xlat16_16, 64.0);
    u_xlat16_1 = (-u_xlat16_1) * u_xlat16_1 + 1.0;
    u_xlat16_1 = u_xlat16_1 + u_xlat16_1;
    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat16_5.x = u_xlat24 * u_xlat24;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat9.xyz = u_xlat9.xyz * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_1) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_16) * u_xlat1.xyz;
    u_xlat1.xyz = vec3(u_xlat16_16) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_29) * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
bool u_xlatb8;
mediump vec3 u_xlat16_14;
float u_xlat16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
float u_xlat27;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat27 = u_xlat18 * _LightPos.w;
    u_xlat27 = texture(_LightTextureB0, vec2(u_xlat27)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = u_xlat18 * _LightPositionRange.w;
    u_xlat18 = u_xlat18 * 0.970000029;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
    u_xlat8.x = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<u_xlat18);
#else
    u_xlatb8 = u_xlat8.x<u_xlat18;
#endif
    u_xlat16_5.x = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_5.x = u_xlat0.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat27 * u_xlat16_5.x;
    u_xlat8.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat8.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_6 = (-u_xlat1.w) + 1.0;
    u_xlat16_14.xyz = u_xlat8.xyz * u_xlat2.xxx + (-u_xlat3.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16 = dot((-u_xlat3.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_2 = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_2 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_5.x = u_xlat16 * u_xlat16;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_8) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat2.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_29) * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bool u_xlatb6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
vec3 u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat24;
float u_xlat33;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati38;
bool u_xlatb39;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat33 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = inversesqrt(u_xlat24);
    u_xlat14.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat4 = u_xlat24 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat4)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat15.xyz = u_xlat14.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat15.xyz = u_xlat14.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat15.xyz);
    u_xlat5.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat15.xyz = u_xlat15.xyz * u_xlat5.xxx;
    u_xlat5.xyz = u_xlat14.yzx * u_xlat15.xyz;
    u_xlat5.xyz = u_xlat15.zxy * u_xlat14.zxy + (-u_xlat5.xyz);
    u_xlat15.xy = u_xlat15.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat37 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat15.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * u_xlat3.xxx + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat6.x = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6.x<u_xlat24);
#else
        u_xlatb6 = u_xlat6.x<u_xlat24;
#endif
        u_xlat6.x = (u_xlatb6) ? _LightShadowData.x : 1.0;
        u_xlat37 = u_xlat37 + u_xlat6.x;
    }
    u_xlat16_8.x = u_xlat37 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4 * u_xlat16_8.x;
    u_xlat11.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat14.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_9 = (-u_xlat1.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat14.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat14.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_34 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_2 = u_xlat16_11 * u_xlat16_34 + (-u_xlat16_11);
    u_xlat16_11 = u_xlat16_2 * u_xlat16_11 + 1.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_11 = max(u_xlat16_11, 9.99999997e-07);
    u_xlat16_11 = u_xlat16_34 / u_xlat16_11;
    u_xlat16_11 = u_xlat16_11 * 0.318309873;
    u_xlat16_11 = min(u_xlat16_11, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_33) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_11) * u_xlat1.xyz;
    u_xlat11.xyz = vec3(u_xlat16_11) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat11.xyz = u_xlat2.xyz / u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + u_xlat11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    u_xlat16_8.xyz = u_xlat11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_8.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
bool u_xlatb8;
mediump vec3 u_xlat16_14;
float u_xlat16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
float u_xlat27;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat27 = u_xlat18 * _LightPos.w;
    u_xlat27 = texture(_LightTextureB0, vec2(u_xlat27)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = u_xlat18 * _LightPositionRange.w;
    u_xlat18 = u_xlat18 * 0.970000029;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
    u_xlat8.x = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<u_xlat18);
#else
    u_xlatb8 = u_xlat8.x<u_xlat18;
#endif
    u_xlat16_5.x = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_5.x = u_xlat0.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat27 * u_xlat16_5.x;
    u_xlat8.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xyz, -8.0).w;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat8.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat8.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_6 = (-u_xlat1.w) + 1.0;
    u_xlat16_14.xyz = u_xlat8.xyz * u_xlat2.xxx + (-u_xlat3.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16 = dot((-u_xlat3.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_2 = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_2 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_5.x = u_xlat16 * u_xlat16;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_8) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat2.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_29) * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bool u_xlatb6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
vec3 u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat24;
float u_xlat33;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati38;
bool u_xlatb39;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat33 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = inversesqrt(u_xlat24);
    u_xlat14.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat4 = u_xlat24 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat4)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat15.xyz = u_xlat14.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat15.xyz = u_xlat14.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat15.xyz);
    u_xlat5.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat15.xyz = u_xlat15.xyz * u_xlat5.xxx;
    u_xlat5.xyz = u_xlat14.yzx * u_xlat15.xyz;
    u_xlat5.xyz = u_xlat15.zxy * u_xlat14.zxy + (-u_xlat5.xyz);
    u_xlat15.xy = u_xlat15.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat37 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat15.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * u_xlat3.xxx + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat6.x = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6.x<u_xlat24);
#else
        u_xlatb6 = u_xlat6.x<u_xlat24;
#endif
        u_xlat6.x = (u_xlatb6) ? _LightShadowData.x : 1.0;
        u_xlat37 = u_xlat37 + u_xlat6.x;
    }
    u_xlat16_8.x = u_xlat37 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4 * u_xlat16_8.x;
    u_xlat11.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat11.x = texture(_LightTexture0, u_xlat11.xyz, -8.0).w;
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat11.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat14.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_9 = (-u_xlat1.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat14.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat14.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_34 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_2 = u_xlat16_11 * u_xlat16_34 + (-u_xlat16_11);
    u_xlat16_11 = u_xlat16_2 * u_xlat16_11 + 1.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_11 = max(u_xlat16_11, 9.99999997e-07);
    u_xlat16_11 = u_xlat16_34 / u_xlat16_11;
    u_xlat16_11 = u_xlat16_11 * 0.318309873;
    u_xlat16_11 = min(u_xlat16_11, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_33) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_11) * u_xlat1.xyz;
    u_xlat11.xyz = vec3(u_xlat16_11) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat11.xyz = u_xlat2.xyz / u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + u_xlat11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    u_xlat16_8.xyz = u_xlat11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_8.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "POINT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
}
}
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  ZWrite Off
  GpuProgramID 113745
Program "vp" {
SubProgram "gles3 " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = u_xlat21 * _LightPos.w;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat21 = u_xlat16_4.x * u_xlat21;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat0.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat0.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_4.xxx * u_xlat16_0.xzw;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_4.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_9;
float u_xlat15;
bool u_xlatb15;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat3.xy / u_xlat3.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat3.z<0.0);
#else
    u_xlatb15 = u_xlat3.z<0.0;
#endif
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat15 * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = u_xlat7 * _LightPos.w;
    u_xlat7 = inversesqrt(u_xlat7);
    u_xlat3.xyz = vec3(u_xlat7) * u_xlat3.xyz;
    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = (-u_xlat0.z) * u_xlat21 + u_xlat7;
    u_xlat7 = unity_ShadowFadeCenterAndType.w * u_xlat7 + u_xlat2.z;
    u_xlat7 = u_xlat7 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat7) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_9.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_5.xxx * u_xlat16_9.xyz;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(u_xlat16_22) + u_xlat10_1.xyz;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_21 + (-u_xlat16_2.x);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2.x + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21);
    u_xlat16_1.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat15;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz, -8.0).w;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat22)).w;
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_4.xxx * u_xlat16_0.xzw;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat0.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
lowp float u_xlat10_7;
mediump float u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat22;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
    u_xlat16_0.x = (-_LightShadowData.x) + 1.0;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat15 = _ZBufferParams.x * u_xlat15 + _ZBufferParams.y;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat2.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_0.x = u_xlat10_7 * u_xlat16_0.x + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.z) * u_xlat15 + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat2.z;
    u_xlat14 = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat7.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat14 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.z<0.0);
#else
    u_xlatb14 = u_xlat0.z<0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat22)).w;
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = u_xlat16_11 * u_xlat0.x;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot(u_xlat7.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_4.xxx * u_xlat16_0.xzw;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
float u_xlat16;
bool u_xlatb16;
float u_xlat17;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_8 = (-_LightShadowData.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_8 + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat8.x = (-u_xlat0.z) * u_xlat24 + u_xlat8.x;
    u_xlat8.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat2.z;
    u_xlat16 = u_xlat8.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_6.x = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat0.z<0.0);
#else
    u_xlatb16 = u_xlat0.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat16 * u_xlat0.x;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = u_xlat17 * _LightPos.w;
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat17);
    u_xlat17 = texture(_LightTextureB0, vec2(u_xlat25)).w;
    u_xlat0.x = u_xlat0.x * u_xlat17;
    u_xlat0.x = u_xlat16_14 * u_xlat0.x;
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_30 = dot(u_xlat8.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_30);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_7.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat8.xyz;
    u_xlat16_30 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_8 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_6.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_6.xxx * u_xlat16_0.xzw;
    u_xlat16_6.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_25 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_2 = (-u_xlat16_25) * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_8);
    u_xlat16_0.xyz = vec3(u_xlat16_8) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_10;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_10 = u_xlat6 + u_xlat10_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_4.x * u_xlat16_10;
    u_xlat0.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp float u_xlat10_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_10;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_10 = u_xlat6 + u_xlat10_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat0.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat16_10;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat15;
bool u_xlatb15;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat15 = dot(u_xlat3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat22 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat23 = sqrt(u_xlat22);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15<u_xlat23);
#else
    u_xlatb15 = u_xlat15<u_xlat23;
#endif
    u_xlat16_4.x = (u_xlatb15) ? _LightShadowData.x : 1.0;
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat22 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_4.xxx * u_xlat16_0.xzw;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec3 u_xlat10_11;
mediump float u_xlat16_12;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat23;
float u_xlat24;
int u_xlati26;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat34 = inversesqrt(u_xlat23);
    u_xlat3.xyz = u_xlat11.xyz * vec3(u_xlat34);
    u_xlat24 = u_xlat23 * _LightPos.w;
    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
    u_xlat4.xyz = u_xlat3.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat4.xyz);
    u_xlat36 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.zxy * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat4.xy = u_xlat4.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat36 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat4.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * vec3(u_xlat34) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat37 = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb37 = !!(u_xlat37<u_xlat23);
#else
        u_xlatb37 = u_xlat37<u_xlat23;
#endif
        u_xlat37 = (u_xlatb37) ? _LightShadowData.x : 1.0;
        u_xlat36 = u_xlat36 + u_xlat37;
    }
    u_xlat16_8.x = u_xlat36 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat24 * u_xlat16_8.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_11.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat3.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_9 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11.x = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_1.x = u_xlat16_33 * u_xlat16_33;
    u_xlat16_12 = u_xlat16_11.x * u_xlat16_1.x + (-u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_12 * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999997e-07);
    u_xlat16_11.x = u_xlat16_1.x / u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * 0.318309873;
    u_xlat16_11.x = min(u_xlat16_11.x, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_1.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33) + u_xlat10_4.xyz;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_11.xyz = u_xlat16_2.xyz / u_xlat16_11.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat3 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat15 = dot(u_xlat3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat22 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat16 = sqrt(u_xlat22);
    u_xlat16 = u_xlat16 * _LightPositionRange.w;
    u_xlat16 = u_xlat16 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15<u_xlat16);
#else
    u_xlatb15 = u_xlat15<u_xlat16;
#endif
    u_xlat16_4.x = (u_xlatb15) ? _LightShadowData.x : 1.0;
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat22 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_4.xxx * u_xlat16_0.xzw;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec3 u_xlat10_11;
mediump float u_xlat16_12;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat23;
float u_xlat24;
int u_xlati26;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat34 = inversesqrt(u_xlat23);
    u_xlat3.xyz = u_xlat11.xyz * vec3(u_xlat34);
    u_xlat24 = u_xlat23 * _LightPos.w;
    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
    u_xlat4.xyz = u_xlat3.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat4.xyz);
    u_xlat36 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.zxy * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat4.xy = u_xlat4.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat36 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat4.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * vec3(u_xlat34) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat37 = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb37 = !!(u_xlat37<u_xlat23);
#else
        u_xlatb37 = u_xlat37<u_xlat23;
#endif
        u_xlat37 = (u_xlatb37) ? _LightShadowData.x : 1.0;
        u_xlat36 = u_xlat36 + u_xlat37;
    }
    u_xlat16_8.x = u_xlat36 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat24 * u_xlat16_8.x;
    u_xlat11.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat11.x = texture(_LightTexture0, u_xlat11.xyz, -8.0).w;
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_11.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat3.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_9 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11.x = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_1.x = u_xlat16_33 * u_xlat16_33;
    u_xlat16_12 = u_xlat16_11.x * u_xlat16_1.x + (-u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_12 * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999997e-07);
    u_xlat16_11.x = u_xlat16_1.x / u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * 0.318309873;
    u_xlat16_11.x = min(u_xlat16_11.x, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_1.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33) + u_xlat10_4.xyz;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_11.xyz = u_xlat16_2.xyz / u_xlat16_11.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat15 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_7.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat7.xyz * u_xlat1.xxx + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_8 = u_xlat16_7.x * u_xlat16_1.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_8 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_7.x = u_xlat16_1.x / u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.318309873;
    u_xlat16_7.x = min(u_xlat16_7.x, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_4.x = u_xlat14 * u_xlat14;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_4.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat22 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat3.z<0.0);
#else
    u_xlatb16 = u_xlat3.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat22 * u_xlat16;
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat15 = u_xlat15 * u_xlat22;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + u_xlat7.xyz;
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat15 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat22 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat15 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyz * vec3(u_xlat14) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_14 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_5 * u_xlat16_5;
    u_xlat16_8.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_15 = u_xlat16_14 * u_xlat16_8.x + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_15 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_14 = u_xlat16_8.x / u_xlat16_14;
    u_xlat16_14 = u_xlat16_14 * 0.318309873;
    u_xlat16_14 = min(u_xlat16_14, 64.0);
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_8.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz;
    u_xlat16_1.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    SV_Target1.xyz = u_xlat16_1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat22 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat3.z<0.0);
#else
    u_xlatb16 = u_xlat3.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat22 * u_xlat16;
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat15 = u_xlat15 * u_xlat22;
    u_xlat22 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat10_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_3 = (-_LightShadowData.x) + 1.0;
    u_xlat16_16 = u_xlat10_16 * u_xlat16_3 + _LightShadowData.x;
    u_xlat16_4.x = u_xlat22 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat15 * u_xlat16_4.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + u_xlat7.xyz;
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat15 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat28 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat3.z<0.0);
#else
    u_xlatb20 = u_xlat3.z<0.0;
#endif
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat28 = u_xlat28 * u_xlat20;
    u_xlat19 = u_xlat19 * _LightPos.w;
    u_xlat19 = texture(_LightTextureB0, vec2(u_xlat19)).w;
    u_xlat19 = u_xlat19 * u_xlat28;
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    vec3 txVec2 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat20 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_3 = (-_LightShadowData.x) + 1.0;
    u_xlat20 = u_xlat20 * u_xlat16_3 + _LightShadowData.x;
    u_xlat16_6.x = u_xlat28 + u_xlat20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat16_6.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_33 = dot(u_xlat9.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_7 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_16.xyz = u_xlat1.xyw * u_xlat2.xxx + u_xlat9.xyz;
    u_xlat16_8 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_8 = inversesqrt(u_xlat16_8);
    u_xlat16_16.xyz = u_xlat16_16.xyz * vec3(u_xlat16_8);
    u_xlat16_1.x = dot(u_xlat16_6.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_27 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_10 = u_xlat16_1.x * u_xlat16_27 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_27 = u_xlat16_27 / u_xlat16_1.x;
    u_xlat16_27 = u_xlat16_27 * 0.318309873;
    u_xlat16_27 = min(u_xlat16_27, 64.0);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat16_6.x = u_xlat9.x * u_xlat9.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_6.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_18) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_1.xyw;
    u_xlat16_9.xyz = vec3(u_xlat16_27) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_9.xyz = u_xlat16_2.xyz / u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_9.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat19 * u_xlat16_6.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_9.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump float u_xlat16_4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_12;
float u_xlat14;
lowp float u_xlat10_14;
mediump float u_xlat16_19;
float u_xlat21;
mediump float u_xlat16_21;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat10_14 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4 = u_xlat7.x + u_xlat10_14;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_7.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_11.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_5 = dot((-_LightDir.xyz), u_xlat16_11.xyz);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_12 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_6.xyz = u_xlat7.xyz * u_xlat1.xxx + (-_LightDir.xyz);
    u_xlat16_19 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_19 = inversesqrt(u_xlat16_19);
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
    u_xlat16_7.x = dot(u_xlat16_11.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_8 = u_xlat16_7.x * u_xlat16_1.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_8 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_7.x = u_xlat16_1.x / u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.318309873;
    u_xlat16_7.x = min(u_xlat16_7.x, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_11.x = u_xlat14 * u_xlat14;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_11.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_11.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_11.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_5) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
lowp float u_xlat10_14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat10_14 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4.x = u_xlat7.x + u_xlat10_14;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat7.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyz * vec3(u_xlat14) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_14 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_5 * u_xlat16_5;
    u_xlat16_8.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_15 = u_xlat16_14 * u_xlat16_8.x + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_15 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_14 = u_xlat16_8.x / u_xlat16_14;
    u_xlat16_14 = u_xlat16_14 * 0.318309873;
    u_xlat16_14 = min(u_xlat16_14, 64.0);
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_8.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz;
    u_xlat16_1.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    SV_Target1.xyz = u_xlat16_1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
bool u_xlatb8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_14;
float u_xlat16;
float u_xlat17;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat25 = u_xlat17 * _LightPos.w;
    u_xlat25 = texture(_LightTextureB0, vec2(u_xlat25)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat17 = sqrt(u_xlat17);
    u_xlat17 = u_xlat17 * _LightPositionRange.w;
    u_xlat17 = u_xlat17 * 0.970000029;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
    u_xlat8.x = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<u_xlat17);
#else
    u_xlatb8 = u_xlat8.x<u_xlat17;
#endif
    u_xlat16_5.x = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_5.x = u_xlat0.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat25 * u_xlat16_5.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_8.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat8.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_6 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat8.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_8.x = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat16 = dot((-u_xlat3.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_1.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_9 = u_xlat16_8.x * u_xlat16_1.x + (-u_xlat16_8.x);
    u_xlat16_8.x = u_xlat16_9 * u_xlat16_8.x + 1.0;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_8.x = max(u_xlat16_8.x, 9.99999997e-07);
    u_xlat16_8.x = u_xlat16_1.x / u_xlat16_8.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.318309873;
    u_xlat16_8.x = min(u_xlat16_8.x, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_1.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_5.x = u_xlat16 * u_xlat16;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_24) + u_xlat10_4.xyz;
    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_1.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_8.xyz = u_xlat16_2.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_8.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_29) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec3 u_xlat10_11;
mediump float u_xlat16_12;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat23;
float u_xlat24;
int u_xlati26;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat34 = inversesqrt(u_xlat23);
    u_xlat3.xyz = u_xlat11.xyz * vec3(u_xlat34);
    u_xlat24 = u_xlat23 * _LightPos.w;
    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
    u_xlat4.xyz = u_xlat3.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat4.xyz);
    u_xlat36 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.zxy * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat4.xy = u_xlat4.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat36 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat4.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * vec3(u_xlat34) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat37 = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb37 = !!(u_xlat37<u_xlat23);
#else
        u_xlatb37 = u_xlat37<u_xlat23;
#endif
        u_xlat37 = (u_xlatb37) ? _LightShadowData.x : 1.0;
        u_xlat36 = u_xlat36 + u_xlat37;
    }
    u_xlat16_8.x = u_xlat36 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat24 * u_xlat16_8.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_11.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat3.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_9 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11.x = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_1.x = u_xlat16_33 * u_xlat16_33;
    u_xlat16_12 = u_xlat16_11.x * u_xlat16_1.x + (-u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_12 * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999997e-07);
    u_xlat16_11.x = u_xlat16_1.x / u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * 0.318309873;
    u_xlat16_11.x = min(u_xlat16_11.x, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_1.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33) + u_xlat10_4.xyz;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_11.xyz = u_xlat16_2.xyz / u_xlat16_11.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
bool u_xlatb8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_14;
float u_xlat16;
float u_xlat17;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat25 = u_xlat17 * _LightPos.w;
    u_xlat25 = texture(_LightTextureB0, vec2(u_xlat25)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat17 = sqrt(u_xlat17);
    u_xlat17 = u_xlat17 * _LightPositionRange.w;
    u_xlat17 = u_xlat17 * 0.970000029;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
    u_xlat8.x = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<u_xlat17);
#else
    u_xlatb8 = u_xlat8.x<u_xlat17;
#endif
    u_xlat16_5.x = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_5.x = u_xlat0.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat25 * u_xlat16_5.x;
    u_xlat8.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xyz, -8.0).w;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_8.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat8.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_6 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat8.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_8.x = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat16 = dot((-u_xlat3.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_1.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_9 = u_xlat16_8.x * u_xlat16_1.x + (-u_xlat16_8.x);
    u_xlat16_8.x = u_xlat16_9 * u_xlat16_8.x + 1.0;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_8.x = max(u_xlat16_8.x, 9.99999997e-07);
    u_xlat16_8.x = u_xlat16_1.x / u_xlat16_8.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.318309873;
    u_xlat16_8.x = min(u_xlat16_8.x, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_1.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_5.x = u_xlat16 * u_xlat16;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_24) + u_xlat10_4.xyz;
    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_1.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_8.xyz = u_xlat16_2.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_8.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_29) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec3 u_xlat10_11;
mediump float u_xlat16_12;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat23;
float u_xlat24;
int u_xlati26;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat34 = inversesqrt(u_xlat23);
    u_xlat3.xyz = u_xlat11.xyz * vec3(u_xlat34);
    u_xlat24 = u_xlat23 * _LightPos.w;
    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
    u_xlat4.xyz = u_xlat3.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat4.xyz);
    u_xlat36 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.zxy * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat4.xy = u_xlat4.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat36 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat4.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * vec3(u_xlat34) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat37 = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb37 = !!(u_xlat37<u_xlat23);
#else
        u_xlatb37 = u_xlat37<u_xlat23;
#endif
        u_xlat37 = (u_xlatb37) ? _LightShadowData.x : 1.0;
        u_xlat36 = u_xlat36 + u_xlat37;
    }
    u_xlat16_8.x = u_xlat36 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat24 * u_xlat16_8.x;
    u_xlat11.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat11.x = texture(_LightTexture0, u_xlat11.xyz, -8.0).w;
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_11.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat3.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_9 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11.x = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_1.x = u_xlat16_33 * u_xlat16_33;
    u_xlat16_12 = u_xlat16_11.x * u_xlat16_1.x + (-u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_12 * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999997e-07);
    u_xlat16_11.x = u_xlat16_1.x / u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * 0.318309873;
    u_xlat16_11.x = min(u_xlat16_11.x, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_1.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33) + u_xlat10_4.xyz;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_11.xyz = u_xlat16_2.xyz / u_xlat16_11.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
float u_xlat21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat23 = u_xlat21 * _LightPos.w;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat23)).w;
    u_xlat21 = u_xlat16_4.x * u_xlat21;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat0.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat0.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_4.xxx * u_xlat0.xzw;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat18 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_4.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat16_4.xxx * u_xlat8.xyz;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat1.xyz = u_xlat8.xyz * vec3(u_xlat16_19) + u_xlat1.xyz;
    u_xlat16_19 = u_xlat16_2 * u_xlat16_18 + (-u_xlat16_2);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2 + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_18);
    u_xlat1.xyz = vec3(u_xlat16_18) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat3.xy / u_xlat3.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat3.z<0.0);
#else
    u_xlatb3 = u_xlat3.z<0.0;
#endif
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = u_xlat7 * _LightPos.w;
    u_xlat7 = inversesqrt(u_xlat7);
    u_xlat3.xyz = vec3(u_xlat7) * u_xlat3.xyz;
    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = (-u_xlat0.z) * u_xlat21 + u_xlat7;
    u_xlat7 = unity_ShadowFadeCenterAndType.w * u_xlat7 + u_xlat2.z;
    u_xlat7 = u_xlat7 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat7) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz, -8.0).w;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = u_xlat23 * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat23);
    u_xlat23 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat0.x = u_xlat0.x * u_xlat23;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_4.xxx * u_xlat0.xzw;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat18 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat0.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat16_4.xxx * u_xlat8.xyz;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat1.xyz = u_xlat8.xyz * vec3(u_xlat16_19) + u_xlat1.xyz;
    u_xlat16_19 = u_xlat16_2 * u_xlat16_18 + (-u_xlat16_2);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2 + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_18);
    u_xlat1.xyz = vec3(u_xlat16_18) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
lowp float u_xlat10_7;
vec3 u_xlat9;
mediump float u_xlat16_12;
float u_xlat14;
bool u_xlatb14;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
    u_xlat16_0 = (-_LightShadowData.x) + 1.0;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_0 = u_xlat10_7 * u_xlat16_0 + _LightShadowData.x;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.z) * u_xlat2.x + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat9.z;
    u_xlat14 = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat7.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat14 + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat3.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat3.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.z<0.0);
#else
    u_xlatb14 = u_xlat0.z<0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat7.xyz = (-u_xlat3.xyz) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = u_xlat23 * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat23);
    u_xlat23 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat0.x = u_xlat0.x * u_xlat23;
    u_xlat0.x = u_xlat16_12 * u_xlat0.x;
    u_xlat0.x = u_xlat16_5.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat7.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot(u_xlat7.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_5.xxx * u_xlat0.xzw;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
float u_xlat16;
bool u_xlatb16;
float u_xlat24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_8 = (-_LightShadowData.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_8 + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat8.x = (-u_xlat0.z) * u_xlat24 + u_xlat8.x;
    u_xlat8.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat2.z;
    u_xlat16 = u_xlat8.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_6.x = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat0.z<0.0);
#else
    u_xlatb16 = u_xlat0.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat16 * u_xlat0.x;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = u_xlat26 * _LightPos.w;
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat26 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat0.x = u_xlat0.x * u_xlat26;
    u_xlat0.x = u_xlat16_14 * u_xlat0.x;
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_6.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_30 = dot(u_xlat8.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_30);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_7.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat8.xyz;
    u_xlat16_30 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_8 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_6.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_6.xxx * u_xlat0.xzw;
    u_xlat16_6.x = (-u_xlat1.w) + 1.0;
    u_xlat16_25 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_2 = (-u_xlat16_25) * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_1 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_8);
    u_xlat0.xyz = vec3(u_xlat16_8) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_12;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat2.x + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat9.z;
    u_xlat7 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat7 + u_xlat10_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_5.x * u_xlat16_12;
    u_xlat0.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat2.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_12;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat2.x + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat9.z;
    u_xlat7 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat7 + u_xlat10_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat3.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat3.zz + u_xlat0.xy;
    u_xlat2.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat16_12;
    u_xlat0.x = u_xlat16_5.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat10;
float u_xlat21;
mediump float u_xlat16_22;
float u_xlat23;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat23 = dot(u_xlat3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat3.x);
    u_xlat10 = u_xlat10 * _LightPositionRange.w;
    u_xlat10 = u_xlat10 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23<u_xlat10);
#else
    u_xlatb23 = u_xlat23<u_xlat10;
#endif
    u_xlat16_4.x = (u_xlatb23) ? _LightShadowData.x : 1.0;
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat3.x * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat3.x);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat23);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_4.xxx * u_xlat0.xzw;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bool u_xlatb6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
vec3 u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat24;
float u_xlat33;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati38;
bool u_xlatb39;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat33 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = inversesqrt(u_xlat24);
    u_xlat14.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat4 = u_xlat24 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat4)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat15.xyz = u_xlat14.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat15.xyz = u_xlat14.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat15.xyz);
    u_xlat5.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat15.xyz = u_xlat15.xyz * u_xlat5.xxx;
    u_xlat5.xyz = u_xlat14.yzx * u_xlat15.xyz;
    u_xlat5.xyz = u_xlat15.zxy * u_xlat14.zxy + (-u_xlat5.xyz);
    u_xlat15.xy = u_xlat15.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat37 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat15.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * u_xlat3.xxx + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat6.x = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6.x<u_xlat24);
#else
        u_xlatb6 = u_xlat6.x<u_xlat24;
#endif
        u_xlat6.x = (u_xlatb6) ? _LightShadowData.x : 1.0;
        u_xlat37 = u_xlat37 + u_xlat6.x;
    }
    u_xlat16_8.x = u_xlat37 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4 * u_xlat16_8.x;
    u_xlat11.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat14.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_9 = (-u_xlat1.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat14.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat14.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_34 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_2 = u_xlat16_11 * u_xlat16_34 + (-u_xlat16_11);
    u_xlat16_11 = u_xlat16_2 * u_xlat16_11 + 1.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_11 = max(u_xlat16_11, 9.99999997e-07);
    u_xlat16_11 = u_xlat16_34 / u_xlat16_11;
    u_xlat16_11 = u_xlat16_11 * 0.318309873;
    u_xlat16_11 = min(u_xlat16_11, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_33) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_11) * u_xlat1.xyz;
    u_xlat11.xyz = vec3(u_xlat16_11) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat11.xyz = u_xlat2.xyz / u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + u_xlat11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat10;
float u_xlat16;
bool u_xlatb16;
float u_xlat21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat3 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat16 = dot(u_xlat3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat3.x);
    u_xlat10 = u_xlat10 * _LightPositionRange.w;
    u_xlat10 = u_xlat10 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<u_xlat10);
#else
    u_xlatb16 = u_xlat16<u_xlat10;
#endif
    u_xlat16_4.x = (u_xlatb16) ? _LightShadowData.x : 1.0;
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat3.x * _LightPos.w;
    u_xlat16 = inversesqrt(u_xlat3.x);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat16);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat23 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat23;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_4.xxx * u_xlat0.xzw;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bool u_xlatb6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
vec3 u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat24;
float u_xlat33;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati38;
bool u_xlatb39;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat33 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = inversesqrt(u_xlat24);
    u_xlat14.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat4 = u_xlat24 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat4)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat15.xyz = u_xlat14.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat15.xyz = u_xlat14.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat15.xyz);
    u_xlat5.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat15.xyz = u_xlat15.xyz * u_xlat5.xxx;
    u_xlat5.xyz = u_xlat14.yzx * u_xlat15.xyz;
    u_xlat5.xyz = u_xlat15.zxy * u_xlat14.zxy + (-u_xlat5.xyz);
    u_xlat15.xy = u_xlat15.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat37 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat15.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * u_xlat3.xxx + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat6.x = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6.x<u_xlat24);
#else
        u_xlatb6 = u_xlat6.x<u_xlat24;
#endif
        u_xlat6.x = (u_xlatb6) ? _LightShadowData.x : 1.0;
        u_xlat37 = u_xlat37 + u_xlat6.x;
    }
    u_xlat16_8.x = u_xlat37 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4 * u_xlat16_8.x;
    u_xlat11.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat11.x = texture(_LightTexture0, u_xlat11.xyz, -8.0).w;
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat11.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat14.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_9 = (-u_xlat1.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat14.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat14.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_34 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_2 = u_xlat16_11 * u_xlat16_34 + (-u_xlat16_11);
    u_xlat16_11 = u_xlat16_2 * u_xlat16_11 + 1.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_11 = max(u_xlat16_11, 9.99999997e-07);
    u_xlat16_11 = u_xlat16_34 / u_xlat16_11;
    u_xlat16_11 = u_xlat16_11 * 0.318309873;
    u_xlat16_11 = min(u_xlat16_11, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_33) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_11) * u_xlat1.xyz;
    u_xlat11.xyz = vec3(u_xlat16_11) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat11.xyz = u_xlat2.xyz / u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + u_xlat11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat16 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat16);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat3.xxx;
    u_xlat16 = u_xlat16 * _LightPos.w;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat16)).w;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyw * u_xlat3.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_21 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_14) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_21) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyw / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat16 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat7.xyz * u_xlat2.xxx + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_22 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_2 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_2 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_4.x = u_xlat14 * u_xlat14;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_21) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_7) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_7) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyz / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_4.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
float u_xlat10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat16 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat16);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat3.z<0.0);
#else
    u_xlatb10 = u_xlat3.z<0.0;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat10 * u_xlat3.x;
    u_xlat16 = u_xlat16 * _LightPos.w;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat16)).w;
    u_xlat16 = u_xlat16 * u_xlat3.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat7.xyz;
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_21 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_14) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_21) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyw / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat16 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat16 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat16);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat3.xxx;
    u_xlat16 = u_xlat16 * _LightPos.w;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat16)).w;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat16 = u_xlat16 * u_xlat3.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyw * u_xlat3.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_21 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_14) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_21) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyw / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat16 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec2 u_xlat7;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyz * vec3(u_xlat14) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_14 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_9 = u_xlat16_14 * u_xlat16_2 + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_9 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_14 = u_xlat16_2 / u_xlat16_14;
    u_xlat16_14 = u_xlat16_14 * 0.318309873;
    u_xlat16_14 = min(u_xlat16_14, 64.0);
    u_xlat16_22 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_14) * u_xlat1.xyz;
    u_xlat1.xyz = vec3(u_xlat16_14) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    SV_Target1.xyz = u_xlat1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat11;
mediump float u_xlat16_11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
float u_xlat18;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat3.z<0.0);
#else
    u_xlatb11 = u_xlat3.z<0.0;
#endif
    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat11.x * u_xlat3.x;
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat18 = texture(_LightTextureB0, vec2(u_xlat18)).w;
    u_xlat18 = u_xlat18 * u_xlat3.x;
    u_xlat3.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat11.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat11.xy,u_xlat11.z);
    u_xlat10_11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
    u_xlat16_11 = u_xlat10_11 * u_xlat16_19 + _LightShadowData.x;
    u_xlat16_5.x = u_xlat3.x + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat16_5.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_6 = (-u_xlat1.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat8.xyz;
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_24 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_2 = u_xlat16_25 * u_xlat16_24 + (-u_xlat16_25);
    u_xlat16_25 = u_xlat16_2 * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_25;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_16 = (-u_xlat16_16) * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat16_5.x = u_xlat8.x * u_xlat8.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_16) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_24) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat2.xyw / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat18 * u_xlat16_5.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_29) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat12;
bool u_xlatb12;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat20;
mediump float u_xlat16_21;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat27 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat20 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat3.x = inversesqrt(u_xlat20);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat3.z<0.0);
#else
    u_xlatb12 = u_xlat3.z<0.0;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat12.x * u_xlat3.x;
    u_xlat20 = u_xlat20 * _LightPos.w;
    u_xlat20 = texture(_LightTextureB0, vec2(u_xlat20)).w;
    u_xlat20 = u_xlat20 * u_xlat3.x;
    u_xlat3.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat12.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat4.xyz = u_xlat12.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat12.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat12.xyz + _ShadowOffsets[2].xyz;
    vec3 txVec2 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat12.xyz = u_xlat12.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec3 = vec3(u_xlat12.xy,u_xlat12.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat12.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_21 = (-_LightShadowData.x) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat16_21 + _LightShadowData.x;
    u_xlat16_6.x = u_xlat3.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat20 = u_xlat20 * u_xlat16_6.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_33 = dot(u_xlat9.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_7 = (-u_xlat1.w) + 1.0;
    u_xlat16_16.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat9.xyz;
    u_xlat16_8 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_8 = inversesqrt(u_xlat16_8);
    u_xlat16_16.xyz = u_xlat16_16.xyz * vec3(u_xlat16_8);
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_27 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_2 = u_xlat16_28 * u_xlat16_27 + (-u_xlat16_28);
    u_xlat16_28 = u_xlat16_2 * u_xlat16_28 + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = max(u_xlat16_28, 9.99999997e-07);
    u_xlat16_27 = u_xlat16_27 / u_xlat16_28;
    u_xlat16_27 = u_xlat16_27 * 0.318309873;
    u_xlat16_27 = min(u_xlat16_27, 64.0);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat16_6.x = u_xlat9.x * u_xlat9.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_6.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_18) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_27) * u_xlat1.xyz;
    u_xlat9.xyz = vec3(u_xlat16_27) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat9.xyz = u_xlat2.xyw / u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + u_xlat9.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat20 * u_xlat16_6.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat9.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump float u_xlat16_2;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
vec2 u_xlat17;
mediump float u_xlat16_22;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat17.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat17.xy = floor(u_xlat17.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat17.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat4.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
    u_xlat3.xyw = u_xlat3.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.z;
    u_xlat8.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_16 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_5 = u_xlat8.x + u_xlat10_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
#else
    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
#endif
    u_xlat8.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_13.xyz = u_xlat8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6 = dot((-_LightDir.xyz), u_xlat16_13.xyz);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlat8.xyz = (-u_xlat3.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_14 = (-u_xlat1.w) + 1.0;
    u_xlat16_7.xyz = u_xlat8.xyz * u_xlat2.xxx + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_7.xyz = vec3(u_xlat16_22) * u_xlat16_7.xyz;
    u_xlat16_8 = dot(u_xlat16_13.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16 = dot((-_LightDir.xyz), u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_2 = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_2 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_13.x = u_xlat16 * u_xlat16;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_13.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_8) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat2.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_13.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13.x = min(max(u_xlat16_13.x, 0.0), 1.0);
#else
    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_13.x * u_xlat16_5;
    u_xlat1.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_6) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec2 u_xlat8;
vec3 u_xlat9;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_14;
float u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
vec2 u_xlat17;
mediump float u_xlat16_17;
float u_xlat24;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat17.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat17.xy = floor(u_xlat17.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat17.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat4.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
    u_xlat3.xyw = u_xlat3.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.z;
    u_xlat8.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_16 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_5.x = u_xlat8.x + u_xlat10_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat8.xy = u_xlat3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat3.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat3.ww + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xy, -8.0).w;
    u_xlat8.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat1.xyz = (-u_xlat3.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat16_6 = (-u_xlat2.w) + 1.0;
    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16) + (-_LightDir.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat24 = dot((-_LightDir.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_9 = u_xlat16_1 * u_xlat16_1;
    u_xlat16_17 = u_xlat16_16 * u_xlat16_9 + (-u_xlat16_16);
    u_xlat16_16 = u_xlat16_17 * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_16 = max(u_xlat16_16, 9.99999997e-07);
    u_xlat16_16 = u_xlat16_9 / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * 0.318309873;
    u_xlat16_16 = min(u_xlat16_16, 64.0);
    u_xlat16_1 = (-u_xlat16_1) * u_xlat16_1 + 1.0;
    u_xlat16_1 = u_xlat16_1 + u_xlat16_1;
    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat16_5.x = u_xlat24 * u_xlat24;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat9.xyz = u_xlat9.xyz * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_1) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_16) * u_xlat1.xyz;
    u_xlat1.xyz = vec3(u_xlat16_16) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_29) * u_xlat0.xyz;
    SV_Target1.xyz = u_xlat1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
bool u_xlatb8;
mediump vec3 u_xlat16_14;
float u_xlat16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
float u_xlat27;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat27 = u_xlat18 * _LightPos.w;
    u_xlat27 = texture(_LightTextureB0, vec2(u_xlat27)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = u_xlat18 * _LightPositionRange.w;
    u_xlat18 = u_xlat18 * 0.970000029;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
    u_xlat8.x = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<u_xlat18);
#else
    u_xlatb8 = u_xlat8.x<u_xlat18;
#endif
    u_xlat16_5.x = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_5.x = u_xlat0.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat27 * u_xlat16_5.x;
    u_xlat8.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat8.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_6 = (-u_xlat1.w) + 1.0;
    u_xlat16_14.xyz = u_xlat8.xyz * u_xlat2.xxx + (-u_xlat3.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16 = dot((-u_xlat3.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_2 = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_2 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_5.x = u_xlat16 * u_xlat16;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_8) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat2.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_29) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bool u_xlatb6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
vec3 u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat24;
float u_xlat33;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati38;
bool u_xlatb39;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat33 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = inversesqrt(u_xlat24);
    u_xlat14.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat4 = u_xlat24 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat4)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat15.xyz = u_xlat14.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat15.xyz = u_xlat14.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat15.xyz);
    u_xlat5.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat15.xyz = u_xlat15.xyz * u_xlat5.xxx;
    u_xlat5.xyz = u_xlat14.yzx * u_xlat15.xyz;
    u_xlat5.xyz = u_xlat15.zxy * u_xlat14.zxy + (-u_xlat5.xyz);
    u_xlat15.xy = u_xlat15.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat37 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat15.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * u_xlat3.xxx + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat6.x = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6.x<u_xlat24);
#else
        u_xlatb6 = u_xlat6.x<u_xlat24;
#endif
        u_xlat6.x = (u_xlatb6) ? _LightShadowData.x : 1.0;
        u_xlat37 = u_xlat37 + u_xlat6.x;
    }
    u_xlat16_8.x = u_xlat37 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4 * u_xlat16_8.x;
    u_xlat11.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat14.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_9 = (-u_xlat1.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat14.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat14.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_34 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_2 = u_xlat16_11 * u_xlat16_34 + (-u_xlat16_11);
    u_xlat16_11 = u_xlat16_2 * u_xlat16_11 + 1.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_11 = max(u_xlat16_11, 9.99999997e-07);
    u_xlat16_11 = u_xlat16_34 / u_xlat16_11;
    u_xlat16_11 = u_xlat16_11 * 0.318309873;
    u_xlat16_11 = min(u_xlat16_11, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_33) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_11) * u_xlat1.xyz;
    u_xlat11.xyz = vec3(u_xlat16_11) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat11.xyz = u_xlat2.xyz / u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + u_xlat11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
bool u_xlatb8;
mediump vec3 u_xlat16_14;
float u_xlat16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
float u_xlat27;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat27 = u_xlat18 * _LightPos.w;
    u_xlat27 = texture(_LightTextureB0, vec2(u_xlat27)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = u_xlat18 * _LightPositionRange.w;
    u_xlat18 = u_xlat18 * 0.970000029;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
    u_xlat8.x = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<u_xlat18);
#else
    u_xlatb8 = u_xlat8.x<u_xlat18;
#endif
    u_xlat16_5.x = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_5.x = u_xlat0.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat27 * u_xlat16_5.x;
    u_xlat8.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xyz, -8.0).w;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat8.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat8.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_6 = (-u_xlat1.w) + 1.0;
    u_xlat16_14.xyz = u_xlat8.xyz * u_xlat2.xxx + (-u_xlat3.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16 = dot((-u_xlat3.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_2 = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_2 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_5.x = u_xlat16 * u_xlat16;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_8) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat2.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_29) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bool u_xlatb6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
vec3 u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat24;
float u_xlat33;
mediump float u_xlat16_33;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati38;
bool u_xlatb39;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat33 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = inversesqrt(u_xlat24);
    u_xlat14.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat4 = u_xlat24 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat4)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat15.xyz = u_xlat14.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat15.xyz = u_xlat14.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat15.xyz);
    u_xlat5.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat15.xyz = u_xlat15.xyz * u_xlat5.xxx;
    u_xlat5.xyz = u_xlat14.yzx * u_xlat15.xyz;
    u_xlat5.xyz = u_xlat15.zxy * u_xlat14.zxy + (-u_xlat5.xyz);
    u_xlat15.xy = u_xlat15.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat37 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat15.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * u_xlat3.xxx + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat6.x = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6.x<u_xlat24);
#else
        u_xlatb6 = u_xlat6.x<u_xlat24;
#endif
        u_xlat6.x = (u_xlatb6) ? _LightShadowData.x : 1.0;
        u_xlat37 = u_xlat37 + u_xlat6.x;
    }
    u_xlat16_8.x = u_xlat37 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4 * u_xlat16_8.x;
    u_xlat11.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat11.x = texture(_LightTexture0, u_xlat11.xyz, -8.0).w;
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat11.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat14.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_9 = (-u_xlat1.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat14.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat14.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_34 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_2 = u_xlat16_11 * u_xlat16_34 + (-u_xlat16_11);
    u_xlat16_11 = u_xlat16_2 * u_xlat16_11 + 1.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_11 = max(u_xlat16_11, 9.99999997e-07);
    u_xlat16_11 = u_xlat16_34 / u_xlat16_11;
    u_xlat16_11 = u_xlat16_11 * 0.318309873;
    u_xlat16_11 = min(u_xlat16_11, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_33) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_11) * u_xlat1.xyz;
    u_xlat11.xyz = vec3(u_xlat16_11) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat11.xyz = u_xlat2.xyz / u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + u_xlat11.xyz;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_41) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat11.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "POINT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
}
}
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  ZTest Always
  Cull Off
  GpuProgramID 193642
Program "vp" {
SubProgram "gles3 " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ZBufferParams;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
float u_xlat1;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0 = texture(_CameraDepthTextureScaled, vs_TEXCOORD0.xy).x;
    u_xlat1 = u_xlat0 * _ZBufferParams.x;
    u_xlat0 = (-u_xlat0) * _ZBufferParams.y + 1.0;
    gl_FragDepth = u_xlat0 / u_xlat1;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "POINT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
}
}
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  ZWrite Off
  GpuProgramID 252676
Program "vp" {
SubProgram "gles3 " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat15;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat22)).w;
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat7.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_5.xxx * u_xlat16_0.xzw;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_9;
float u_xlat15;
bool u_xlatb15;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat3.xy / u_xlat3.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat3.z<0.0);
#else
    u_xlatb15 = u_xlat3.z<0.0;
#endif
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat15 * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = u_xlat7 * _LightPos.w;
    u_xlat7 = inversesqrt(u_xlat7);
    u_xlat3.xyz = vec3(u_xlat7) * u_xlat3.xyz;
    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = (-u_xlat0.z) * u_xlat21 + u_xlat7;
    u_xlat7 = unity_ShadowFadeCenterAndType.w * u_xlat7 + u_xlat2.z;
    u_xlat7 = u_xlat7 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat7 = (-u_xlat7) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_9.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_5.xxx * u_xlat16_9.xyz;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(u_xlat16_22) + u_xlat10_1.xyz;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_21 + (-u_xlat16_2.x);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2.x + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21);
    u_xlat16_1.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_9;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xyz, -8.0).w;
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = u_xlat14 * _LightPos.w;
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat3.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-u_xlat3.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_9.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_5.xxx * u_xlat16_9.xyz;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(u_xlat16_22) + u_xlat10_1.xyz;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_21 + (-u_xlat16_2.x);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2.x + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21);
    u_xlat16_1.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat6.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat6.xy;
    u_xlat6.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat6.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat6.xy = u_xlat6.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat6.x = texture(_LightTexture0, u_xlat6.xy, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp float u_xlat10_7;
mediump vec3 u_xlat16_9;
float u_xlat14;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
    u_xlat16_0 = (-_LightShadowData.x) + 1.0;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat15 = _ZBufferParams.x * u_xlat15 + _ZBufferParams.y;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat2.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_0 = u_xlat10_7 * u_xlat16_0 + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.z) * u_xlat15 + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat2.z;
    u_xlat14 = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat7.x = (-u_xlat7.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xzw = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xzw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xz = u_xlat0.xz / u_xlat0.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat0.w<0.0);
#else
    u_xlatb21 = u_xlat0.w<0.0;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz, -8.0).w;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = u_xlat14 * _LightPos.w;
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_9.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_4.xxx * u_xlat16_9.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_21 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(u_xlat16_22) + u_xlat10_1.xyz;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_21 + (-u_xlat16_2.x);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2.x + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21);
    u_xlat16_1.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_10;
float u_xlat16;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_8 = (-_LightShadowData.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_8 + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8 = sqrt(u_xlat8);
    u_xlat8 = (-u_xlat0.z) * u_xlat24 + u_xlat8;
    u_xlat8 = unity_ShadowFadeCenterAndType.w * u_xlat8 + u_xlat2.z;
    u_xlat16 = u_xlat8 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat8 = u_xlat8 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat8 = (-u_xlat8) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat0.xzw = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xzw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xz = u_xlat0.xz / u_xlat0.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat0.w<0.0);
#else
    u_xlatb24 = u_xlat0.w<0.0;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz, -8.0).w;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = u_xlat16 * _LightPos.w;
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_30);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    u_xlat16_30 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat16_6.x = u_xlat24 * u_xlat24;
    u_xlat16_6.x = u_xlat24 * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat24 * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat24 * u_xlat16_6.x;
    u_xlat16_10.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;
    u_xlat16_6.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_24 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_25 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_1.xyz = u_xlat16_10.xyz * vec3(u_xlat16_25) + u_xlat10_1.xyz;
    u_xlat16_25 = u_xlat16_2.x * u_xlat16_24 + (-u_xlat16_2.x);
    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_25;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_24);
    u_xlat16_1.xyz = vec3(u_xlat16_24) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_6.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_6.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_8;
lowp float u_xlat10_12;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_12 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4.x = u_xlat6 + u_xlat10_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_8;
lowp float u_xlat10_12;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_12 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4.x = u_xlat6.x + u_xlat10_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat6.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat6.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat6.xy;
    u_xlat6.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat6.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat6.xy = u_xlat6.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat6.x = texture(_LightTexture0, u_xlat6.xy, -8.0).w;
    u_xlat6.x = u_xlat6.x * u_xlat16_4.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
float u_xlat15;
lowp float u_xlat10_15;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = u_xlat21 * _LightPos.w;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat10_15 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_15;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_5.xxx * u_xlat16_0.xzw;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
float u_xlat15;
lowp float u_xlat10_15;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = u_xlat21 * _LightPos.w;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat10_15 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_15;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_5.xxx * u_xlat16_0.xzw;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
float u_xlat15;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat21 = texture(_LightTexture0, u_xlat2.xyz, -8.0).w;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat22)).w;
    u_xlat10_22 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat15 = u_xlat10_22 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_5.xxx * u_xlat16_0.xzw;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
float u_xlat15;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat21 = texture(_LightTexture0, u_xlat2.xyz, -8.0).w;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat22)).w;
    u_xlat10_22 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat15 = u_xlat10_22 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_5.xxx * u_xlat16_0.xzw;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_7.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat7.xyz * u_xlat1.xxx + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_8 = u_xlat16_7.x * u_xlat16_1.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_8 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_7.x = u_xlat16_1.x / u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.318309873;
    u_xlat16_7.x = min(u_xlat16_7.x, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_4.x = u_xlat14 * u_xlat14;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat22 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat3.z<0.0);
#else
    u_xlatb16 = u_xlat3.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat22 * u_xlat16;
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat15 = u_xlat15 * u_xlat22;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + u_xlat7.xyz;
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat22 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyz * vec3(u_xlat14) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_14 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_5 * u_xlat16_5;
    u_xlat16_8.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_15 = u_xlat16_14 * u_xlat16_8.x + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_15 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_14 = u_xlat16_8.x / u_xlat16_14;
    u_xlat16_14 = u_xlat16_14 * 0.318309873;
    u_xlat16_14 = min(u_xlat16_14, 64.0);
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_8.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz;
    u_xlat16_1.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat22 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat3.z<0.0);
#else
    u_xlatb16 = u_xlat3.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat22 * u_xlat16;
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat15 = u_xlat15 * u_xlat22;
    u_xlat22 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat10_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_3 = (-_LightShadowData.x) + 1.0;
    u_xlat16_16 = u_xlat10_16 * u_xlat16_3 + _LightShadowData.x;
    u_xlat16_4.x = u_xlat22 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat15 * u_xlat16_4.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + u_xlat7.xyz;
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat28 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat3.z<0.0);
#else
    u_xlatb20 = u_xlat3.z<0.0;
#endif
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat28 = u_xlat28 * u_xlat20;
    u_xlat19 = u_xlat19 * _LightPos.w;
    u_xlat19 = texture(_LightTextureB0, vec2(u_xlat19)).w;
    u_xlat19 = u_xlat19 * u_xlat28;
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    vec3 txVec2 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat20 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_3 = (-_LightShadowData.x) + 1.0;
    u_xlat20 = u_xlat20 * u_xlat16_3 + _LightShadowData.x;
    u_xlat16_6.x = u_xlat28 + u_xlat20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat16_6.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_33 = dot(u_xlat9.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_7 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_16.xyz = u_xlat1.xyw * u_xlat2.xxx + u_xlat9.xyz;
    u_xlat16_8 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_8 = inversesqrt(u_xlat16_8);
    u_xlat16_16.xyz = u_xlat16_16.xyz * vec3(u_xlat16_8);
    u_xlat16_1.x = dot(u_xlat16_6.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_27 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_10 = u_xlat16_1.x * u_xlat16_27 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_27 = u_xlat16_27 / u_xlat16_1.x;
    u_xlat16_27 = u_xlat16_27 * 0.318309873;
    u_xlat16_27 = min(u_xlat16_27, 64.0);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat16_6.x = u_xlat9.x * u_xlat9.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_6.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_18) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_1.xyw;
    u_xlat16_9.xyz = vec3(u_xlat16_27) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_9.xyz = u_xlat16_2.xyz / u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_9.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat19;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_6.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_12;
float u_xlat14;
lowp float u_xlat10_14;
mediump float u_xlat16_19;
float u_xlat21;
mediump float u_xlat16_21;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat10_14 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4.x = u_xlat7.x + u_xlat10_14;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_7.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_11.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_5 = dot((-_LightDir.xyz), u_xlat16_11.xyz);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_12 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_6.xyz = u_xlat7.xyz * u_xlat1.xxx + (-_LightDir.xyz);
    u_xlat16_19 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_19 = inversesqrt(u_xlat16_19);
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
    u_xlat16_7.x = dot(u_xlat16_11.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_8 = u_xlat16_7.x * u_xlat16_1.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_8 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_7.x = u_xlat16_1.x / u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.318309873;
    u_xlat16_7.x = min(u_xlat16_7.x, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_11.x = u_xlat14 * u_xlat14;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_11.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_5) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
lowp float u_xlat10_14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat10_14 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4.x = u_xlat7.x + u_xlat10_14;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat7.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyz * vec3(u_xlat14) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_14 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_5 * u_xlat16_5;
    u_xlat16_8.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_15 = u_xlat16_14 * u_xlat16_8.x + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_15 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_14 = u_xlat16_8.x / u_xlat16_14;
    u_xlat16_14 = u_xlat16_14 * 0.318309873;
    u_xlat16_14 = min(u_xlat16_14, 64.0);
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_8.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz;
    u_xlat16_1.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
lowp float u_xlat10_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_15 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_15;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat2.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat2.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0.x * u_xlat16_1.x + (-u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_8 * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_1.x / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
lowp float u_xlat10_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_15 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_15;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat2.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat2.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0.x * u_xlat16_1.x + (-u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_8 * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_1.x / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
lowp float u_xlat10_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_15 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_15;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat2.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat2.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0.x * u_xlat16_1.x + (-u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_8 * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_1.x / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
lowp float u_xlat10_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_15 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_15;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat2.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat2.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0.x * u_xlat16_1.x + (-u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_8 * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_1.x / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = u_xlat23 * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat23);
    u_xlat23 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat0.x = u_xlat0.x * u_xlat23;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat7.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_5.xxx * u_xlat0.xzw;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat18 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat16_4.xxx * u_xlat8.xyz;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat1.xyz = u_xlat8.xyz * vec3(u_xlat16_19) + u_xlat1.xyz;
    u_xlat16_19 = u_xlat16_2 * u_xlat16_18 + (-u_xlat16_2);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2 + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_18);
    u_xlat1.xyz = vec3(u_xlat16_18) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat3.xy / u_xlat3.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat3.z<0.0);
#else
    u_xlatb3 = u_xlat3.z<0.0;
#endif
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = u_xlat7 * _LightPos.w;
    u_xlat7 = inversesqrt(u_xlat7);
    u_xlat3.xyz = vec3(u_xlat7) * u_xlat3.xyz;
    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = (-u_xlat0.z) * u_xlat21 + u_xlat7;
    u_xlat7 = unity_ShadowFadeCenterAndType.w * u_xlat7 + u_xlat2.z;
    u_xlat7 = u_xlat7 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat7 = (-u_xlat7) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xyz, -8.0).w;
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = u_xlat14 * _LightPos.w;
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat3.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-u_xlat3.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
vec3 u_xlat8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat18 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat6.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat6.xy;
    u_xlat6.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat6.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat6.xy = u_xlat6.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat6.x = texture(_LightTexture0, u_xlat6.xy, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat16_4.xxx * u_xlat8.xyz;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat1.xyz = u_xlat8.xyz * vec3(u_xlat16_19) + u_xlat1.xyz;
    u_xlat16_19 = u_xlat16_2 * u_xlat16_18 + (-u_xlat16_2);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2 + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_18);
    u_xlat1.xyz = vec3(u_xlat16_18) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp float u_xlat10_7;
vec3 u_xlat9;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat16_0 = (-_LightShadowData.x) + 1.0;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_0 = u_xlat10_7 * u_xlat16_0 + _LightShadowData.x;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.z) * u_xlat2.x + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat9.z;
    u_xlat14 = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat7.x = (-u_xlat7.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat14 + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.xzw = u_xlat3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat3.xxx + u_xlat0.xzw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat3.zzz + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xz = u_xlat0.xz / u_xlat0.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat0.w<0.0);
#else
    u_xlatb21 = u_xlat0.w<0.0;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz, -8.0).w;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat2.xyz = (-u_xlat3.xyz) + _LightPos.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = u_xlat14 * _LightPos.w;
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat16_5.x * u_xlat0.x;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat2.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
vec3 u_xlat10;
float u_xlat16;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_8 = (-_LightShadowData.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_8 + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8 = sqrt(u_xlat8);
    u_xlat8 = (-u_xlat0.z) * u_xlat24 + u_xlat8;
    u_xlat8 = unity_ShadowFadeCenterAndType.w * u_xlat8 + u_xlat2.z;
    u_xlat16 = u_xlat8 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat8 = u_xlat8 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat8 = (-u_xlat8) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat0.xzw = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xzw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xz = u_xlat0.xz / u_xlat0.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat0.w<0.0);
#else
    u_xlatb24 = u_xlat0.w<0.0;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz, -8.0).w;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = u_xlat16 * _LightPos.w;
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_6.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_30);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    u_xlat16_30 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat16_6.x = u_xlat24 * u_xlat24;
    u_xlat16_6.x = u_xlat24 * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat24 * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat24 * u_xlat16_6.x;
    u_xlat10.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat10.xyz = u_xlat16_6.xxx * u_xlat10.xyz;
    u_xlat16_6.x = (-u_xlat1.w) + 1.0;
    u_xlat16_24 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_25 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat1.xyz = u_xlat10.xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat16_25 = u_xlat16_2 * u_xlat16_24 + (-u_xlat16_2);
    u_xlat16_25 = u_xlat16_25 * u_xlat16_2 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_25;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_24);
    u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_6.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat2.x + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat9.z;
    u_xlat7 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat7 + u_xlat10_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
vec3 u_xlat9;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat2.x + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat9.z;
    u_xlat7.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat7.x + u_xlat10_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat3.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat3.zz + u_xlat7.xy;
    u_xlat2.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat7.x = u_xlat7.x * u_xlat16_5.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat3.x = u_xlat23 * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
    u_xlat23 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat21 = u_xlat10_21 * u_xlat23;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_5.xxx * u_xlat0.xzw;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat3.x = u_xlat23 * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
    u_xlat23 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat21 = u_xlat10_21 * u_xlat23;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_5.xxx * u_xlat0.xzw;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat9;
float u_xlat10;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat2.x = texture(_LightTexture0, u_xlat2.xyz, -8.0).w;
    u_xlat9.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat10 = u_xlat3.x * _LightPos.w;
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xxx;
    u_xlat3.x = texture(_LightTextureB0, vec2(u_xlat10)).w;
    u_xlat21 = u_xlat10_21 * u_xlat3.x;
    u_xlat21 = u_xlat2.x * u_xlat21;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat9.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat9.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat9.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_5.xxx * u_xlat0.xzw;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat9;
float u_xlat10;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat2.x = texture(_LightTexture0, u_xlat2.xyz, -8.0).w;
    u_xlat9.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat10 = u_xlat3.x * _LightPos.w;
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xxx;
    u_xlat3.x = texture(_LightTextureB0, vec2(u_xlat10)).w;
    u_xlat21 = u_xlat10_21 * u_xlat3.x;
    u_xlat21 = u_xlat2.x * u_xlat21;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat9.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = exp2((-u_xlat3.xyz));
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat9.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat9.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_5.xxx * u_xlat0.xzw;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat16 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat16);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat3.xxx;
    u_xlat16 = u_xlat16 * _LightPos.w;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat16)).w;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyw * u_xlat3.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_21 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_14) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_21) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyw / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat7.xyz * u_xlat2.xxx + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_22 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_2 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_2 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_4.x = u_xlat14 * u_xlat14;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_21) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_7) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_7) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyz / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
float u_xlat10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat16 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat16);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat3.z<0.0);
#else
    u_xlatb10 = u_xlat3.z<0.0;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat10 * u_xlat3.x;
    u_xlat16 = u_xlat16 * _LightPos.w;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat16)).w;
    u_xlat16 = u_xlat16 * u_xlat3.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat7.xyz;
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_21 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_14) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_21) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyw / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat16 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat16);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat3.xxx;
    u_xlat16 = u_xlat16 * _LightPos.w;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat16)).w;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat16 = u_xlat16 * u_xlat3.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyw * u_xlat3.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_21 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_14) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_21) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyw / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec2 u_xlat7;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyz * vec3(u_xlat14) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_14 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_9 = u_xlat16_14 * u_xlat16_2 + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_9 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_14 = u_xlat16_2 / u_xlat16_14;
    u_xlat16_14 = u_xlat16_14 * 0.318309873;
    u_xlat16_14 = min(u_xlat16_14, 64.0);
    u_xlat16_22 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_14) * u_xlat1.xyz;
    u_xlat1.xyz = vec3(u_xlat16_14) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat11;
mediump float u_xlat16_11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
float u_xlat18;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat3.z<0.0);
#else
    u_xlatb11 = u_xlat3.z<0.0;
#endif
    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat11.x * u_xlat3.x;
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat18 = texture(_LightTextureB0, vec2(u_xlat18)).w;
    u_xlat18 = u_xlat18 * u_xlat3.x;
    u_xlat3.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat11.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat11.xy,u_xlat11.z);
    u_xlat10_11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
    u_xlat16_11 = u_xlat10_11 * u_xlat16_19 + _LightShadowData.x;
    u_xlat16_5.x = u_xlat3.x + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat16_5.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_6 = (-u_xlat1.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat8.xyz;
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_24 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_2 = u_xlat16_25 * u_xlat16_24 + (-u_xlat16_25);
    u_xlat16_25 = u_xlat16_2 * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_25;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_16 = (-u_xlat16_16) * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat16_5.x = u_xlat8.x * u_xlat8.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_16) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_24) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat2.xyw / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_29) * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat12;
bool u_xlatb12;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat20;
mediump float u_xlat16_21;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat27 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat20 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat3.x = inversesqrt(u_xlat20);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat3.z<0.0);
#else
    u_xlatb12 = u_xlat3.z<0.0;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat12.x * u_xlat3.x;
    u_xlat20 = u_xlat20 * _LightPos.w;
    u_xlat20 = texture(_LightTextureB0, vec2(u_xlat20)).w;
    u_xlat20 = u_xlat20 * u_xlat3.x;
    u_xlat3.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat12.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat4.xyz = u_xlat12.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat12.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat12.xyz + _ShadowOffsets[2].xyz;
    vec3 txVec2 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat12.xyz = u_xlat12.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec3 = vec3(u_xlat12.xy,u_xlat12.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat12.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_21 = (-_LightShadowData.x) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat16_21 + _LightShadowData.x;
    u_xlat16_6.x = u_xlat3.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat20 = u_xlat20 * u_xlat16_6.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_33 = dot(u_xlat9.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_7 = (-u_xlat1.w) + 1.0;
    u_xlat16_16.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat9.xyz;
    u_xlat16_8 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_8 = inversesqrt(u_xlat16_8);
    u_xlat16_16.xyz = u_xlat16_16.xyz * vec3(u_xlat16_8);
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_27 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_2 = u_xlat16_28 * u_xlat16_27 + (-u_xlat16_28);
    u_xlat16_28 = u_xlat16_2 * u_xlat16_28 + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = max(u_xlat16_28, 9.99999997e-07);
    u_xlat16_27 = u_xlat16_27 / u_xlat16_28;
    u_xlat16_27 = u_xlat16_27 * 0.318309873;
    u_xlat16_27 = min(u_xlat16_27, 64.0);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat16_6.x = u_xlat9.x * u_xlat9.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_6.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_18) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_27) * u_xlat1.xyz;
    u_xlat9.xyz = vec3(u_xlat16_27) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat9.xyz = u_xlat2.xyw / u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + u_xlat9.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat20;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat9.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_6.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump float u_xlat16_2;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
vec2 u_xlat17;
mediump float u_xlat16_22;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat17.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat17.xy = floor(u_xlat17.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat17.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat4.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
    u_xlat3.xyw = u_xlat3.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.z;
    u_xlat8.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_16 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_5.x = u_xlat8.x + u_xlat10_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_13.xyz = u_xlat8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6 = dot((-_LightDir.xyz), u_xlat16_13.xyz);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlat8.xyz = (-u_xlat3.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_14 = (-u_xlat1.w) + 1.0;
    u_xlat16_7.xyz = u_xlat8.xyz * u_xlat2.xxx + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_7.xyz = vec3(u_xlat16_22) * u_xlat16_7.xyz;
    u_xlat16_8 = dot(u_xlat16_13.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16 = dot((-_LightDir.xyz), u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_2 = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_2 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_13.x = u_xlat16 * u_xlat16;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_13.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_8) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat2.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_6) * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec2 u_xlat8;
vec3 u_xlat9;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_14;
float u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
vec2 u_xlat17;
mediump float u_xlat16_17;
float u_xlat24;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat17.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat17.xy = floor(u_xlat17.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat17.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat4.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
    u_xlat3.xyw = u_xlat3.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.z;
    u_xlat8.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_16 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_5.x = u_xlat8.x + u_xlat10_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat8.xy = u_xlat3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat3.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat3.ww + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xy, -8.0).w;
    u_xlat8.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat1.xyz = (-u_xlat3.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat16_6 = (-u_xlat2.w) + 1.0;
    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16) + (-_LightDir.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat24 = dot((-_LightDir.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_9 = u_xlat16_1 * u_xlat16_1;
    u_xlat16_17 = u_xlat16_16 * u_xlat16_9 + (-u_xlat16_16);
    u_xlat16_16 = u_xlat16_17 * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_16 = max(u_xlat16_16, 9.99999997e-07);
    u_xlat16_16 = u_xlat16_9 / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * 0.318309873;
    u_xlat16_16 = min(u_xlat16_16, 64.0);
    u_xlat16_1 = (-u_xlat16_1) * u_xlat16_1 + 1.0;
    u_xlat16_1 = u_xlat16_1 + u_xlat16_1;
    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat16_5.x = u_xlat24 * u_xlat24;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat9.xyz = u_xlat9.xyz * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_1) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_16) * u_xlat1.xyz;
    u_xlat1.xyz = vec3(u_xlat16_16) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_29) * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = exp2((-u_xlat0.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_5.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat15.xy = floor(u_xlat15.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat15.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15.x = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat15.xxx * u_xlat3.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_1 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_1;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat3.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat2.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat3.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0 * u_xlat16_1 + (-u_xlat16_0);
    u_xlat16_0 = u_xlat16_8 * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_0 = max(u_xlat16_0, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_1 / u_xlat16_0;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat1.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_14) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;
    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat15.xy = floor(u_xlat15.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat15.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15.x = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat15.xxx * u_xlat3.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_1 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_1;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat3.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat2.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat3.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0 * u_xlat16_1 + (-u_xlat16_0);
    u_xlat16_0 = u_xlat16_8 * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_0 = max(u_xlat16_0, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_1 / u_xlat16_0;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat1.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_14) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;
    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat15.xy = floor(u_xlat15.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat15.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15.x = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat15.xxx * u_xlat3.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_1 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_1;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz, -8.0).w;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat3.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat2.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat3.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0 * u_xlat16_1 + (-u_xlat16_0);
    u_xlat16_0 = u_xlat16_8 * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_0 = max(u_xlat16_0, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_1 / u_xlat16_0;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat1.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_14) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;
    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.93303299, 1.0, 1.0, 1.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat15.xy = floor(u_xlat15.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat15.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15.x = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat15.xxx * u_xlat3.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_1 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_1;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz, -8.0).w;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat3.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat2.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat3.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0 * u_xlat16_1 + (-u_xlat16_0);
    u_xlat16_0 = u_xlat16_8 * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_0 = max(u_xlat16_0, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_1 / u_xlat16_0;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat1.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_14) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;
    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = exp2((-u_xlat1.xyz));
    SV_Target1.xyz = exp2((-u_xlat16_4.xyz));
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "POINT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
}
}
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  ZWrite Off
  GpuProgramID 297743
Program "vp" {
SubProgram "gles3 " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat15;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat22)).w;
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat7.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_5.xxx * u_xlat16_0.xzw;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump vec3 u_xlat16_9;
float u_xlat15;
bool u_xlatb15;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat3.xy / u_xlat3.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat3.z<0.0);
#else
    u_xlatb15 = u_xlat3.z<0.0;
#endif
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat15 * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = u_xlat7 * _LightPos.w;
    u_xlat7 = inversesqrt(u_xlat7);
    u_xlat3.xyz = vec3(u_xlat7) * u_xlat3.xyz;
    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = (-u_xlat0.z) * u_xlat21 + u_xlat7;
    u_xlat7 = unity_ShadowFadeCenterAndType.w * u_xlat7 + u_xlat2.z;
    u_xlat7 = u_xlat7 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat7 = (-u_xlat7) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_9.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_5.xxx * u_xlat16_9.xyz;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(u_xlat16_22) + u_xlat10_1.xyz;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_21 + (-u_xlat16_2.x);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2.x + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21);
    u_xlat16_1.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_9;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xyz, -8.0).w;
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = u_xlat14 * _LightPos.w;
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat3.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-u_xlat3.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_9.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_5.xxx * u_xlat16_9.xyz;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(u_xlat16_22) + u_xlat10_1.xyz;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_21 + (-u_xlat16_2.x);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2.x + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21);
    u_xlat16_1.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat6.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat6.xy;
    u_xlat6.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat6.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat6.xy = u_xlat6.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat6.x = texture(_LightTexture0, u_xlat6.xy, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp float u_xlat10_7;
mediump vec3 u_xlat16_9;
float u_xlat14;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
    u_xlat16_0 = (-_LightShadowData.x) + 1.0;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat15 = _ZBufferParams.x * u_xlat15 + _ZBufferParams.y;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat2.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_0 = u_xlat10_7 * u_xlat16_0 + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.z) * u_xlat15 + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat2.z;
    u_xlat14 = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat7.x = (-u_xlat7.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xzw = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xzw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xz = u_xlat0.xz / u_xlat0.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat0.w<0.0);
#else
    u_xlatb21 = u_xlat0.w<0.0;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz, -8.0).w;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = u_xlat14 * _LightPos.w;
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_25);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_9.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_4.xxx * u_xlat16_9.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_21 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(u_xlat16_22) + u_xlat10_1.xyz;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_21 + (-u_xlat16_2.x);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2.x + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21);
    u_xlat16_1.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_10;
float u_xlat16;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_8 = (-_LightShadowData.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_8 + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8 = sqrt(u_xlat8);
    u_xlat8 = (-u_xlat0.z) * u_xlat24 + u_xlat8;
    u_xlat8 = unity_ShadowFadeCenterAndType.w * u_xlat8 + u_xlat2.z;
    u_xlat16 = u_xlat8 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat8 = u_xlat8 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat8 = (-u_xlat8) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat0.xzw = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xzw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xz = u_xlat0.xz / u_xlat0.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat0.w<0.0);
#else
    u_xlatb24 = u_xlat0.w<0.0;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz, -8.0).w;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = u_xlat16 * _LightPos.w;
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_30);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    u_xlat16_30 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat16_6.x = u_xlat24 * u_xlat24;
    u_xlat16_6.x = u_xlat24 * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat24 * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat24 * u_xlat16_6.x;
    u_xlat16_10.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;
    u_xlat16_6.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_24 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_25 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_1.xyz = u_xlat16_10.xyz * vec3(u_xlat16_25) + u_xlat10_1.xyz;
    u_xlat16_25 = u_xlat16_2.x * u_xlat16_24 + (-u_xlat16_2.x);
    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_25;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_24);
    u_xlat16_1.xyz = vec3(u_xlat16_24) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_8;
lowp float u_xlat10_12;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_12 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4.x = u_xlat6 + u_xlat10_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_8;
lowp float u_xlat10_12;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_12 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4.x = u_xlat6.x + u_xlat10_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat6.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat6.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat6.xy;
    u_xlat6.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat6.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat6.xy = u_xlat6.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat6.x = texture(_LightTexture0, u_xlat6.xy, -8.0).w;
    u_xlat6.x = u_xlat6.x * u_xlat16_4.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2.x = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_8.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;
    u_xlat16_4.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_1.xyz = u_xlat16_8.xyz * vec3(u_xlat16_19) + u_xlat10_1.xyz;
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_18 + (-u_xlat16_2.x);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
float u_xlat15;
lowp float u_xlat10_15;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = u_xlat21 * _LightPos.w;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat10_15 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_15;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_5.xxx * u_xlat16_0.xzw;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
float u_xlat15;
lowp float u_xlat10_15;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = u_xlat21 * _LightPos.w;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat10_15 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_15;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_5.xxx * u_xlat16_0.xzw;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
float u_xlat15;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat21 = texture(_LightTexture0, u_xlat2.xyz, -8.0).w;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat22)).w;
    u_xlat10_22 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat15 = u_xlat10_22 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_5.xxx * u_xlat16_0.xzw;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
float u_xlat15;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat21 = texture(_LightTexture0, u_xlat2.xyz, -8.0).w;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat22)).w;
    u_xlat10_22 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat15 = u_xlat10_22 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_0.xzw = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_0.xzw = u_xlat16_5.xxx * u_xlat16_0.xzw;
    u_xlat16_5.x = (-u_xlat10_1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat16_0.xzw = u_xlat16_0.xzw * vec3(u_xlat16_2) + u_xlat10_1.xyz;
    u_xlat16_1.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_1.xyz = u_xlat16_0.xzw * vec3(u_xlat16_7);
    u_xlat16_0.xyz = vec3(u_xlat16_7) * u_xlat16_0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_7.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat7.xyz * u_xlat1.xxx + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_8 = u_xlat16_7.x * u_xlat16_1.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_8 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_7.x = u_xlat16_1.x / u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.318309873;
    u_xlat16_7.x = min(u_xlat16_7.x, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_4.x = u_xlat14 * u_xlat14;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat22 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat3.z<0.0);
#else
    u_xlatb16 = u_xlat3.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat22 * u_xlat16;
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat15 = u_xlat15 * u_xlat22;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + u_xlat7.xyz;
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat22 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyz * vec3(u_xlat14) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_14 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_5 * u_xlat16_5;
    u_xlat16_8.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_15 = u_xlat16_14 * u_xlat16_8.x + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_15 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_14 = u_xlat16_8.x / u_xlat16_14;
    u_xlat16_14 = u_xlat16_14 * 0.318309873;
    u_xlat16_14 = min(u_xlat16_14, 64.0);
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_8.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz;
    u_xlat16_1.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    SV_Target1.xyz = u_xlat16_1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat22);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat22 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat3.z<0.0);
#else
    u_xlatb16 = u_xlat3.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat22 * u_xlat16;
    u_xlat15 = u_xlat15 * _LightPos.w;
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat15 = u_xlat15 * u_xlat22;
    u_xlat22 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat10_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_3 = (-_LightShadowData.x) + 1.0;
    u_xlat16_16 = u_xlat10_16 * u_xlat16_3 + _LightShadowData.x;
    u_xlat16_4.x = u_xlat22 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat15 * u_xlat16_4.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyw * u_xlat2.xxx + u_xlat7.xyz;
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_1.x * u_xlat16_21 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_1.x;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_4.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw;
    u_xlat16_7.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat28 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat3.z<0.0);
#else
    u_xlatb20 = u_xlat3.z<0.0;
#endif
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat28 = u_xlat28 * u_xlat20;
    u_xlat19 = u_xlat19 * _LightPos.w;
    u_xlat19 = texture(_LightTextureB0, vec2(u_xlat19)).w;
    u_xlat19 = u_xlat19 * u_xlat28;
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    vec3 txVec2 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat20 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_3 = (-_LightShadowData.x) + 1.0;
    u_xlat20 = u_xlat20 * u_xlat16_3 + _LightShadowData.x;
    u_xlat16_6.x = u_xlat28 + u_xlat20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat16_6.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_33 = dot(u_xlat9.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat1.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_7 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_16.xyz = u_xlat1.xyw * u_xlat2.xxx + u_xlat9.xyz;
    u_xlat16_8 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_8 = inversesqrt(u_xlat16_8);
    u_xlat16_16.xyz = u_xlat16_16.xyz * vec3(u_xlat16_8);
    u_xlat16_1.x = dot(u_xlat16_6.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_27 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_10 = u_xlat16_1.x * u_xlat16_27 + (-u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999997e-07);
    u_xlat16_27 = u_xlat16_27 / u_xlat16_1.x;
    u_xlat16_27 = u_xlat16_27 * 0.318309873;
    u_xlat16_27 = min(u_xlat16_27, 64.0);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
    u_xlat16_1.xyw = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat16_6.x = u_xlat9.x * u_xlat9.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_1.xyw = u_xlat16_1.xyw * u_xlat16_6.xxx;
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_18) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_1.xyw;
    u_xlat16_9.xyz = vec3(u_xlat16_27) * u_xlat16_1.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat16_9.xyz = u_xlat16_2.xyz / u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_9.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat19;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_9.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump float u_xlat16_4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_12;
float u_xlat14;
lowp float u_xlat10_14;
mediump float u_xlat16_19;
float u_xlat21;
mediump float u_xlat16_21;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat10_14 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4 = u_xlat7.x + u_xlat10_14;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_7.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_11.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_5 = dot((-_LightDir.xyz), u_xlat16_11.xyz);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_12 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_6.xyz = u_xlat7.xyz * u_xlat1.xxx + (-_LightDir.xyz);
    u_xlat16_19 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_19 = inversesqrt(u_xlat16_19);
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
    u_xlat16_7.x = dot(u_xlat16_11.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_1.x = u_xlat16_21 * u_xlat16_21;
    u_xlat16_8 = u_xlat16_7.x * u_xlat16_1.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_8 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_7.x = u_xlat16_1.x / u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.318309873;
    u_xlat16_7.x = min(u_xlat16_7.x, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_11.x = u_xlat14 * u_xlat14;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_11.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_21) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_2.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_4;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_5) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
lowp float u_xlat10_14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat10_14 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4.x = u_xlat7.x + u_xlat10_14;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat7.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat1.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat1.xyz * vec3(u_xlat14) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_14 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_5 * u_xlat16_5;
    u_xlat16_8.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_15 = u_xlat16_14 * u_xlat16_8.x + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_15 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_14 = u_xlat16_8.x / u_xlat16_14;
    u_xlat16_14 = u_xlat16_14 * 0.318309873;
    u_xlat16_14 = min(u_xlat16_14, 64.0);
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_8.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx + u_xlat10_3.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz;
    u_xlat16_1.xyz = vec3(u_xlat16_14) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    SV_Target1.xyz = u_xlat16_1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
lowp float u_xlat10_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_15 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_15;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat2.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat2.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0.x * u_xlat16_1.x + (-u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_8 * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_1.x / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
lowp float u_xlat10_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_15 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_15;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat2.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat2.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0.x * u_xlat16_1.x + (-u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_8 * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_1.x / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
lowp float u_xlat10_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_15 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_15;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat2.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat2.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0.x * u_xlat16_1.x + (-u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_8 * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_1.x / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat15;
lowp float u_xlat10_15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_15 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_15;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat2.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat2.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1.x = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0.x * u_xlat16_1.x + (-u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_8 * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_1.x / u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat16_1.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_14) + u_xlat10_3.xyz;
    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = u_xlat23 * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat23);
    u_xlat23 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat0.x = u_xlat0.x * u_xlat23;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat7.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_5.xxx * u_xlat0.xzw;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat18 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat16_4.xxx * u_xlat8.xyz;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat1.xyz = u_xlat8.xyz * vec3(u_xlat16_19) + u_xlat1.xyz;
    u_xlat16_19 = u_xlat16_2 * u_xlat16_18 + (-u_xlat16_2);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2 + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_18);
    u_xlat1.xyz = vec3(u_xlat16_18) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat3.xy / u_xlat3.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat3.z<0.0);
#else
    u_xlatb3 = u_xlat3.z<0.0;
#endif
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = u_xlat7 * _LightPos.w;
    u_xlat7 = inversesqrt(u_xlat7);
    u_xlat3.xyz = vec3(u_xlat7) * u_xlat3.xyz;
    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = (-u_xlat0.z) * u_xlat21 + u_xlat7;
    u_xlat7 = unity_ShadowFadeCenterAndType.w * u_xlat7 + u_xlat2.z;
    u_xlat7 = u_xlat7 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat7 = (-u_xlat7) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xyz, -8.0).w;
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = u_xlat14 * _LightPos.w;
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat3.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-u_xlat3.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
vec3 u_xlat8;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat18 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat6.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat6.xy;
    u_xlat6.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat6.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat6.xy = u_xlat6.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat6.x = texture(_LightTexture0, u_xlat6.xy, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat16_4.xxx * u_xlat8.xyz;
    u_xlat16_4.x = (-u_xlat1.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_19 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat1.xyz = u_xlat8.xyz * vec3(u_xlat16_19) + u_xlat1.xyz;
    u_xlat16_19 = u_xlat16_2 * u_xlat16_18 + (-u_xlat16_2);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_2 + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_18);
    u_xlat1.xyz = vec3(u_xlat16_18) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp float u_xlat10_7;
vec3 u_xlat9;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat16_0 = (-_LightShadowData.x) + 1.0;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_0 = u_xlat10_7 * u_xlat16_0 + _LightShadowData.x;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.z) * u_xlat2.x + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat9.z;
    u_xlat14 = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat7.x = (-u_xlat7.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat14 + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.xzw = u_xlat3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat3.xxx + u_xlat0.xzw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat3.zzz + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xz = u_xlat0.xz / u_xlat0.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat0.w<0.0);
#else
    u_xlatb21 = u_xlat0.w<0.0;
#endif
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz, -8.0).w;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat2.xyz = (-u_xlat3.xyz) + _LightPos.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = u_xlat14 * _LightPos.w;
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat16_5.x * u_xlat0.x;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat2.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
vec3 u_xlat10;
float u_xlat16;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_8 = (-_LightShadowData.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_8 + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8 = sqrt(u_xlat8);
    u_xlat8 = (-u_xlat0.z) * u_xlat24 + u_xlat8;
    u_xlat8 = unity_ShadowFadeCenterAndType.w * u_xlat8 + u_xlat2.z;
    u_xlat16 = u_xlat8 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat8 = u_xlat8 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat8 = (-u_xlat8) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat0.xzw = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xzw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xz = u_xlat0.xz / u_xlat0.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat0.w<0.0);
#else
    u_xlatb24 = u_xlat0.w<0.0;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz, -8.0).w;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = u_xlat16 * _LightPos.w;
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_6.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_30);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    u_xlat16_30 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat16_6.x = u_xlat24 * u_xlat24;
    u_xlat16_6.x = u_xlat24 * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat24 * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat24 * u_xlat16_6.x;
    u_xlat10.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat10.xyz = u_xlat16_6.xxx * u_xlat10.xyz;
    u_xlat16_6.x = (-u_xlat1.w) + 1.0;
    u_xlat16_24 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_25 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat1.xyz = u_xlat10.xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat16_25 = u_xlat16_2 * u_xlat16_24 + (-u_xlat16_2);
    u_xlat16_25 = u_xlat16_25 * u_xlat16_2 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_25;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_24);
    u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat2.x + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat9.z;
    u_xlat7 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat7 + u_xlat10_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
vec3 u_xlat9;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat2.x + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat9.z;
    u_xlat7.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat7.x + u_xlat10_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat3.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat3.zz + u_xlat7.xy;
    u_xlat2.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat7.x = u_xlat7.x * u_xlat16_5.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_21);
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat3.x = u_xlat23 * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
    u_xlat23 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat21 = u_xlat10_21 * u_xlat23;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_5.xxx * u_xlat0.xzw;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat3.x = u_xlat23 * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
    u_xlat23 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat21 = u_xlat10_21 * u_xlat23;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_5.xxx * u_xlat0.xzw;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat9;
float u_xlat10;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat2.x = texture(_LightTexture0, u_xlat2.xyz, -8.0).w;
    u_xlat9.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat10 = u_xlat3.x * _LightPos.w;
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xxx;
    u_xlat3.x = texture(_LightTextureB0, vec2(u_xlat10)).w;
    u_xlat21 = u_xlat10_21 * u_xlat3.x;
    u_xlat21 = u_xlat2.x * u_xlat21;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat9.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat9.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat9.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_5.xxx * u_xlat0.xzw;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat9;
float u_xlat10;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat2.x = texture(_LightTexture0, u_xlat2.xyz, -8.0).w;
    u_xlat9.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat10 = u_xlat3.x * _LightPos.w;
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xxx;
    u_xlat3.x = texture(_LightTextureB0, vec2(u_xlat10)).w;
    u_xlat21 = u_xlat10_21 * u_xlat3.x;
    u_xlat21 = u_xlat2.x * u_xlat21;
    u_xlat3.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-u_xlat9.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    SV_Target0.xyz = u_xlat3.xyz;
    SV_Target0.w = 0.0;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat21) + (-u_xlat9.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat9.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xzw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xzw = u_xlat16_5.xxx * u_xlat0.xzw;
    u_xlat16_5.x = (-u_xlat1.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_2 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat16_2) + u_xlat1.xyz;
    u_xlat16_1 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat1.xyz = u_xlat0.xzw * vec3(u_xlat16_7);
    u_xlat0.xyz = vec3(u_xlat16_7) * u_xlat0.xzw + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat1.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat3.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat16 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat16);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat3.xxx;
    u_xlat16 = u_xlat16 * _LightPos.w;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat16)).w;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyw * u_xlat3.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_21 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_14) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_21) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyw / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat7.xyz * u_xlat2.xxx + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_22 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_2 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_2 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_4.x = u_xlat14 * u_xlat14;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_21) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_7) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_7) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyz / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
float u_xlat10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat16 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat16);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat3.z<0.0);
#else
    u_xlatb10 = u_xlat3.z<0.0;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat10 * u_xlat3.x;
    u_xlat16 = u_xlat16 * _LightPos.w;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat16)).w;
    u_xlat16 = u_xlat16 * u_xlat3.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat7.xyz;
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat7.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_21 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_14) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_21) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyw / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat16 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = inversesqrt(u_xlat16);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat3.xxx;
    u_xlat16 = u_xlat16 * _LightPos.w;
    u_xlat16 = texture(_LightTextureB0, vec2(u_xlat16)).w;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat16 = u_xlat16 * u_xlat3.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyw * u_xlat3.xxx + (-u_xlat7.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat7.x = dot((-u_xlat7.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_21 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat7.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_14) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_21) * u_xlat1.xyz;
    u_xlat7.xyz = vec3(u_xlat16_21) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat2.xyw / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat7.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec2 u_xlat7;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_12;
float u_xlat14;
mediump float u_xlat16_14;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat7.x = texture(_LightTexture0, u_xlat7.xy, -8.0).w;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat16_5 = (-u_xlat1.w) + 1.0;
    u_xlat16_12.xyz = u_xlat2.xyz * vec3(u_xlat14) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_14 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_9 = u_xlat16_14 * u_xlat16_2 + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_9 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_14 = u_xlat16_2 / u_xlat16_14;
    u_xlat16_14 = u_xlat16_14 * 0.318309873;
    u_xlat16_14 = min(u_xlat16_14, 64.0);
    u_xlat16_22 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_4.x = u_xlat21 * u_xlat21;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_22) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_14) * u_xlat1.xyz;
    u_xlat1.xyz = vec3(u_xlat16_14) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    SV_Target1.xyz = u_xlat1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat11;
mediump float u_xlat16_11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
float u_xlat18;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat3.z<0.0);
#else
    u_xlatb11 = u_xlat3.z<0.0;
#endif
    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat11.x * u_xlat3.x;
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat18 = texture(_LightTextureB0, vec2(u_xlat18)).w;
    u_xlat18 = u_xlat18 * u_xlat3.x;
    u_xlat3.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat11.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat11.xy,u_xlat11.z);
    u_xlat10_11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
    u_xlat16_11 = u_xlat10_11 * u_xlat16_19 + _LightShadowData.x;
    u_xlat16_5.x = u_xlat3.x + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat16_5.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_6 = (-u_xlat1.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat8.xyz;
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_24 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_2 = u_xlat16_25 * u_xlat16_24 + (-u_xlat16_25);
    u_xlat16_25 = u_xlat16_2 * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_25;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_16 = (-u_xlat16_16) * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat16_5.x = u_xlat8.x * u_xlat8.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_16) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_24) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat2.xyw / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_29) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat12;
bool u_xlatb12;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat20;
mediump float u_xlat16_21;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat27 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat20 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat3.x = inversesqrt(u_xlat20);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat3.z<0.0);
#else
    u_xlatb12 = u_xlat3.z<0.0;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat12.x * u_xlat3.x;
    u_xlat20 = u_xlat20 * _LightPos.w;
    u_xlat20 = texture(_LightTextureB0, vec2(u_xlat20)).w;
    u_xlat20 = u_xlat20 * u_xlat3.x;
    u_xlat3.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat12.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat4.xyz = u_xlat12.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat12.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat12.xyz + _ShadowOffsets[2].xyz;
    vec3 txVec2 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat12.xyz = u_xlat12.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec3 = vec3(u_xlat12.xy,u_xlat12.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat12.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_21 = (-_LightShadowData.x) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat16_21 + _LightShadowData.x;
    u_xlat16_6.x = u_xlat3.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat20 = u_xlat20 * u_xlat16_6.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_33 = dot(u_xlat9.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_7 = (-u_xlat1.w) + 1.0;
    u_xlat16_16.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat9.xyz;
    u_xlat16_8 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_8 = inversesqrt(u_xlat16_8);
    u_xlat16_16.xyz = u_xlat16_16.xyz * vec3(u_xlat16_8);
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_27 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_2 = u_xlat16_28 * u_xlat16_27 + (-u_xlat16_28);
    u_xlat16_28 = u_xlat16_2 * u_xlat16_28 + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = max(u_xlat16_28, 9.99999997e-07);
    u_xlat16_27 = u_xlat16_27 / u_xlat16_28;
    u_xlat16_27 = u_xlat16_27 * 0.318309873;
    u_xlat16_27 = min(u_xlat16_27, 64.0);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
    u_xlat2.xyw = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat16_6.x = u_xlat9.x * u_xlat9.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_6.xxx;
    u_xlat1.xyz = u_xlat2.xyw * vec3(u_xlat16_18) + u_xlat1.xyz;
    u_xlat2.xyw = vec3(u_xlat16_27) * u_xlat1.xyz;
    u_xlat9.xyz = vec3(u_xlat16_27) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat9.xyz = u_xlat2.xyw / u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + u_xlat9.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat20;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat9.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump float u_xlat16_2;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
vec2 u_xlat17;
mediump float u_xlat16_22;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat17.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat17.xy = floor(u_xlat17.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat17.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat4.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
    u_xlat3.xyw = u_xlat3.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.z;
    u_xlat8.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_16 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_5 = u_xlat8.x + u_xlat10_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
#else
    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
#endif
    u_xlat8.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_13.xyz = u_xlat8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6 = dot((-_LightDir.xyz), u_xlat16_13.xyz);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlat8.xyz = (-u_xlat3.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_14 = (-u_xlat1.w) + 1.0;
    u_xlat16_7.xyz = u_xlat8.xyz * u_xlat2.xxx + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_7.xyz = vec3(u_xlat16_22) * u_xlat16_7.xyz;
    u_xlat16_8 = dot(u_xlat16_13.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16 = dot((-_LightDir.xyz), u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_2 = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_2 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_13.x = u_xlat16 * u_xlat16;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_13.xxx;
    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat2.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_8) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat2.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_5;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_6) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat8.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec2 u_xlat8;
vec3 u_xlat9;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_14;
float u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
vec2 u_xlat17;
mediump float u_xlat16_17;
float u_xlat24;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat17.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat17.xy = floor(u_xlat17.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat17.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat4.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
    u_xlat3.xyw = u_xlat3.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.z;
    u_xlat8.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_16 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_5.x = u_xlat8.x + u_xlat10_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat8.xy = u_xlat3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat3.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat3.ww + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xy, -8.0).w;
    u_xlat8.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat1.xyz = (-u_xlat3.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat16_6 = (-u_xlat2.w) + 1.0;
    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16) + (-_LightDir.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat24 = dot((-_LightDir.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_9 = u_xlat16_1 * u_xlat16_1;
    u_xlat16_17 = u_xlat16_16 * u_xlat16_9 + (-u_xlat16_16);
    u_xlat16_16 = u_xlat16_17 * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_16 = max(u_xlat16_16, 9.99999997e-07);
    u_xlat16_16 = u_xlat16_9 / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * 0.318309873;
    u_xlat16_16 = min(u_xlat16_16, 64.0);
    u_xlat16_1 = (-u_xlat16_1) * u_xlat16_1 + 1.0;
    u_xlat16_1 = u_xlat16_1 + u_xlat16_1;
    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat16_5.x = u_xlat24 * u_xlat24;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat9.xyz = u_xlat9.xyz * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_1) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_16) * u_xlat1.xyz;
    u_xlat1.xyz = vec3(u_xlat16_16) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_29) * u_xlat0.xyz;
    SV_Target1.xyz = u_xlat1.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat15.xy = floor(u_xlat15.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat15.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15.x = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat15.xxx * u_xlat3.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_1 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_1;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat3.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat2.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat3.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0 * u_xlat16_1 + (-u_xlat16_0);
    u_xlat16_0 = u_xlat16_8 * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_0 = max(u_xlat16_0, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_1 / u_xlat16_0;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat1.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_14) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;
    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat15.xy = floor(u_xlat15.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat15.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15.x = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat15.xxx * u_xlat3.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_1 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_1;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat3.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat2.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat3.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0 * u_xlat16_1 + (-u_xlat16_0);
    u_xlat16_0 = u_xlat16_8 * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_0 = max(u_xlat16_0, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_1 / u_xlat16_0;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat1.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_14) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;
    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat15.xy = floor(u_xlat15.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat15.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15.x = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat15.xxx * u_xlat3.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_1 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_1;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz, -8.0).w;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat3.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat2.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat3.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0 * u_xlat16_1 + (-u_xlat16_0);
    u_xlat16_0 = u_xlat16_8 * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_0 = max(u_xlat16_0, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_1 / u_xlat16_0;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat1.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_14) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;
    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _HalfPointShadowMask;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat15.xy = floor(u_xlat15.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat15.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15.x = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat15.xxx * u_xlat3.xyz;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat21 = texture(_LightTextureB0, vec2(u_xlat21)).w;
    u_xlat10_1 = texture(_HalfPointShadowMask, u_xlat1.xy).x;
    u_xlat21 = u_xlat21 * u_xlat10_1;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz, -8.0).w;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat3.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat16_5 = (-u_xlat2.w) + 1.0;
    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat1.xxx + (-u_xlat3.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat7 = dot((-u_xlat3.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_1 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_8 = u_xlat16_0 * u_xlat16_1 + (-u_xlat16_0);
    u_xlat16_0 = u_xlat16_8 * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_0 = max(u_xlat16_0, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_1 / u_xlat16_0;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat16_14 = (-u_xlat16_14) * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat1.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_4.x = u_xlat7 * u_xlat7;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_4.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_14) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;
    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_25) * u_xlat1.xyz;
    SV_Target1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "POINT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
}
}
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  ZWrite Off
  GpuProgramID 388145
Program "vp" {
SubProgram "gles3 " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat9 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat1.xyw = u_xlat1.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat9 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat9 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat1.xyw = u_xlat1.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat9 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat9 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat1.xyw = u_xlat1.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat9 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat9 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat1.xyw = u_xlat1.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat9 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat9 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat1.xyw = u_xlat1.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat9 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
mediump float u_xlat16_8;
lowp float u_xlat10_8;
float u_xlat12;
mediump float u_xlat16_12;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat1.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat1.xyw = u_xlat1.xyw + (-_LightPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.z;
    u_xlat4 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.wwww + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat10_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_12 = (-_LightShadowData.x) + 1.0;
    u_xlat16_8 = u_xlat10_8 * u_xlat16_12 + _LightShadowData.x;
    u_xlat16_3 = u_xlat4 + u_xlat16_8;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat16_3);
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump float u_xlat16_3;
vec3 u_xlat4;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat12;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat1.xyw + (-_LightPos.xyz);
    u_xlat1.xyw = u_xlat1.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.z;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat4.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat1.xyz = u_xlat4.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat2.xyz = u_xlat4.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat2.xyz = u_xlat4.xyz + _ShadowOffsets[2].xyz;
    u_xlat4.xyz = u_xlat4.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_8 = (-_LightShadowData.x) + 1.0;
    u_xlat4.x = u_xlat4.x * u_xlat16_8 + _LightShadowData.x;
    u_xlat8 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat8 + u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat16_3);
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
lowp float u_xlat10_1;
vec3 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat12;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat5.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat5.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.z;
    u_xlat4 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 + u_xlat10_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat16_3);
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
lowp float u_xlat10_1;
vec3 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat12;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat5.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat5.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.z;
    u_xlat4 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 + u_xlat10_1;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat16_3);
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat1.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat1.xyw = u_xlat1.xyw + (-_LightPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.z;
    u_xlat4 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat1 = textureLod(_ShadowMapTexture, u_xlat1.xyw, 0.0);
    u_xlat12 = dot(u_xlat1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat8 = sqrt(u_xlat8);
    u_xlat8 = u_xlat8 * _LightPositionRange.w;
    u_xlat8 = u_xlat8 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat12<u_xlat8);
#else
    u_xlatb8 = u_xlat12<u_xlat8;
#endif
    u_xlat16_3 = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_3 = u_xlat4 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat16_3);
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
float u_xlat15;
vec2 u_xlat17;
bool u_xlatb17;
float u_xlat21;
float u_xlat22;
int u_xlati23;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat1.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.z;
    u_xlat7.xyz = u_xlat1.xyw + (-_LightPos.xyz);
    u_xlat1.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat15 = sqrt(u_xlat8);
    u_xlat15 = u_xlat15 * _LightPositionRange.w;
    u_xlat15 = u_xlat15 * 0.970000029;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = u_xlat7.xyz * vec3(u_xlat8);
    u_xlat3.xyz = u_xlat2.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat3.xyz = u_xlat2.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat3.xyz);
    u_xlat22 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
    u_xlat3.xy = u_xlat3.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat2.xyz = u_xlat2.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat4.y = 0.0;
    u_xlat22 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat17.xy = u_xlat3.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat4.xz = u_xlat17.xy * vec2(0.5, 0.5);
        u_xlat4.xzw = u_xlat7.xyz * vec3(u_xlat8) + u_xlat4.xyz;
        u_xlat5.xyz = u_xlat2.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat4.xzw = u_xlat5.xyz * vec3(0.5, 0.5, 0.5) + u_xlat4.xzw;
        u_xlat5 = textureLod(_ShadowMapTexture, u_xlat4.xzw, 0.0);
        u_xlat17.x = dot(u_xlat5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb17 = !!(u_xlat17.x<u_xlat15);
#else
        u_xlatb17 = u_xlat17.x<u_xlat15;
#endif
        u_xlat17.x = (u_xlatb17) ? _LightShadowData.x : 1.0;
        u_xlat22 = u_xlat22 + u_xlat17.x;
    }
    u_xlat16_6 = u_xlat22 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.xxxx * vec4(u_xlat16_6);
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat12 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat1.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat1.xyw = u_xlat1.xyw + (-_LightPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.z;
    u_xlat4 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat1 = textureLod(_ShadowMapTexture, u_xlat1.xyw, 0.0);
    u_xlat12 = dot(u_xlat1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat8 = sqrt(u_xlat8);
    u_xlat8 = u_xlat8 * _LightPositionRange.w;
    u_xlat8 = u_xlat8 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat12<u_xlat8);
#else
    u_xlatb8 = u_xlat12<u_xlat8;
#endif
    u_xlat16_3 = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_3 = u_xlat4 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat16_3);
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
float u_xlat15;
vec2 u_xlat17;
bool u_xlatb17;
float u_xlat21;
float u_xlat22;
int u_xlati23;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTextureScaled, u_xlat1.xy).x;
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat1.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.z;
    u_xlat7.xyz = u_xlat1.xyw + (-_LightPos.xyz);
    u_xlat1.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat15 = sqrt(u_xlat8);
    u_xlat15 = u_xlat15 * _LightPositionRange.w;
    u_xlat15 = u_xlat15 * 0.970000029;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = u_xlat7.xyz * vec3(u_xlat8);
    u_xlat3.xyz = u_xlat2.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat3.xyz = u_xlat2.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat3.xyz);
    u_xlat22 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.zxy + (-u_xlat4.xyz);
    u_xlat3.xy = u_xlat3.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat2.xyz = u_xlat2.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat4.y = 0.0;
    u_xlat22 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat17.xy = u_xlat3.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat4.xz = u_xlat17.xy * vec2(0.5, 0.5);
        u_xlat4.xzw = u_xlat7.xyz * vec3(u_xlat8) + u_xlat4.xyz;
        u_xlat5.xyz = u_xlat2.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat4.xzw = u_xlat5.xyz * vec3(0.5, 0.5, 0.5) + u_xlat4.xzw;
        u_xlat5 = textureLod(_ShadowMapTexture, u_xlat4.xzw, 0.0);
        u_xlat17.x = dot(u_xlat5, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb17 = !!(u_xlat17.x<u_xlat15);
#else
        u_xlatb17 = u_xlat17.x<u_xlat15;
#endif
        u_xlat17.x = (u_xlatb17) ? _LightShadowData.x : 1.0;
        u_xlat22 = u_xlat22 + u_xlat17.x;
    }
    u_xlat16_6 = u_xlat22 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.xxxx * vec4(u_xlat16_6);
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "POINT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
}
}
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  ZWrite Off
  GpuProgramID 406982
Program "vp" {
SubProgram "gles3 " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = (-u_xlat0.z) * u_xlat21 + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat2.z;
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat7.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat14 = inversesqrt(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _LightPos.w;
    u_xlat7.x = texture(_LightTextureB0, u_xlat7.xx).w;
    u_xlat7.x = u_xlat16_5.x * u_xlat7.x;
    u_xlat2.xyz = u_xlat7.xxx * _LightColor.xyz;
    u_xlat7.xyz = vec3(u_xlat14) * u_xlat4.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_26 = u_xlat0.x * u_xlat0.x;
    u_xlat16_26 = u_xlat0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat0.x * u_xlat16_26;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
    u_xlat16_26 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_0 = u_xlat16_26 * u_xlat16_26;
    u_xlat16_15 = (-u_xlat16_0) * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_15;
    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_15) + u_xlat10_3.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_5.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat7.xyz = u_xlat2.xyz * u_xlat16_5.xxx;
    u_xlat16_2.x = u_xlat16_22 * u_xlat16_0 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_0 / u_xlat16_22;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0);
    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz / u_xlat16_3.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_2.xyz;
    u_xlat16_5.xyz = u_xlat7.xyz * u_xlat16_2.xyz;
    u_xlat16_5.xyz = u_xlat7.xyz * u_xlat10_1.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_4.xxx * _LightColor.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_22 = u_xlat18 * u_xlat18;
    u_xlat16_22 = u_xlat18 * u_xlat16_22;
    u_xlat16_22 = u_xlat18 * u_xlat16_22;
    u_xlat16_22 = u_xlat18 * u_xlat16_22;
    u_xlat10_2 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_3.xyz = (-u_xlat10_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat16_22 = (-u_xlat10_2.w) + 1.0;
    u_xlat16_18 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_13 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_13 = u_xlat16_13 + u_xlat16_13;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_13) + u_xlat10_2.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_1.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_4.xxx;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_18 + (-u_xlat16_19);
    u_xlat16_19 = u_xlat16_20 * u_xlat16_19 + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(u_xlat16_18);
    u_xlat16_2.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat10_1.xyz + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat3.xy / u_xlat3.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat3.z<0.0);
#else
    u_xlatb15 = u_xlat3.z<0.0;
#endif
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat15 * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = u_xlat7 * _LightPos.w;
    u_xlat7 = inversesqrt(u_xlat7);
    u_xlat3.xyz = vec3(u_xlat7) * u_xlat3.xyz;
    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat15)).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = (-u_xlat0.z) * u_xlat21 + u_xlat7;
    u_xlat7 = unity_ShadowFadeCenterAndType.w * u_xlat7 + u_xlat2.z;
    u_xlat7 = u_xlat7 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat7) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    u_xlat21 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_15 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat10_2 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat10_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_5.xxx * u_xlat16_3.xyz;
    u_xlat16_5.x = (-u_xlat10_2.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_23 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_23) + u_xlat10_2.xyz;
    u_xlat16_23 = u_xlat16_15 * u_xlat16_21 + (-u_xlat16_15);
    u_xlat16_15 = u_xlat16_23 * u_xlat16_15 + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;
    u_xlat16_15 = max(u_xlat16_15, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_15;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(u_xlat16_21);
    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_2.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat10_1.xyw + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat15;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz, -8.0).w;
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat22)).w;
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat10_2 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_0.xzw = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;
    u_xlat16_4.x = (-u_xlat10_2.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_23 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23) + u_xlat10_2.xyz;
    u_xlat16_2.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_2.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_7);
    u_xlat16_1.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat3.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * u_xlat10_0.xzw + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat0.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_13 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat10_2 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat10_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz;
    u_xlat16_4.x = (-u_xlat10_2.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_20 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_20;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_20) + u_xlat10_2.xyz;
    u_xlat16_20 = u_xlat16_13 * u_xlat16_18 + (-u_xlat16_13);
    u_xlat16_13 = u_xlat16_20 * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
    u_xlat16_13 = max(u_xlat16_13, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_13;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(u_xlat16_18);
    u_xlat16_2.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat10_1.xyw + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
lowp float u_xlat10_7;
mediump float u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat22;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
    u_xlat16_0 = (-_LightShadowData.x) + 1.0;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat15 = _ZBufferParams.x * u_xlat15 + _ZBufferParams.y;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat2.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_0 = u_xlat10_7 * u_xlat16_0 + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.z) * u_xlat15 + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat2.z;
    u_xlat14 = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat7.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat14 + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.z<0.0);
#else
    u_xlatb14 = u_xlat0.z<0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat7.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat22)).w;
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = u_xlat16_11 * u_xlat0.x;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat7.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot(u_xlat7.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat10_2 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_0.xzw = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;
    u_xlat16_4.x = (-u_xlat10_2.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_23 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23) + u_xlat10_2.xyz;
    u_xlat16_2.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_2.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_7);
    u_xlat16_1.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat3.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * u_xlat10_0.xzw + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
float u_xlat16;
bool u_xlatb16;
float u_xlat17;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_30;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_8 = (-_LightShadowData.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_8 + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat8.x = (-u_xlat0.z) * u_xlat24 + u_xlat8.x;
    u_xlat8.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat2.z;
    u_xlat16 = u_xlat8.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_6.x = (-u_xlat8.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_14 = u_xlat16 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat0.z<0.0);
#else
    u_xlatb16 = u_xlat0.z<0.0;
#endif
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat16 * u_xlat0.x;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = u_xlat17 * _LightPos.w;
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat17);
    u_xlat17 = texture(_LightTextureB0, vec2(u_xlat25)).w;
    u_xlat0.x = u_xlat0.x * u_xlat17;
    u_xlat0.x = u_xlat16_14 * u_xlat0.x;
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_30 = dot(u_xlat8.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_30);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_7.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat8.xyz;
    u_xlat16_30 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_7.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_8 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_6.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat10_2 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_0.xzw = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_6.xxx * u_xlat16_1.xyz;
    u_xlat16_6.x = (-u_xlat10_2.w) + 1.0;
    u_xlat16_25 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_26 = (-u_xlat16_25) * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_26 = u_xlat16_26 + u_xlat16_26;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_26) + u_xlat10_2.xyz;
    u_xlat16_2.x = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_2.x * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_8);
    u_xlat16_1.xyz = vec3(u_xlat16_8) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat3.xyz;
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat10_0.xzw + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    SV_Target1.xyz = u_xlat16_6.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec2 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_10;
float u_xlat13;
mediump float u_xlat16_13;
mediump float u_xlat16_16;
float u_xlat18;
mediump float u_xlat16_19;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat6) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat6 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat16_22 = u_xlat6 * u_xlat6;
    u_xlat16_22 = u_xlat6 * u_xlat16_22;
    u_xlat16_22 = u_xlat6 * u_xlat16_22;
    u_xlat16_22 = u_xlat6 * u_xlat16_22;
    u_xlat10_2 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat16_6.xyz = (-u_xlat10_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.xyz = vec3(u_xlat16_22) * u_xlat16_6.xyz;
    u_xlat16_22 = (-u_xlat10_2.w) + 1.0;
    u_xlat16_13 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_19 = (-u_xlat16_13) * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_19;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_19) + u_xlat10_2.xyz;
    u_xlat10_2.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_2.x = u_xlat16_19 * u_xlat16_13 + (-u_xlat16_19);
    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_13 = u_xlat16_13 / u_xlat16_19;
    u_xlat16_13 = u_xlat16_13 * 0.318309873;
    u_xlat16_13 = min(u_xlat16_13, 64.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_13);
    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_6.xyz = u_xlat16_2.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat13 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_10 = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat10_1.xyw = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_16 = u_xlat13 + u_xlat10_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_10 * u_xlat16_16;
    u_xlat2.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat2.xyz = u_xlat16_4.xxx * u_xlat2.xyz;
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat2.xyz;
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat10_1.xyw + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp float u_xlat10_0;
vec2 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_10 = u_xlat6 + u_xlat10_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat0.xy;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat16_10;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_22 = max(u_xlat16_22, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_22);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_13 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat18;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat10_2 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_1.xyw = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat10_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz;
    u_xlat16_4.x = (-u_xlat10_2.w) + 1.0;
    u_xlat16_18 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_20 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_20;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_20) + u_xlat10_2.xyz;
    u_xlat16_20 = u_xlat16_13 * u_xlat16_18 + (-u_xlat16_13);
    u_xlat16_13 = u_xlat16_20 * u_xlat16_13 + 1.0;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
    u_xlat16_13 = max(u_xlat16_13, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_13;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(u_xlat16_18);
    u_xlat16_2.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat10_1.xyw + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat15;
bool u_xlatb15;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat15 = dot(u_xlat3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat22 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat23 = sqrt(u_xlat22);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15<u_xlat23);
#else
    u_xlatb15 = u_xlat15<u_xlat23;
#endif
    u_xlat16_4.x = (u_xlatb15) ? _LightShadowData.x : 1.0;
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat22 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat10_2 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_0.xzw = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;
    u_xlat16_4.x = (-u_xlat10_2.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_23 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23) + u_xlat10_2.xyz;
    u_xlat16_2.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_2.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_7);
    u_xlat16_1.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat3.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * u_xlat10_0.xzw + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec3 u_xlat10_11;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat23;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati26;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat34 = inversesqrt(u_xlat23);
    u_xlat3.xyz = u_xlat11.xyz * vec3(u_xlat34);
    u_xlat24 = u_xlat23 * _LightPos.w;
    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
    u_xlat4.xyz = u_xlat3.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat4.xyz);
    u_xlat36 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.zxy * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat4.xy = u_xlat4.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat36 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat4.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * vec3(u_xlat34) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat37 = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb37 = !!(u_xlat37<u_xlat23);
#else
        u_xlatb37 = u_xlat37<u_xlat23;
#endif
        u_xlat37 = (u_xlatb37) ? _LightShadowData.x : 1.0;
        u_xlat36 = u_xlat36 + u_xlat37;
    }
    u_xlat16_8.x = u_xlat36 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat24 * u_xlat16_8.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_11.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat3.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_9 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * vec3(u_xlat23) + (-u_xlat3.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11.x = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_23 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_34 = u_xlat16_11.x * u_xlat16_23 + (-u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_34 * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999997e-07);
    u_xlat16_11.x = u_xlat16_23 / u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * 0.318309873;
    u_xlat16_11.x = min(u_xlat16_11.x, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_2.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_33) + u_xlat10_4.xyz;
    u_xlat16_3.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_11.xyz = u_xlat16_3.xyz / u_xlat16_11.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_11.xyz;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_41) * u_xlat2.xyz;
    u_xlat16_8.xyz = u_xlat16_11.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat16_8.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_8.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat3 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat15 = dot(u_xlat3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat22 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat16 = sqrt(u_xlat22);
    u_xlat16 = u_xlat16 * _LightPositionRange.w;
    u_xlat16 = u_xlat16 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15<u_xlat16);
#else
    u_xlatb15 = u_xlat15<u_xlat16;
#endif
    u_xlat16_4.x = (u_xlatb15) ? _LightShadowData.x : 1.0;
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat22 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat15 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat10_2 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_0.xzw = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;
    u_xlat16_4.x = (-u_xlat10_2.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_23 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23) + u_xlat10_2.xyz;
    u_xlat16_2.x = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_2.x * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(u_xlat16_7);
    u_xlat16_1.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat3.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * u_xlat10_0.xzw + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec3 u_xlat10_11;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat23;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati26;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat34 = inversesqrt(u_xlat23);
    u_xlat3.xyz = u_xlat11.xyz * vec3(u_xlat34);
    u_xlat24 = u_xlat23 * _LightPos.w;
    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
    u_xlat4.xyz = u_xlat3.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat4.xyz);
    u_xlat36 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.zxy * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat4.xy = u_xlat4.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat36 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat4.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * vec3(u_xlat34) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat37 = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb37 = !!(u_xlat37<u_xlat23);
#else
        u_xlatb37 = u_xlat37<u_xlat23;
#endif
        u_xlat37 = (u_xlatb37) ? _LightShadowData.x : 1.0;
        u_xlat36 = u_xlat36 + u_xlat37;
    }
    u_xlat16_8.x = u_xlat36 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat24 * u_xlat16_8.x;
    u_xlat11.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat11.x = texture(_LightTexture0, u_xlat11.xyz, -8.0).w;
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_11.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat3.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_9 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * vec3(u_xlat23) + (-u_xlat3.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11.x = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_23 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_34 = u_xlat16_11.x * u_xlat16_23 + (-u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_34 * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999997e-07);
    u_xlat16_11.x = u_xlat16_23 / u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * 0.318309873;
    u_xlat16_11.x = min(u_xlat16_11.x, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_2.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_33) + u_xlat10_4.xyz;
    u_xlat16_3.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_11.xyz = u_xlat16_3.xyz / u_xlat16_11.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_11.xyz;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_41) * u_xlat2.xyz;
    u_xlat16_8.xyz = u_xlat16_11.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat16_8.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_8.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
float u_xlat17;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat25;
mediump float u_xlat16_25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat17 = u_xlat17 * _LightPos.w;
    u_xlat17 = texture(_LightTextureB0, vec2(u_xlat17)).w;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat8.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat16_6 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyz * vec3(u_xlat25) + (-u_xlat8.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat8.x = dot((-u_xlat8.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_24 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_2.x = u_xlat16_25 * u_xlat16_24 + (-u_xlat16_25);
    u_xlat16_25 = u_xlat16_2.x * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_25;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_16 = (-u_xlat16_16) * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
    u_xlat16_2.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat16_5.x = u_xlat8.x * u_xlat8.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_16) + u_xlat10_3.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_2.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_24) * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_8.xyz = u_xlat16_3.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat17 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_29) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat16_8.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat15;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_7.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat16_5 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat7.xyz * vec3(u_xlat15) + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_15 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_7.x * u_xlat16_15 + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_22 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_7.x = u_xlat16_15 / u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.318309873;
    u_xlat16_7.x = min(u_xlat16_7.x, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_2.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_4.x = u_xlat14 * u_xlat14;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_21) + u_xlat10_3.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_3.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_4.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_25) * u_xlat2.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
float u_xlat17;
float u_xlat18;
bool u_xlatb18;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat25;
mediump float u_xlat16_25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat25 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat3.z<0.0);
#else
    u_xlatb18 = u_xlat3.z<0.0;
#endif
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat25 = u_xlat25 * u_xlat18;
    u_xlat17 = u_xlat17 * _LightPos.w;
    u_xlat17 = texture(_LightTextureB0, vec2(u_xlat17)).w;
    u_xlat17 = u_xlat17 * u_xlat25;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat16_6 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyz * vec3(u_xlat25) + u_xlat8.xyz;
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_24 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_2.x = u_xlat16_25 * u_xlat16_24 + (-u_xlat16_25);
    u_xlat16_25 = u_xlat16_2.x * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_25;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_16 = (-u_xlat16_16) * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
    u_xlat16_2.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat16_5.x = u_xlat8.x * u_xlat8.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_16) + u_xlat10_3.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_2.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_24) * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_8.xyz = u_xlat16_3.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat17 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_29) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat16_8.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
float u_xlat17;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat25;
mediump float u_xlat16_25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat17 = u_xlat17 * _LightPos.w;
    u_xlat17 = texture(_LightTextureB0, vec2(u_xlat17)).w;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat25 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat17 = u_xlat25 * u_xlat17;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat8.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat16_6 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyz * vec3(u_xlat25) + (-u_xlat8.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat8.x = dot((-u_xlat8.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_24 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_2.x = u_xlat16_25 * u_xlat16_24 + (-u_xlat16_25);
    u_xlat16_25 = u_xlat16_2.x * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_25;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_16 = (-u_xlat16_16) * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
    u_xlat16_2.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat16_5.x = u_xlat8.x * u_xlat8.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_16) + u_xlat10_3.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_2.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_24) * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_8.xyz = u_xlat16_3.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat17 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_29) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat16_8.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec2 u_xlat8;
mediump vec3 u_xlat16_14;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
float u_xlat24;
mediump float u_xlat16_25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xy, -8.0).w;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat16_6 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyz * vec3(u_xlat16) + (-_LightDir.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat24 = dot((-_LightDir.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_25 = u_xlat16_17 * u_xlat16_17;
    u_xlat16_2.x = u_xlat16_16 * u_xlat16_25 + (-u_xlat16_16);
    u_xlat16_16 = u_xlat16_2.x * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_16 = max(u_xlat16_16, 9.99999997e-07);
    u_xlat16_16 = u_xlat16_25 / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * 0.318309873;
    u_xlat16_16 = min(u_xlat16_16, 64.0);
    u_xlat16_17 = (-u_xlat16_17) * u_xlat16_17 + 1.0;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_17;
    u_xlat16_2.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat16_5.x = u_xlat24 * u_xlat24;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat10_3.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_2.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_29) * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat10_1.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
float u_xlat17;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
bool u_xlatb18;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat25;
mediump float u_xlat16_25;
mediump float u_xlat16_28;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat25 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat3.z<0.0);
#else
    u_xlatb18 = u_xlat3.z<0.0;
#endif
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat25 = u_xlat25 * u_xlat18;
    u_xlat17 = u_xlat17 * _LightPos.w;
    u_xlat17 = texture(_LightTextureB0, vec2(u_xlat17)).w;
    u_xlat17 = u_xlat17 * u_xlat25;
    u_xlat25 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat10_18 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
    u_xlat16_18 = u_xlat10_18 * u_xlat16_3.x + _LightShadowData.x;
    u_xlat16_4.x = u_xlat25 + u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 * u_xlat16_4.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_28 = dot(u_xlat8.xyz, u_xlat16_4.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat16_6 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyz * vec3(u_xlat25) + u_xlat8.xyz;
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_25 = dot(u_xlat16_4.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_24 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_2.x = u_xlat16_25 * u_xlat16_24 + (-u_xlat16_25);
    u_xlat16_25 = u_xlat16_2.x * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_25;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_16 = (-u_xlat16_16) * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
    u_xlat16_2.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat16_4.x = u_xlat8.x * u_xlat8.x;
    u_xlat16_4.x = u_xlat8.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat8.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat8.x * u_xlat16_4.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_16) + u_xlat10_3.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_2.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_24) * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_8.xyz = u_xlat16_3.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat17 * u_xlat16_4.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_28) * u_xlat2.xyz;
    u_xlat16_4.xyz = u_xlat16_8.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat28 = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat3.z<0.0);
#else
    u_xlatb20 = u_xlat3.z<0.0;
#endif
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat28 = u_xlat28 * u_xlat20;
    u_xlat19 = u_xlat19 * _LightPos.w;
    u_xlat19 = texture(_LightTextureB0, vec2(u_xlat19)).w;
    u_xlat19 = u_xlat19 * u_xlat28;
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat4.xyz = u_xlat3.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat3.xyz + _ShadowOffsets[2].xyz;
    vec3 txVec2 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat3.xyz = u_xlat3.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat20 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
    u_xlat20 = u_xlat20 * u_xlat16_3.x + _LightShadowData.x;
    u_xlat16_6.x = u_xlat28 + u_xlat20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat16_6.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_33 = dot(u_xlat9.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat16_7 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_16.xyz = u_xlat2.xyz * vec3(u_xlat28) + u_xlat9.xyz;
    u_xlat16_8 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_8 = inversesqrt(u_xlat16_8);
    u_xlat16_16.xyz = u_xlat16_16.xyz * vec3(u_xlat16_8);
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_27 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_2.x = u_xlat16_28 * u_xlat16_27 + (-u_xlat16_28);
    u_xlat16_28 = u_xlat16_2.x * u_xlat16_28 + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = max(u_xlat16_28, 9.99999997e-07);
    u_xlat16_27 = u_xlat16_27 / u_xlat16_28;
    u_xlat16_27 = u_xlat16_27 * 0.318309873;
    u_xlat16_27 = min(u_xlat16_27, 64.0);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
    u_xlat16_2.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat16_6.x = u_xlat9.x * u_xlat9.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_18) + u_xlat10_3.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_27) * u_xlat16_2.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_27) * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_9.xyz = u_xlat16_3.xyz / u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_9.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat19 * u_xlat16_6.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_33) * u_xlat2.xyz;
    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_6.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_12;
float u_xlat14;
lowp float u_xlat10_14;
float u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_19;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat21 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat10_14 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4.x = u_xlat7.x + u_xlat10_14;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_7.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_11.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_5 = dot((-_LightDir.xyz), u_xlat16_11.xyz);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat16_12 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_6.xyz = u_xlat7.xyz * vec3(u_xlat15) + (-_LightDir.xyz);
    u_xlat16_19 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_19 = inversesqrt(u_xlat16_19);
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
    u_xlat16_7.x = dot(u_xlat16_11.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_12 * u_xlat16_12;
    u_xlat16_15 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_7.x * u_xlat16_15 + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_22 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_7.x = u_xlat16_15 / u_xlat16_7.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.318309873;
    u_xlat16_7.x = min(u_xlat16_7.x, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_2.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_11.x = u_xlat14 * u_xlat14;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_11.x = u_xlat14 * u_xlat16_11.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_11.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_21) + u_xlat10_3.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_7.xyz = u_xlat16_3.xyz / u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_11.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat2.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_5) * u_xlat2.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec2 u_xlat8;
mediump vec3 u_xlat16_14;
float u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
mediump float u_xlat16_17;
float u_xlat24;
mediump float u_xlat16_25;
mediump float u_xlat16_28;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_16 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_4.x = u_xlat8.x + u_xlat10_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat8.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xy, -8.0).w;
    u_xlat8.x = u_xlat8.x * u_xlat16_4.x;
    u_xlat10_3 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_28 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat16_6 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyz * vec3(u_xlat16) + (-_LightDir.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat24 = dot((-_LightDir.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_25 = u_xlat16_17 * u_xlat16_17;
    u_xlat16_2.x = u_xlat16_16 * u_xlat16_25 + (-u_xlat16_16);
    u_xlat16_16 = u_xlat16_2.x * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_16 = max(u_xlat16_16, 9.99999997e-07);
    u_xlat16_16 = u_xlat16_25 / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * 0.318309873;
    u_xlat16_16 = min(u_xlat16_16, 64.0);
    u_xlat16_17 = (-u_xlat16_17) * u_xlat16_17 + 1.0;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_17;
    u_xlat16_2.xyz = (-u_xlat10_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat24;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat10_3.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_2.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat8.x * u_xlat16_4.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_28) * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
    u_xlat10_1.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat10_1.xyz + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
bool u_xlatb8;
mediump vec3 u_xlat16_14;
float u_xlat16;
float u_xlat17;
mediump float u_xlat16_17;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat25;
mediump float u_xlat16_25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat25 = u_xlat17 * _LightPos.w;
    u_xlat25 = texture(_LightTextureB0, vec2(u_xlat25)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat17 = sqrt(u_xlat17);
    u_xlat17 = u_xlat17 * _LightPositionRange.w;
    u_xlat17 = u_xlat17 * 0.970000029;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
    u_xlat8.x = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<u_xlat17);
#else
    u_xlatb8 = u_xlat8.x<u_xlat17;
#endif
    u_xlat16_5.x = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_5.x = u_xlat0.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat25 * u_xlat16_5.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_8.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat8.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat16_6 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat8.xyz * vec3(u_xlat17) + (-u_xlat3.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_8.x = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat16 = dot((-u_xlat3.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_17 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_25 = u_xlat16_8.x * u_xlat16_17 + (-u_xlat16_8.x);
    u_xlat16_8.x = u_xlat16_25 * u_xlat16_8.x + 1.0;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_8.x = max(u_xlat16_8.x, 9.99999997e-07);
    u_xlat16_8.x = u_xlat16_17 / u_xlat16_8.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.318309873;
    u_xlat16_8.x = min(u_xlat16_8.x, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_2.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_5.x = u_xlat16 * u_xlat16;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_24) + u_xlat10_4.xyz;
    u_xlat16_3.xyz = u_xlat16_8.xxx * u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_8.xyz = u_xlat16_3.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_8.xyz;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_29) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat16_8.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec3 u_xlat10_11;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat23;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati26;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat34 = inversesqrt(u_xlat23);
    u_xlat3.xyz = u_xlat11.xyz * vec3(u_xlat34);
    u_xlat24 = u_xlat23 * _LightPos.w;
    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
    u_xlat4.xyz = u_xlat3.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat4.xyz);
    u_xlat36 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.zxy * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat4.xy = u_xlat4.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat36 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat4.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * vec3(u_xlat34) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat37 = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb37 = !!(u_xlat37<u_xlat23);
#else
        u_xlatb37 = u_xlat37<u_xlat23;
#endif
        u_xlat37 = (u_xlatb37) ? _LightShadowData.x : 1.0;
        u_xlat36 = u_xlat36 + u_xlat37;
    }
    u_xlat16_8.x = u_xlat36 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat24 * u_xlat16_8.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_11.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat3.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_9 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * vec3(u_xlat23) + (-u_xlat3.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11.x = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_23 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_34 = u_xlat16_11.x * u_xlat16_23 + (-u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_34 * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999997e-07);
    u_xlat16_11.x = u_xlat16_23 / u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * 0.318309873;
    u_xlat16_11.x = min(u_xlat16_11.x, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_2.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_33) + u_xlat10_4.xyz;
    u_xlat16_3.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_11.xyz = u_xlat16_3.xyz / u_xlat16_11.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_11.xyz;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_41) * u_xlat2.xyz;
    u_xlat16_8.xyz = u_xlat16_11.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat16_8.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_8.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
bool u_xlatb8;
mediump vec3 u_xlat16_14;
float u_xlat16;
float u_xlat17;
mediump float u_xlat16_17;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat25;
mediump float u_xlat16_25;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat24 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat25 = u_xlat17 * _LightPos.w;
    u_xlat25 = texture(_LightTextureB0, vec2(u_xlat25)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat17 = sqrt(u_xlat17);
    u_xlat17 = u_xlat17 * _LightPositionRange.w;
    u_xlat17 = u_xlat17 * 0.970000029;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
    u_xlat8.x = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<u_xlat17);
#else
    u_xlatb8 = u_xlat8.x<u_xlat17;
#endif
    u_xlat16_5.x = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_5.x = u_xlat0.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat25 * u_xlat16_5.x;
    u_xlat8.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xyz, -8.0).w;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_8.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat8.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat16_6 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat8.xyz * vec3(u_xlat17) + (-u_xlat3.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_8.x = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat16 = dot((-u_xlat3.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_17 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_25 = u_xlat16_8.x * u_xlat16_17 + (-u_xlat16_8.x);
    u_xlat16_8.x = u_xlat16_25 * u_xlat16_8.x + 1.0;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_8.x = max(u_xlat16_8.x, 9.99999997e-07);
    u_xlat16_8.x = u_xlat16_17 / u_xlat16_8.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.318309873;
    u_xlat16_8.x = min(u_xlat16_8.x, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat16_2.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_5.x = u_xlat16 * u_xlat16;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_24) + u_xlat10_4.xyz;
    u_xlat16_3.xyz = u_xlat16_8.xxx * u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_8.xyz = u_xlat16_3.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_8.xyz;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_29) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat16_8.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _CameraDepthTexture;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _CameraSpecularTexture;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _CameraAlbedoTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec3 u_xlat10_11;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat23;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati26;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat36;
float u_xlat37;
bool u_xlatb37;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat34 = inversesqrt(u_xlat23);
    u_xlat3.xyz = u_xlat11.xyz * vec3(u_xlat34);
    u_xlat24 = u_xlat23 * _LightPos.w;
    u_xlat24 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = u_xlat23 * _LightPositionRange.w;
    u_xlat23 = u_xlat23 * 0.970000029;
    u_xlat4.xyz = u_xlat3.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat4.xyz);
    u_xlat36 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat3.yzx * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.zxy * u_xlat3.zxy + (-u_xlat5.xyz);
    u_xlat4.xy = u_xlat4.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat36 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat4.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * vec3(u_xlat34) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat37 = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb37 = !!(u_xlat37<u_xlat23);
#else
        u_xlatb37 = u_xlat37<u_xlat23;
#endif
        u_xlat37 = (u_xlatb37) ? _LightShadowData.x : 1.0;
        u_xlat36 = u_xlat36 + u_xlat37;
    }
    u_xlat16_8.x = u_xlat36 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat24 * u_xlat16_8.x;
    u_xlat11.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat11.x = texture(_LightTexture0, u_xlat11.xyz, -8.0).w;
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat10_4 = texture(_CameraSpecularTexture, u_xlat1.xy);
    u_xlat10_11.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat3.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_9 = (-u_xlat10_4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * vec3(u_xlat23) + (-u_xlat3.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11.x = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat3.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_23 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_34 = u_xlat16_11.x * u_xlat16_23 + (-u_xlat16_11.x);
    u_xlat16_11.x = u_xlat16_34 * u_xlat16_11.x + 1.0;
    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999997e-07);
    u_xlat16_11.x = u_xlat16_23 / u_xlat16_11.x;
    u_xlat16_11.x = u_xlat16_11.x * 0.318309873;
    u_xlat16_11.x = min(u_xlat16_11.x, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat16_2.xyz = (-u_xlat10_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xxx;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_33) + u_xlat10_4.xyz;
    u_xlat16_3.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_11.xyz = u_xlat16_3.xyz / u_xlat16_11.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_11.xyz;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_41) * u_xlat2.xyz;
    u_xlat16_8.xyz = u_xlat16_11.xyz * u_xlat2.xyz;
    u_xlat10_0.xyz = texture(_CameraAlbedoTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat2.xyz * u_xlat10_0.xyz + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat16_8.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_8.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = (-u_xlat0.z) * u_xlat21 + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat2.z;
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat7.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat7.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat14 = inversesqrt(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _LightPos.w;
    u_xlat7.x = texture(_LightTextureB0, u_xlat7.xx).w;
    u_xlat7.x = u_xlat16_5.x * u_xlat7.x;
    u_xlat2.xyz = u_xlat7.xxx * _LightColor.xyz;
    u_xlat7.xyz = vec3(u_xlat14) * u_xlat4.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_26 = u_xlat0.x * u_xlat0.x;
    u_xlat16_26 = u_xlat0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat0.x * u_xlat16_26;
    u_xlat3 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat4.xyz = vec3(u_xlat16_26) * u_xlat4.xyz;
    u_xlat16_26 = (-u_xlat3.w) + 1.0;
    u_xlat16_0 = u_xlat16_26 * u_xlat16_26;
    u_xlat16_23 = (-u_xlat16_0) * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat16_23) + u_xlat3.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_6.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_5.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat7.xyz = u_xlat2.xyz * u_xlat16_5.xxx;
    u_xlat16_2 = u_xlat16_22 * u_xlat16_0 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_0 / u_xlat16_22;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat16_0);
    u_xlat3.xyz = vec3(u_xlat16_0) * u_xlat3.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat2.xyz = u_xlat2.xyz / u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat7.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec3 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat18;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat18 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat18 = _ZBufferParams.x * u_xlat18 + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_4.xxx * _LightColor.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat18 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat16_22 = u_xlat18 * u_xlat18;
    u_xlat16_22 = u_xlat18 * u_xlat16_22;
    u_xlat16_22 = u_xlat18 * u_xlat16_22;
    u_xlat16_22 = u_xlat18 * u_xlat16_22;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat16_22) * u_xlat3.xyz;
    u_xlat16_22 = (-u_xlat2.w) + 1.0;
    u_xlat16_18 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_20 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_20;
    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat16_20) + u_xlat2.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_4.xxx;
    u_xlat16_20 = u_xlat16_19 * u_xlat16_18 + (-u_xlat16_19);
    u_xlat16_19 = u_xlat16_20 * u_xlat16_19 + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = max(u_xlat16_19, 9.99999997e-07);
    u_xlat16_18 = u_xlat16_18 / u_xlat16_19;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat16_18 = min(u_xlat16_18, 64.0);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat16_18);
    u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat2.xyz = u_xlat3.xyz / u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec3 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat3.xy / u_xlat3.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat3.z<0.0);
#else
    u_xlatb3 = u_xlat3.z<0.0;
#endif
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat7 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = u_xlat7 * _LightPos.w;
    u_xlat7 = inversesqrt(u_xlat7);
    u_xlat3.xyz = vec3(u_xlat7) * u_xlat3.xyz;
    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat24)).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat4.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = (-u_xlat0.z) * u_xlat21 + u_xlat7;
    u_xlat7 = unity_ShadowFadeCenterAndType.w * u_xlat7 + u_xlat2.z;
    u_xlat7 = u_xlat7 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat7) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    u_xlat21 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat3 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat1.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat9.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat3.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat3.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat16_21);
    u_xlat2.xyz = vec3(u_xlat16_21) * u_xlat9.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat2.xyz = u_xlat3.xyz / u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_13;
float u_xlat24;
mediump float u_xlat16_25;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat8 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat8);
    u_xlat8 = u_xlat8 * _LightPos.w;
    u_xlat8 = texture(_LightTextureB0, vec2(u_xlat8)).w;
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * u_xlat0.xxx + (-u_xlat4.xyz);
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat0.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_29 = u_xlat0.x * u_xlat0.x;
    u_xlat16_29 = u_xlat0.x * u_xlat16_29;
    u_xlat16_29 = u_xlat0.x * u_xlat16_29;
    u_xlat16_29 = u_xlat0.x * u_xlat16_29;
    u_xlat3 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = vec3(u_xlat16_29) * u_xlat6.xyz;
    u_xlat16_29 = (-u_xlat3.w) + 1.0;
    u_xlat16_0 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_27 = (-u_xlat16_0) * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_27 = u_xlat16_27 + u_xlat16_27;
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat16_27) + u_xlat3.xyz;
    u_xlat6.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_7.xyz = u_xlat6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat16_7.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_5.x = dot((-u_xlat4.xyz), u_xlat16_7.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_27 = u_xlat16_25 * u_xlat16_0 + (-u_xlat16_25);
    u_xlat16_25 = u_xlat16_27 * u_xlat16_25 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_0 / u_xlat16_25;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat16_0);
    u_xlat3.xyz = vec3(u_xlat16_0) * u_xlat3.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat3.xyz = u_xlat4.xyz / u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_13 = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
    u_xlat0.xzw = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat0.xzw;
    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xzw, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat8;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xxx * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_11;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_4.xyz = u_xlat3.xyz * u_xlat0.xxx + (-_LightDir.xyz);
    u_xlat16_25 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
    u_xlat0.x = dot((-_LightDir.xyz), u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_25 = u_xlat0.x * u_xlat0.x;
    u_xlat16_25 = u_xlat0.x * u_xlat16_25;
    u_xlat16_25 = u_xlat0.x * u_xlat16_25;
    u_xlat16_25 = u_xlat0.x * u_xlat16_25;
    u_xlat3 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat16_25) * u_xlat5.xyz;
    u_xlat16_25 = (-u_xlat3.w) + 1.0;
    u_xlat16_0 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_7 = (-u_xlat16_0) * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_7 = u_xlat16_7 + u_xlat16_7;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat16_7) + u_xlat3.xyz;
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_6.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7 = dot(u_xlat16_6.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot((-_LightDir.xyz), u_xlat16_6.xyz);
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_22 = u_xlat16_7 * u_xlat16_0 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_22 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_0 / u_xlat16_7;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat16_0);
    u_xlat3.xyz = vec3(u_xlat16_0) * u_xlat3.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat3.xyz = u_xlat5.xyz / u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_11 = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat16_11 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = u_xlat16_4.xxx * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
lowp float u_xlat10_7;
vec3 u_xlat9;
mediump float u_xlat16_12;
float u_xlat14;
bool u_xlatb14;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_23;
mediump float u_xlat16_26;
void main()
{
    u_xlat16_0 = (-_LightShadowData.x) + 1.0;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat10_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_0 = u_xlat10_7 * u_xlat16_0 + _LightShadowData.x;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.z) * u_xlat2.x + u_xlat7.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat9.z;
    u_xlat14 = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat7.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat14 + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat3.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat3.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.z<0.0);
#else
    u_xlatb14 = u_xlat0.z<0.0;
#endif
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat7.xyz = (-u_xlat3.xyz) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = u_xlat23 * _LightPos.w;
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat23);
    u_xlat23 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat0.x = u_xlat0.x * u_xlat23;
    u_xlat0.x = u_xlat16_12 * u_xlat0.x;
    u_xlat0.x = u_xlat16_5.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(u_xlat7.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_26);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat0.x = dot(u_xlat7.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat0.xzw = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat16_5.xxx * u_xlat1.xyz;
    u_xlat16_5.x = (-u_xlat2.w) + 1.0;
    u_xlat16_22 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_23 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_23) + u_xlat2.xyz;
    u_xlat16_2 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_2 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_7);
    u_xlat1.xyz = vec3(u_xlat16_7) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump float u_xlat16_9;
vec3 u_xlat11;
mediump float u_xlat16_16;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
mediump float u_xlat16_34;
void main()
{
    u_xlat16_0 = (-_LightShadowData.x) + 1.0;
    u_xlat9.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat9.xyz = u_xlat9.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat11.xyz = u_xlat9.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat11.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat11.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat11.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat5.xyz = u_xlat4.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat6.xyz = u_xlat4.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat6.xy,u_xlat6.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat6.xyz = u_xlat4.xyz + _ShadowOffsets[2].xyz;
    u_xlat4.xyz = u_xlat4.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat6.xy,u_xlat6.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat9.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = u_xlat9.x * u_xlat16_0 + _LightShadowData.x;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat9.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.z) * u_xlat2.x + u_xlat9.x;
    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat11.z;
    u_xlat18 = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_7.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat18 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat3.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat3.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat0.z<0.0);
#else
    u_xlatb18 = u_xlat0.z<0.0;
#endif
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat18 * u_xlat0.x;
    u_xlat9.xyz = (-u_xlat3.xyz) + _LightPos.xyz;
    u_xlat2.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat29 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat3.x = u_xlat29 * _LightPos.w;
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat29);
    u_xlat29 = texture(_LightTextureB0, u_xlat3.xx).w;
    u_xlat0.x = u_xlat0.x * u_xlat29;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_7.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_34 = dot(u_xlat9.xyz, u_xlat16_7.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_34);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_8.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat9.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_9 = dot(u_xlat16_7.xyz, u_xlat16_8.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat0.xzw = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat16_7.xxx * u_xlat1.xyz;
    u_xlat16_7.x = (-u_xlat2.w) + 1.0;
    u_xlat16_28 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_29 = (-u_xlat16_28) * u_xlat16_28 + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_29) + u_xlat2.xyz;
    u_xlat16_2 = u_xlat16_9 * u_xlat16_28 + (-u_xlat16_9);
    u_xlat16_9 = u_xlat16_2 * u_xlat16_9 + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = max(u_xlat16_9, 9.99999997e-07);
    u_xlat16_9 = u_xlat16_28 / u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * 0.318309873;
    u_xlat16_9 = min(u_xlat16_9, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_9);
    u_xlat1.xyz = vec3(u_xlat16_9) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz;
    SV_Target1.xyz = u_xlat16_7.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_7;
vec3 u_xlat9;
mediump float u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_19;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat2.x + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat9.z;
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    u_xlat16_5.xyz = u_xlat4.xyz * vec3(u_xlat7) + (-_LightDir.xyz);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
    u_xlat7 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = (-u_xlat7) + 1.0;
    u_xlat16_26 = u_xlat7 * u_xlat7;
    u_xlat16_26 = u_xlat7 * u_xlat16_26;
    u_xlat16_26 = u_xlat7 * u_xlat16_26;
    u_xlat16_26 = u_xlat7 * u_xlat16_26;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat16_26) * u_xlat3.xyz;
    u_xlat16_26 = (-u_xlat2.w) + 1.0;
    u_xlat16_7 = u_xlat16_26 * u_xlat16_26;
    u_xlat16_14 = (-u_xlat16_7) * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_14 = u_xlat16_14 + u_xlat16_14;
    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat16_14) + u_xlat2.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_14 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5.x = dot((-_LightDir.xyz), u_xlat16_6.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_22 = u_xlat16_14 * u_xlat16_7 + (-u_xlat16_14);
    u_xlat16_14 = u_xlat16_22 * u_xlat16_14 + 1.0;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_14 = max(u_xlat16_14, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_7 / u_xlat16_14;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat16_7);
    u_xlat2.xyz = vec3(u_xlat16_7) * u_xlat2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat2.xyz = u_xlat3.xyz / u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat7 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_12 = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat16_19 = u_xlat7 + u_xlat10_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_12 * u_xlat16_19;
    u_xlat0.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xxx * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec3 u_xlat1;
uvec4 u_xlatu1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_12;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat15.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat15.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat2.x = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat2.x = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat9.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat9.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat9.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat9.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat2.x + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat9.z;
    u_xlat7 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat7 + u_xlat10_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat3.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat3.zz + u_xlat0.xy;
    u_xlat2.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat16_12;
    u_xlat0.x = u_xlat16_5.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat21 = dot((-_LightDir.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat16_5.x = u_xlat21 * u_xlat21;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat21 * u_xlat16_5.x;
    u_xlat3 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat1.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat9.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat16_5.xxx * u_xlat9.xyz;
    u_xlat16_5.x = (-u_xlat3.w) + 1.0;
    u_xlat16_21 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_22 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_22 = u_xlat16_22 + u_xlat16_22;
    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_22) + u_xlat3.xyz;
    u_xlat16_22 = u_xlat16_2 * u_xlat16_21 + (-u_xlat16_2);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_2 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_21 = u_xlat16_21 / u_xlat16_22;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat16_21 = min(u_xlat16_21, 64.0);
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat16_21);
    u_xlat2.xyz = vec3(u_xlat16_21) * u_xlat9.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat2.xyz = u_xlat3.xyz / u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_12;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_26;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat7 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = (-u_xlat0.z) * u_xlat21 + u_xlat7;
    u_xlat7 = unity_ShadowFadeCenterAndType.w * u_xlat7 + u_xlat2.z;
    u_xlat7 = u_xlat7 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
    u_xlat21 = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat16_5.xyz = u_xlat3.xyz * u_xlat0.xxx + (-u_xlat2.xyz);
    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_26 = u_xlat0.x * u_xlat0.x;
    u_xlat16_26 = u_xlat0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat0.x * u_xlat16_26;
    u_xlat3 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat4.xyz = vec3(u_xlat16_26) * u_xlat4.xyz;
    u_xlat16_26 = (-u_xlat3.w) + 1.0;
    u_xlat16_0 = u_xlat16_26 * u_xlat16_26;
    u_xlat16_23 = (-u_xlat16_0) * u_xlat16_0 + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat16_23) + u_xlat3.xyz;
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_6.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_5.x = dot((-u_xlat2.xyz), u_xlat16_6.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_2 = u_xlat16_22 * u_xlat16_0 + (-u_xlat16_22);
    u_xlat16_22 = u_xlat16_2 * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_22 = max(u_xlat16_22, 9.99999997e-07);
    u_xlat16_0 = u_xlat16_0 / u_xlat16_22;
    u_xlat16_0 = u_xlat16_0 * 0.318309873;
    u_xlat16_0 = min(u_xlat16_0, 64.0);
    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat16_0);
    u_xlat3.xyz = vec3(u_xlat16_0) * u_xlat3.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat2.xyz = u_xlat2.xyz / u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat0.x = sqrt(u_xlat14);
    u_xlat14 = u_xlat14 * _LightPos.w;
    u_xlat14 = texture(_LightTextureB0, vec2(u_xlat14)).w;
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat21<u_xlat0.x);
#else
    u_xlatb0 = u_xlat21<u_xlat0.x;
#endif
    u_xlat16_12 = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat16_12 = u_xlat7 + u_xlat16_12;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
#else
    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat14 * u_xlat16_12;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = u_xlat16_5.xxx * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bool u_xlatb6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
mediump float u_xlat16_13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat37;
int u_xlati38;
bool u_xlatb39;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat33 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = inversesqrt(u_xlat24);
    u_xlat14.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat4.x = u_xlat24 * _LightPos.w;
    u_xlat4.x = texture(_LightTextureB0, u_xlat4.xx).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat15.xyz = u_xlat14.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat15.xyz = u_xlat14.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat15.xyz);
    u_xlat5.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat15.xyz = u_xlat15.xyz * u_xlat5.xxx;
    u_xlat5.xyz = u_xlat14.yzx * u_xlat15.xyz;
    u_xlat5.xyz = u_xlat15.zxy * u_xlat14.zxy + (-u_xlat5.xyz);
    u_xlat15.xy = u_xlat15.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat37 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat15.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * u_xlat3.xxx + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat6.x = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6.x<u_xlat24);
#else
        u_xlatb6 = u_xlat6.x<u_xlat24;
#endif
        u_xlat6.x = (u_xlatb6) ? _LightShadowData.x : 1.0;
        u_xlat37 = u_xlat37 + u_xlat6.x;
    }
    u_xlat16_8.x = u_xlat37 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat16_8.x;
    u_xlat11.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat14.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_9 = (-u_xlat4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat14.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat14.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_2 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_13 = u_xlat16_11 * u_xlat16_2 + (-u_xlat16_11);
    u_xlat16_11 = u_xlat16_13 * u_xlat16_11 + 1.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_11 = max(u_xlat16_11, 9.99999997e-07);
    u_xlat16_11 = u_xlat16_2 / u_xlat16_11;
    u_xlat16_11 = u_xlat16_11 * 0.318309873;
    u_xlat16_11 = min(u_xlat16_11, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat2.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_33) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_11) * u_xlat2.xyz;
    u_xlat11.xyz = vec3(u_xlat16_11) * u_xlat2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat11.xyz = u_xlat3.xyz / u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + u_xlat11.xyz;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_41) * u_xlat2.xyz;
    u_xlat16_8.xyz = u_xlat11.xyz * u_xlat2.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_8.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat16_8.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_8.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec4 u_xlat0;
vec3 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat10;
float u_xlat16;
bool u_xlatb16;
float u_xlat21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat3 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat16 = dot(u_xlat3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat3.x);
    u_xlat10 = u_xlat10 * _LightPositionRange.w;
    u_xlat10 = u_xlat10 * 0.970000029;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16<u_xlat10);
#else
    u_xlatb16 = u_xlat16<u_xlat10;
#endif
    u_xlat16_4.x = (u_xlatb16) ? _LightShadowData.x : 1.0;
    u_xlat16_4.x = u_xlat0.x + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat3.x * _LightPos.w;
    u_xlat16 = inversesqrt(u_xlat3.x);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat16);
    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat23 = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat0.x = u_xlat0.x * u_xlat23;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_4.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-u_xlat7.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat16_25);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xxx + (-u_xlat7.xyz);
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat2 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat0.xzw = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat1.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat16_4.xxx * u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat2.w) + 1.0;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_23 = (-u_xlat16_22) * u_xlat16_22 + 1.0;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_23 = u_xlat16_23 + u_xlat16_23;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_23) + u_xlat2.xyz;
    u_xlat16_2 = u_xlat16_7 * u_xlat16_22 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_2 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_22 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat16_7);
    u_xlat1.xyz = vec3(u_xlat16_7) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat2.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
vec2 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bool u_xlatb6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
mediump float u_xlat16_13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat37;
int u_xlati38;
bool u_xlatb39;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat33 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = inversesqrt(u_xlat24);
    u_xlat14.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat4.x = u_xlat24 * _LightPos.w;
    u_xlat4.x = texture(_LightTextureB0, u_xlat4.xx).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat15.xyz = u_xlat14.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat15.xyz = u_xlat14.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat15.xyz);
    u_xlat5.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat15.xyz = u_xlat15.xyz * u_xlat5.xxx;
    u_xlat5.xyz = u_xlat14.yzx * u_xlat15.xyz;
    u_xlat5.xyz = u_xlat15.zxy * u_xlat14.zxy + (-u_xlat5.xyz);
    u_xlat15.xy = u_xlat15.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat37 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat15.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * u_xlat3.xxx + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat6.x = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6.x<u_xlat24);
#else
        u_xlatb6 = u_xlat6.x<u_xlat24;
#endif
        u_xlat6.x = (u_xlatb6) ? _LightShadowData.x : 1.0;
        u_xlat37 = u_xlat37 + u_xlat6.x;
    }
    u_xlat16_8.x = u_xlat37 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat16_8.x;
    u_xlat11.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat11.x = texture(_LightTexture0, u_xlat11.xyz, -8.0).w;
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat11.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat14.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_9 = (-u_xlat4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat14.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat14.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_2 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_13 = u_xlat16_11 * u_xlat16_2 + (-u_xlat16_11);
    u_xlat16_11 = u_xlat16_13 * u_xlat16_11 + 1.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_11 = max(u_xlat16_11, 9.99999997e-07);
    u_xlat16_11 = u_xlat16_2 / u_xlat16_11;
    u_xlat16_11 = u_xlat16_11 * 0.318309873;
    u_xlat16_11 = min(u_xlat16_11, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat2.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_33) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_11) * u_xlat2.xyz;
    u_xlat11.xyz = vec3(u_xlat16_11) * u_xlat2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat11.xyz = u_xlat3.xyz / u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + u_xlat11.xyz;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_41) * u_xlat2.xyz;
    u_xlat16_8.xyz = u_xlat11.xyz * u_xlat2.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_8.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat16_8.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_8.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat18 = texture(_LightTextureB0, vec2(u_xlat18)).w;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat8.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_6 = (-u_xlat4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyw * u_xlat3.xxx + (-u_xlat8.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat8.x = dot((-u_xlat8.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_24 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_10 = u_xlat16_2 * u_xlat16_24 + (-u_xlat16_2);
    u_xlat16_2 = u_xlat16_10 * u_xlat16_2 + 1.0;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
    u_xlat16_2 = max(u_xlat16_2, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_2;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_16 = (-u_xlat16_16) * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
    u_xlat2.xyw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat16_5.x = u_xlat8.x * u_xlat8.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_5.xxx;
    u_xlat2.xyw = u_xlat2.xyw * vec3(u_xlat16_16) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_24) * u_xlat2.xyw;
    u_xlat8.xyz = vec3(u_xlat16_24) * u_xlat2.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat3.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat18 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_29) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_12;
float u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat21 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat21 = _ZBufferParams.x * u_xlat21 + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat7.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat3 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_4.xyz = u_xlat7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot((-_LightDir.xyz), u_xlat16_4.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat7.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_5 = (-u_xlat3.w) + 1.0;
    u_xlat16_12.xyz = u_xlat7.xyz * u_xlat2.xxx + (-_LightDir.xyz);
    u_xlat16_6 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_6);
    u_xlat16_7 = dot(u_xlat16_4.xyz, u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    u_xlat14 = dot((-_LightDir.xyz), u_xlat16_12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_5 * u_xlat16_5;
    u_xlat16_2 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_9 = u_xlat16_7 * u_xlat16_2 + (-u_xlat16_7);
    u_xlat16_7 = u_xlat16_9 * u_xlat16_7 + 1.0;
    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_7 = max(u_xlat16_7, 9.99999997e-07);
    u_xlat16_7 = u_xlat16_2 / u_xlat16_7;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat16_7 = min(u_xlat16_7, 64.0);
    u_xlat16_21 = (-u_xlat16_21) * u_xlat16_21 + 1.0;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat2.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat14 = (-u_xlat14) + 1.0;
    u_xlat16_4.x = u_xlat14 * u_xlat14;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xxx;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_21) + u_xlat3.xyz;
    u_xlat3.xyz = vec3(u_xlat16_7) * u_xlat2.xyz;
    u_xlat7.xyz = vec3(u_xlat16_7) * u_xlat2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat7.xyz = u_xlat3.xyz / u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + u_xlat7.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_4.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_4.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_25) * u_xlat2.xyz;
    u_xlat16_4.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat16_4.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_4.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_10;
float u_xlat11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat3.z<0.0);
#else
    u_xlatb11 = u_xlat3.z<0.0;
#endif
    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat11 * u_xlat3.x;
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat18 = texture(_LightTextureB0, vec2(u_xlat18)).w;
    u_xlat18 = u_xlat18 * u_xlat3.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_6 = (-u_xlat4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat8.xyz;
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_24 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_10 = u_xlat16_2 * u_xlat16_24 + (-u_xlat16_2);
    u_xlat16_2 = u_xlat16_10 * u_xlat16_2 + 1.0;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
    u_xlat16_2 = max(u_xlat16_2, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_2;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_16 = (-u_xlat16_16) * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
    u_xlat2.xyw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat16_5.x = u_xlat8.x * u_xlat8.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_5.xxx;
    u_xlat2.xyw = u_xlat2.xyw * vec3(u_xlat16_16) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_24) * u_xlat2.xyw;
    u_xlat8.xyz = vec3(u_xlat16_24) * u_xlat2.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat3.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat18 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_29) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat18 = texture(_LightTextureB0, vec2(u_xlat18)).w;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xyz, -8.0).w;
    u_xlat18 = u_xlat18 * u_xlat3.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat8.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_6 = (-u_xlat4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyw * u_xlat3.xxx + (-u_xlat8.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat8.x = dot((-u_xlat8.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_24 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_10 = u_xlat16_2 * u_xlat16_24 + (-u_xlat16_2);
    u_xlat16_2 = u_xlat16_10 * u_xlat16_2 + 1.0;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
    u_xlat16_2 = max(u_xlat16_2, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_2;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_16 = (-u_xlat16_16) * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
    u_xlat2.xyw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat16_5.x = u_xlat8.x * u_xlat8.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_5.xxx;
    u_xlat2.xyw = u_xlat2.xyw * vec3(u_xlat16_16) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_24) * u_xlat2.xyw;
    u_xlat8.xyz = vec3(u_xlat16_24) * u_xlat2.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat3.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat18 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_29) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec2 u_xlat8;
vec3 u_xlat10;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_14;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat24;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xy, -8.0).w;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat16_6 = (-u_xlat4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyz * vec3(u_xlat16) + (-_LightDir.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat24 = dot((-_LightDir.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_10 = u_xlat16_2 * u_xlat16_2;
    u_xlat16_18 = u_xlat16_16 * u_xlat16_10 + (-u_xlat16_16);
    u_xlat16_16 = u_xlat16_18 * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_16 = max(u_xlat16_16, 9.99999997e-07);
    u_xlat16_16 = u_xlat16_10 / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * 0.318309873;
    u_xlat16_16 = min(u_xlat16_16, 64.0);
    u_xlat16_2 = (-u_xlat16_2) * u_xlat16_2 + 1.0;
    u_xlat16_2 = u_xlat16_2 + u_xlat16_2;
    u_xlat10.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat16_5.x = u_xlat24 * u_xlat24;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat16_5.xxx;
    u_xlat2.xyz = u_xlat10.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_16) * u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat16_16) * u_xlat2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat2.xyz = u_xlat3.xyz / u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_29) * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat1.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
float u_xlat18;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat3.z<0.0);
#else
    u_xlatb11 = u_xlat3.z<0.0;
#endif
    u_xlat11.x = u_xlatb11 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat11.x * u_xlat3.x;
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat18 = texture(_LightTextureB0, vec2(u_xlat18)).w;
    u_xlat18 = u_xlat18 * u_xlat3.x;
    u_xlat3.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat11.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat11.xy,u_xlat11.z);
    u_xlat10_11 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
    u_xlat16_11 = u_xlat10_11 * u_xlat16_19 + _LightShadowData.x;
    u_xlat16_5.x = u_xlat3.x + u_xlat16_11;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat16_5.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_6 = (-u_xlat4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat8.xyz;
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_2 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_24 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_10 = u_xlat16_2 * u_xlat16_24 + (-u_xlat16_2);
    u_xlat16_2 = u_xlat16_10 * u_xlat16_2 + 1.0;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
    u_xlat16_2 = max(u_xlat16_2, 9.99999997e-07);
    u_xlat16_24 = u_xlat16_24 / u_xlat16_2;
    u_xlat16_24 = u_xlat16_24 * 0.318309873;
    u_xlat16_24 = min(u_xlat16_24, 64.0);
    u_xlat16_16 = (-u_xlat16_16) * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
    u_xlat2.xyw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat16_5.x = u_xlat8.x * u_xlat8.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_5.xxx;
    u_xlat2.xyw = u_xlat2.xyw * vec3(u_xlat16_16) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_24) * u_xlat2.xyw;
    u_xlat8.xyz = vec3(u_xlat16_24) * u_xlat2.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat3.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat18 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_29) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_7;
mediump float u_xlat16_8;
vec3 u_xlat9;
mediump float u_xlat16_11;
vec3 u_xlat12;
bool u_xlatb12;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat20;
mediump float u_xlat16_21;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat27 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat20 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat3.x = inversesqrt(u_xlat20);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy, -8.0).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat3.z<0.0);
#else
    u_xlatb12 = u_xlat3.z<0.0;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat3.x = u_xlat12.x * u_xlat3.x;
    u_xlat20 = u_xlat20 * _LightPos.w;
    u_xlat20 = texture(_LightTextureB0, vec2(u_xlat20)).w;
    u_xlat20 = u_xlat20 * u_xlat3.x;
    u_xlat3.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat12.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat4.xyz = u_xlat12.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat5.xyz = u_xlat12.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat5.xyz = u_xlat12.xyz + _ShadowOffsets[2].xyz;
    vec3 txVec2 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat4.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat12.xyz = u_xlat12.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec3 = vec3(u_xlat12.xy,u_xlat12.z);
    u_xlat4.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat12.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_21 = (-_LightShadowData.x) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat16_21 + _LightShadowData.x;
    u_xlat16_6.x = u_xlat3.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat20 = u_xlat20 * u_xlat16_6.x;
    u_xlat3.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_33 = dot(u_xlat9.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat2.xyw = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_7 = (-u_xlat4.w) + 1.0;
    u_xlat16_16.xyz = u_xlat2.xyw * u_xlat3.xxx + u_xlat9.xyz;
    u_xlat16_8 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_8 = inversesqrt(u_xlat16_8);
    u_xlat16_16.xyz = u_xlat16_16.xyz * vec3(u_xlat16_8);
    u_xlat16_2 = dot(u_xlat16_6.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat16_16.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_7 * u_xlat16_7;
    u_xlat16_27 = u_xlat16_18 * u_xlat16_18;
    u_xlat16_11 = u_xlat16_2 * u_xlat16_27 + (-u_xlat16_2);
    u_xlat16_2 = u_xlat16_11 * u_xlat16_2 + 1.0;
    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
    u_xlat16_2 = max(u_xlat16_2, 9.99999997e-07);
    u_xlat16_27 = u_xlat16_27 / u_xlat16_2;
    u_xlat16_27 = u_xlat16_27 * 0.318309873;
    u_xlat16_27 = min(u_xlat16_27, 64.0);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_18;
    u_xlat2.xyw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat16_6.x = u_xlat9.x * u_xlat9.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat9.x * u_xlat16_6.x;
    u_xlat2.xyw = u_xlat2.xyw * u_xlat16_6.xxx;
    u_xlat2.xyw = u_xlat2.xyw * vec3(u_xlat16_18) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_27) * u_xlat2.xyw;
    u_xlat9.xyz = vec3(u_xlat16_27) * u_xlat2.xyw + vec3(2.0, 2.0, 2.0);
    u_xlat9.xyz = u_xlat3.xyz / u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + u_xlat9.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat20 * u_xlat16_6.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_33) * u_xlat2.xyz;
    u_xlat16_6.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat16_6.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_6.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
uvec4 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
vec2 u_xlat17;
mediump float u_xlat16_22;
float u_xlat24;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat17.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat17.xy = floor(u_xlat17.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat17.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat4.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
    u_xlat3.xyw = u_xlat3.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.z;
    u_xlat8.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_16 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_5.x = u_xlat8.x + u_xlat10_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat1 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_13.xyz = u_xlat8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6 = dot((-_LightDir.xyz), u_xlat16_13.xyz);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlat8.xyz = (-u_xlat3.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16_14 = (-u_xlat1.w) + 1.0;
    u_xlat16_7.xyz = u_xlat8.xyz * u_xlat3.xxx + (-_LightDir.xyz);
    u_xlat16_22 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_7.xyz = vec3(u_xlat16_22) * u_xlat16_7.xyz;
    u_xlat16_8 = dot(u_xlat16_13.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16 = dot((-_LightDir.xyz), u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_25 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_3 = u_xlat16_8 * u_xlat16_25 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_3 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_25 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_13.x = u_xlat16 * u_xlat16;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat16_13.x = u_xlat16 * u_xlat16_13.x;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_13.xxx;
    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat16_8) * u_xlat1.xyz;
    u_xlat8.xyz = vec3(u_xlat16_8) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat3.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_13.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_13.x = min(max(u_xlat16_13.x, 0.0), 1.0);
#else
    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_13.x * u_xlat16_5.x;
    u_xlat1.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat1.xyz = vec3(u_xlat16_6) * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec2 u_xlat8;
vec3 u_xlat9;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_14;
float u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
vec2 u_xlat17;
mediump float u_xlat16_17;
float u_xlat24;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat17.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat17.xy = floor(u_xlat17.xy);
    u_xlatu2.xy = uvec2(ivec2(u_xlat17.xy));
    u_xlatu2.z = uint(uint(0u));
    u_xlatu2.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu2.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat4.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
    u_xlat3.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
    u_xlat3.xyw = u_xlat3.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat3.z;
    u_xlat8.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_16 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_5.x = u_xlat8.x + u_xlat10_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat8.xy = u_xlat3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat3.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat3.ww + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xy, -8.0).w;
    u_xlat8.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu2.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-_LightDir.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat1.xyz = (-u_xlat3.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat16_6 = (-u_xlat4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16) + (-_LightDir.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat24 = dot((-_LightDir.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_9 = u_xlat16_1 * u_xlat16_1;
    u_xlat16_17 = u_xlat16_16 * u_xlat16_9 + (-u_xlat16_16);
    u_xlat16_16 = u_xlat16_17 * u_xlat16_16 + 1.0;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_16 = max(u_xlat16_16, 9.99999997e-07);
    u_xlat16_16 = u_xlat16_9 / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * 0.318309873;
    u_xlat16_16 = min(u_xlat16_16, 64.0);
    u_xlat16_1 = (-u_xlat16_1) * u_xlat16_1 + 1.0;
    u_xlat16_1 = u_xlat16_1 + u_xlat16_1;
    u_xlat9.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat16_5.x = u_xlat24 * u_xlat24;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat24 * u_xlat16_5.x;
    u_xlat9.xyz = u_xlat9.xyz * u_xlat16_5.xxx;
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat16_1) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_16) * u_xlat1.xyz;
    u_xlat1.xyz = vec3(u_xlat16_16) * u_xlat1.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat1.xyz = u_xlat3.xyz / u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat16_5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat8.x * u_xlat16_5.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat16_29) * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat0.xyz;
    u_xlat1.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu2.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
bool u_xlatb8;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_14;
float u_xlat16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat27;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat27 = u_xlat18 * _LightPos.w;
    u_xlat27 = texture(_LightTextureB0, vec2(u_xlat27)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = u_xlat18 * _LightPositionRange.w;
    u_xlat18 = u_xlat18 * 0.970000029;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
    u_xlat8.x = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<u_xlat18);
#else
    u_xlatb8 = u_xlat8.x<u_xlat18;
#endif
    u_xlat16_5.x = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_5.x = u_xlat0.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat27 * u_xlat16_5.x;
    u_xlat8.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat8.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_6 = (-u_xlat4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat8.xyz * u_xlat2.xxx + (-u_xlat3.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16 = dot((-u_xlat3.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_2 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_10 = u_xlat16_8 * u_xlat16_2 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_10 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_2 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat2.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_5.x = u_xlat16 * u_xlat16;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_5.xxx;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_8) * u_xlat2.xyz;
    u_xlat8.xyz = vec3(u_xlat16_8) * u_xlat2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat3.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_29) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bool u_xlatb6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
mediump float u_xlat16_13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat37;
int u_xlati38;
bool u_xlatb39;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat33 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = inversesqrt(u_xlat24);
    u_xlat14.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat4.x = u_xlat24 * _LightPos.w;
    u_xlat4.x = texture(_LightTextureB0, u_xlat4.xx).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat15.xyz = u_xlat14.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat15.xyz = u_xlat14.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat15.xyz);
    u_xlat5.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat15.xyz = u_xlat15.xyz * u_xlat5.xxx;
    u_xlat5.xyz = u_xlat14.yzx * u_xlat15.xyz;
    u_xlat5.xyz = u_xlat15.zxy * u_xlat14.zxy + (-u_xlat5.xyz);
    u_xlat15.xy = u_xlat15.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat37 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat15.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * u_xlat3.xxx + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat6.x = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6.x<u_xlat24);
#else
        u_xlatb6 = u_xlat6.x<u_xlat24;
#endif
        u_xlat6.x = (u_xlatb6) ? _LightShadowData.x : 1.0;
        u_xlat37 = u_xlat37 + u_xlat6.x;
    }
    u_xlat16_8.x = u_xlat37 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat16_8.x;
    u_xlat11.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat14.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_9 = (-u_xlat4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat14.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat14.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_2 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_13 = u_xlat16_11 * u_xlat16_2 + (-u_xlat16_11);
    u_xlat16_11 = u_xlat16_13 * u_xlat16_11 + 1.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_11 = max(u_xlat16_11, 9.99999997e-07);
    u_xlat16_11 = u_xlat16_2 / u_xlat16_11;
    u_xlat16_11 = u_xlat16_11 * 0.318309873;
    u_xlat16_11 = min(u_xlat16_11, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat2.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_33) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_11) * u_xlat2.xyz;
    u_xlat11.xyz = vec3(u_xlat16_11) * u_xlat2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat11.xyz = u_xlat3.xyz / u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + u_xlat11.xyz;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_41) * u_xlat2.xyz;
    u_xlat16_8.xyz = u_xlat11.xyz * u_xlat2.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_8.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat16_8.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_8.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
bool u_xlatb8;
mediump float u_xlat16_10;
mediump vec3 u_xlat16_14;
float u_xlat16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat27;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat24 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat24 = _ZBufferParams.x * u_xlat24 + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat18 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat27 = u_xlat18 * _LightPos.w;
    u_xlat27 = texture(_LightTextureB0, vec2(u_xlat27)).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = u_xlat18 * _LightPositionRange.w;
    u_xlat18 = u_xlat18 * 0.970000029;
    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
    u_xlat8.x = dot(u_xlat4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8.x<u_xlat18);
#else
    u_xlatb8 = u_xlat8.x<u_xlat18;
#endif
    u_xlat16_5.x = (u_xlatb8) ? _LightShadowData.x : 1.0;
    u_xlat16_5.x = u_xlat0.x + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat27 * u_xlat16_5.x;
    u_xlat8.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat8.x = texture(_LightTexture0, u_xlat8.xyz, -8.0).w;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat8.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_5.xyz = u_xlat8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = dot((-u_xlat3.xyz), u_xlat16_5.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.0);
    u_xlat8.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_6 = (-u_xlat4.w) + 1.0;
    u_xlat16_14.xyz = u_xlat8.xyz * u_xlat2.xxx + (-u_xlat3.xyz);
    u_xlat16_7 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_7);
    u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8 = min(max(u_xlat16_8, 0.0), 1.0);
#else
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
#endif
    u_xlat16 = dot((-u_xlat3.xyz), u_xlat16_14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_6 * u_xlat16_6;
    u_xlat16_2 = u_xlat16_24 * u_xlat16_24;
    u_xlat16_10 = u_xlat16_8 * u_xlat16_2 + (-u_xlat16_8);
    u_xlat16_8 = u_xlat16_10 * u_xlat16_8 + 1.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
    u_xlat16_8 = max(u_xlat16_8, 9.99999997e-07);
    u_xlat16_8 = u_xlat16_2 / u_xlat16_8;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat16_8 = min(u_xlat16_8, 64.0);
    u_xlat16_24 = (-u_xlat16_24) * u_xlat16_24 + 1.0;
    u_xlat16_24 = u_xlat16_24 + u_xlat16_24;
    u_xlat2.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16_5.x = u_xlat16 * u_xlat16;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16 * u_xlat16_5.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_5.xxx;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_24) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_8) * u_xlat2.xyz;
    u_xlat8.xyz = vec3(u_xlat16_8) * u_xlat2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat8.xyz = u_xlat3.xyz / u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_29) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_5.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat16_5.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[5];
float ImmCB_0_0_1[5];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 unity_DebugViewInfo;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _ShadowMapTexture;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2DMS _CameraNormalsTexture;
uniform lowp sampler2DMS _CameraSpecularTexture;
uniform lowp sampler2DMS _CameraAlbedoTexture;
uniform lowp sampler2DMS _CameraDepthTextureMS;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
vec3 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
uvec4 u_xlatu1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
bool u_xlatb6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_9;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
mediump float u_xlat16_13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump vec3 u_xlat16_20;
float u_xlat22;
float u_xlat24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat37;
int u_xlati38;
bool u_xlatb39;
mediump float u_xlat16_41;
void main()
{
	ImmCB_0_0_0[0] = 0.0;
	ImmCB_0_0_0[1] = 2.37764096;
	ImmCB_0_0_0[2] = 1.46946299;
	ImmCB_0_0_0[3] = -1.46946299;
	ImmCB_0_0_0[4] = -2.37764096;
	ImmCB_0_0_1[0] = 2.5;
	ImmCB_0_0_1[1] = 0.772542;
	ImmCB_0_0_1[2] = -2.02254295;
	ImmCB_0_0_1[3] = -2.022542;
	ImmCB_0_0_1[4] = 0.772543013;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(unity_DebugViewInfo.x==12.0);
#else
    u_xlatb0 = unity_DebugViewInfo.x==12.0;
#endif
    if(u_xlatb0){
        SV_Target0 = vec4(0.100000001, 0.0, 0.0, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlatu1.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu1.z = uint(uint(0u));
    u_xlatu1.w = uint(uint(0u));
    u_xlat33 = texelFetch(_CameraDepthTextureMS, ivec2(u_xlatu1.xy), 0).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat33 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat11.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat3.x = inversesqrt(u_xlat24);
    u_xlat14.xyz = u_xlat11.xyz * u_xlat3.xxx;
    u_xlat4.x = u_xlat24 * _LightPos.w;
    u_xlat4.x = texture(_LightTextureB0, u_xlat4.xx).w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat15.xyz = u_xlat14.yzx * vec3(0.0, 1.0, 0.0);
    u_xlat15.xyz = u_xlat14.xyz * vec3(1.0, 0.0, 0.0) + (-u_xlat15.xyz);
    u_xlat5.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat15.xyz = u_xlat15.xyz * u_xlat5.xxx;
    u_xlat5.xyz = u_xlat14.yzx * u_xlat15.xyz;
    u_xlat5.xyz = u_xlat15.zxy * u_xlat14.zxy + (-u_xlat5.xyz);
    u_xlat15.xy = u_xlat15.yx * _ShadowMapTexture_TexelSize.xx;
    u_xlat5.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat6.y = 0.0;
    u_xlat37 = 0.0;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<5 ; u_xlati_loop_1++)
    {
        u_xlat7.xy = u_xlat15.xy * ImmCB_0_0_0[u_xlati_loop_1];
        u_xlat6.xz = u_xlat7.xy * vec2(0.5, 0.5);
        u_xlat6.xzw = u_xlat11.xyz * u_xlat3.xxx + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat5.xyz * ImmCB_0_0_1[u_xlati_loop_1];
        u_xlat6.xzw = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + u_xlat6.xzw;
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat6.xzw, 0.0);
        u_xlat6.x = dot(u_xlat7, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6.x<u_xlat24);
#else
        u_xlatb6 = u_xlat6.x<u_xlat24;
#endif
        u_xlat6.x = (u_xlatb6) ? _LightShadowData.x : 1.0;
        u_xlat37 = u_xlat37 + u_xlat6.x;
    }
    u_xlat16_8.x = u_xlat37 * 0.200000003 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat16_8.x;
    u_xlat11.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat11.x = texture(_LightTexture0, u_xlat11.xyz, -8.0).w;
    u_xlat0.x = u_xlat11.x * u_xlat0.x;
    u_xlat11.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat4 = texelFetch(_CameraSpecularTexture, ivec2(u_xlatu1.xy), gl_SampleID);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_41 = dot((-u_xlat14.xyz), u_xlat16_8.xyz);
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat11.xyz = (-u_xlat2.xyw) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat16_9 = (-u_xlat4.w) + 1.0;
    u_xlat16_20.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat14.xyz);
    u_xlat16_10 = dot(u_xlat16_20.xyz, u_xlat16_20.xyz);
    u_xlat16_10 = inversesqrt(u_xlat16_10);
    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(u_xlat16_10);
    u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat22 = dot((-u_xlat14.xyz), u_xlat16_20.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_2 = u_xlat16_33 * u_xlat16_33;
    u_xlat16_13 = u_xlat16_11 * u_xlat16_2 + (-u_xlat16_11);
    u_xlat16_11 = u_xlat16_13 * u_xlat16_11 + 1.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_11 = max(u_xlat16_11, 9.99999997e-07);
    u_xlat16_11 = u_xlat16_2 / u_xlat16_11;
    u_xlat16_11 = u_xlat16_11 * 0.318309873;
    u_xlat16_11 = min(u_xlat16_11, 64.0);
    u_xlat16_33 = (-u_xlat16_33) * u_xlat16_33 + 1.0;
    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;
    u_xlat2.xyz = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat16_8.x = u_xlat22 * u_xlat22;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat22 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_8.xxx;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_33) + u_xlat4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_11) * u_xlat2.xyz;
    u_xlat11.xyz = vec3(u_xlat16_11) * u_xlat2.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat11.xyz = u_xlat3.xyz / u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + u_xlat11.xyz;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = vec3(u_xlat16_41) * u_xlat2.xyz;
    u_xlat16_8.xyz = u_xlat11.xyz * u_xlat2.xyz;
    u_xlat0.xyz = texelFetch(_CameraAlbedoTexture, ivec2(u_xlatu1.xy), gl_SampleID).xyz;
    u_xlat16_8.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat16_8.xyz;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat16_8.xyz;
    SV_Target1.w = 0.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "POINT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
}
}
}
}