//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/Scene/NeonLighting" {
Properties {
[Header(Main Setting)] _MainTex ("Main Tex", 2D) = "white" { }
_Color ("Main Color", Color) = (1,1,1,1)
_BumpMap ("Main Normal Map", 2D) = "bump" { }
_DetailMask ("Main Mask Map (R Smoothness, G metallic, B Blend, A Emission)", 2D) = "black" { }
[MHYToggle] _UseMainMaskAlphaAsEmission ("Use Main Mask Alpha as Emission", Float) = 1
_ReflectionCube ("Reflection Cube", Cube) = "sky" { }
[Header(Emission)] [KeywordEnum(None, Normal, Time)] Emission_Type ("Emission Type", Float) = 0
_EmissionRange ("Emission Range", Range(0, 1)) = 0.1
_EmissionColor ("Emission Color", Color) = (1,1,1,1)
_EmissionStrength ("Emission Strength", Range(0, 20)) = 1
[Header(State)] [Enum(UnityEngine.Rendering.CullMode)] _CullMode ("Cull Mode", Float) = 2
_PolygonOffsetFactor ("Polygon Offset Factor", Float) = 0
_PolygonOffsetUnit ("Polygon Offset Unit", Float) = 0
}
SubShader {
 Tags { "QUEUE" = "Geometry" "RenderType" = "Opaque" }
 Pass {
  Name "HYBRIDDEFERRED"
  Tags { "DebugView" = "On" "EntityUseType" = "Gadget" "LIGHTMODE" = "HYBRIDDEFERRED" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 6952
Program "vp" {
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat16_25 = sqrt(u_xlat16_25);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_25<_FillNormalGaps);
#else
    u_xlatb0 = u_xlat16_25<_FillNormalGaps;
#endif
    u_xlat16_1.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat16_1.xy;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16_1.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_9.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_9.xyz = u_xlat0.xyz * (-u_xlat16_9.xxx) + u_xlat2.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz);
    u_xlat16_3 = dot(u_xlat0.xyz, u_xlat16_9.xyz);
    u_xlat16_3 = max(u_xlat16_3, 0.00100000005);
    u_xlat16_11 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_19 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_27 + u_xlat16_0.x;
    u_xlat16_27 = (-u_xlat16_19) + 1.0;
    SV_Target2.w = u_xlat16_19;
    u_xlat16_0.x = max(u_xlat16_27, 0.00100000005);
    u_xlat16_11 = u_xlat16_0.x * u_xlat16_11;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_9.xyz, u_xlat16_11);
    u_xlat16_9.x = u_xlat10_2.w + -1.0;
    u_xlat16_9.x = _ReflectionCube_HDR.w * u_xlat16_9.x + 1.0;
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.y;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.x;
    u_xlat16_9.xyz = u_xlat10_2.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_9.xyz;
    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = u_xlat16_1.x * -5.55472994 + -6.98316002;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11;
    u_xlat16_11 = exp2(u_xlat16_11);
    u_xlat16_19 = u_xlat16_0.x * u_xlat16_0.y;
    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_27 = u_xlat16_27 * 0.5;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = u_xlat16_19 * -0.5 + 1.0;
    u_xlat10_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzw * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xzw * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_28 = (-u_xlat16_0.y) + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_19) + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_11) + u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_11 = (-u_xlat16_27) + 1.0;
    u_xlat16_19 = u_xlat16_3 * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = float(1.0) / u_xlat16_11;
    u_xlat16_19 = float(1.0) / u_xlat16_19;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_19;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_9.xyz;
    SV_Target1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_3) + u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_4.z;
    SV_Target2.xy = u_xlat16_4.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat16_25 = sqrt(u_xlat16_25);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_25<_FillNormalGaps);
#else
    u_xlatb0 = u_xlat16_25<_FillNormalGaps;
#endif
    u_xlat16_1.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat16_1.xy;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16_1.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_9.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_9.xyz = u_xlat0.xyz * (-u_xlat16_9.xxx) + u_xlat2.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz);
    u_xlat16_3 = dot(u_xlat0.xyz, u_xlat16_9.xyz);
    u_xlat16_3 = max(u_xlat16_3, 0.00100000005);
    u_xlat16_11 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_19 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_27 + u_xlat16_0.x;
    u_xlat16_27 = (-u_xlat16_19) + 1.0;
    SV_Target2.w = u_xlat16_19;
    u_xlat16_0.x = max(u_xlat16_27, 0.00100000005);
    u_xlat16_11 = u_xlat16_0.x * u_xlat16_11;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_9.xyz, u_xlat16_11);
    u_xlat16_9.x = u_xlat10_2.w + -1.0;
    u_xlat16_9.x = _ReflectionCube_HDR.w * u_xlat16_9.x + 1.0;
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.y;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.x;
    u_xlat16_9.xyz = u_xlat10_2.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_9.xyz;
    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = u_xlat16_1.x * -5.55472994 + -6.98316002;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11;
    u_xlat16_11 = exp2(u_xlat16_11);
    u_xlat16_19 = u_xlat16_0.x * u_xlat16_0.y;
    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_27 = u_xlat16_27 * 0.5;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = u_xlat16_19 * -0.5 + 1.0;
    u_xlat10_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzw * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xzw * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_28 = (-u_xlat16_0.y) + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_19) + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_11) + u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_11 = (-u_xlat16_27) + 1.0;
    u_xlat16_19 = u_xlat16_3 * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = float(1.0) / u_xlat16_11;
    u_xlat16_19 = float(1.0) / u_xlat16_19;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_19;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_9.xyz;
    SV_Target1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_3) + u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_4.z;
    SV_Target2.xy = u_xlat16_4.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat16_25 = sqrt(u_xlat16_25);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_25<_FillNormalGaps);
#else
    u_xlatb0 = u_xlat16_25<_FillNormalGaps;
#endif
    u_xlat16_1.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat16_1.xy;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16_1.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_9.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_9.xyz = u_xlat0.xyz * (-u_xlat16_9.xxx) + u_xlat2.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz);
    u_xlat16_3 = dot(u_xlat0.xyz, u_xlat16_9.xyz);
    u_xlat16_3 = max(u_xlat16_3, 0.00100000005);
    u_xlat16_11 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_19 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_27 + u_xlat16_0.x;
    u_xlat16_27 = (-u_xlat16_19) + 1.0;
    SV_Target2.w = u_xlat16_19;
    u_xlat16_0.x = max(u_xlat16_27, 0.00100000005);
    u_xlat16_11 = u_xlat16_0.x * u_xlat16_11;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_9.xyz, u_xlat16_11);
    u_xlat16_9.x = u_xlat10_2.w + -1.0;
    u_xlat16_9.x = _ReflectionCube_HDR.w * u_xlat16_9.x + 1.0;
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.y;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.x;
    u_xlat16_9.xyz = u_xlat10_2.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_9.xyz;
    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = u_xlat16_1.x * -5.55472994 + -6.98316002;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11;
    u_xlat16_11 = exp2(u_xlat16_11);
    u_xlat16_19 = u_xlat16_0.x * u_xlat16_0.y;
    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_27 = u_xlat16_27 * 0.5;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = u_xlat16_19 * -0.5 + 1.0;
    u_xlat10_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzw * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xzw * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_28 = (-u_xlat16_0.y) + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_19) + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_11) + u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_11 = (-u_xlat16_27) + 1.0;
    u_xlat16_19 = u_xlat16_3 * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = float(1.0) / u_xlat16_11;
    u_xlat16_19 = float(1.0) / u_xlat16_19;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_19;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_9.xyz;
    SV_Target1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_3) + u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_4.z;
    SV_Target2.xy = u_xlat16_4.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat16_25 = sqrt(u_xlat16_25);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_25<_FillNormalGaps);
#else
    u_xlatb0 = u_xlat16_25<_FillNormalGaps;
#endif
    u_xlat16_1.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat16_1.xy;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16_1.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_9.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_9.xyz = u_xlat0.xyz * (-u_xlat16_9.xxx) + u_xlat2.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz);
    u_xlat16_3 = dot(u_xlat0.xyz, u_xlat16_9.xyz);
    u_xlat16_3 = max(u_xlat16_3, 0.00100000005);
    u_xlat16_11 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_19 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_27 + u_xlat16_0.x;
    u_xlat16_27 = (-u_xlat16_19) + 1.0;
    SV_Target2.w = u_xlat16_19;
    u_xlat16_0.x = max(u_xlat16_27, 0.00100000005);
    u_xlat16_11 = u_xlat16_0.x * u_xlat16_11;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_9.xyz, u_xlat16_11);
    u_xlat16_9.x = u_xlat10_2.w + -1.0;
    u_xlat16_9.x = _ReflectionCube_HDR.w * u_xlat16_9.x + 1.0;
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.y;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.x;
    u_xlat16_9.xyz = u_xlat10_2.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_9.xyz;
    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = u_xlat16_1.x * -5.55472994 + -6.98316002;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11;
    u_xlat16_11 = exp2(u_xlat16_11);
    u_xlat16_19 = u_xlat16_0.x * u_xlat16_0.y;
    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_27 = u_xlat16_27 * 0.5;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = u_xlat16_19 * -0.5 + 1.0;
    u_xlat10_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzw * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xzw * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_28 = (-u_xlat16_0.y) + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_19) + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_11) + u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_11 = (-u_xlat16_27) + 1.0;
    u_xlat16_19 = u_xlat16_3 * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = float(1.0) / u_xlat16_11;
    u_xlat16_19 = float(1.0) / u_xlat16_19;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_19;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_9.xyz;
    SV_Target1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_3) + u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_4.z;
    SV_Target2.xy = u_xlat16_4.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat9;
mediump float u_xlat16_10;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat9;
mediump float u_xlat16_10;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat16_25 = sqrt(u_xlat16_25);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_25<_FillNormalGaps);
#else
    u_xlatb0 = u_xlat16_25<_FillNormalGaps;
#endif
    u_xlat16_1.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat16_1.xy;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16_1.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_9.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_9.xyz = u_xlat0.xyz * (-u_xlat16_9.xxx) + u_xlat2.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz);
    u_xlat16_3 = dot(u_xlat0.xyz, u_xlat16_9.xyz);
    u_xlat16_3 = max(u_xlat16_3, 0.00100000005);
    u_xlat16_11 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_19 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_27 + u_xlat16_0.x;
    u_xlat16_27 = (-u_xlat16_19) + 1.0;
    SV_Target2.w = u_xlat16_19;
    u_xlat16_0.x = max(u_xlat16_27, 0.00100000005);
    u_xlat16_11 = u_xlat16_0.x * u_xlat16_11;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_9.xyz, u_xlat16_11);
    u_xlat16_9.x = u_xlat10_2.w + -1.0;
    u_xlat16_9.x = _ReflectionCube_HDR.w * u_xlat16_9.x + 1.0;
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.y;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.x;
    u_xlat16_9.xyz = u_xlat10_2.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_9.xyz;
    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = u_xlat16_1.x * -5.55472994 + -6.98316002;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11;
    u_xlat16_11 = exp2(u_xlat16_11);
    u_xlat16_19 = u_xlat16_0.x * u_xlat16_0.y;
    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_27 = u_xlat16_27 * 0.5;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = u_xlat16_19 * -0.5 + 1.0;
    u_xlat10_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzw * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xzw * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_28 = (-u_xlat16_0.y) + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_19) + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_11) + u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_11 = (-u_xlat16_27) + 1.0;
    u_xlat16_19 = u_xlat16_3 * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = float(1.0) / u_xlat16_11;
    u_xlat16_19 = float(1.0) / u_xlat16_19;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_19;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_9.xyz;
    SV_Target1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_3) + u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_4.z;
    SV_Target2.xy = u_xlat16_4.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat16_25 = sqrt(u_xlat16_25);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_25<_FillNormalGaps);
#else
    u_xlatb0 = u_xlat16_25<_FillNormalGaps;
#endif
    u_xlat16_1.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat16_1.xy;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16_1.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_9.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_9.xyz = u_xlat0.xyz * (-u_xlat16_9.xxx) + u_xlat2.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz);
    u_xlat16_3 = dot(u_xlat0.xyz, u_xlat16_9.xyz);
    u_xlat16_3 = max(u_xlat16_3, 0.00100000005);
    u_xlat16_11 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_19 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_27 + u_xlat16_0.x;
    u_xlat16_27 = (-u_xlat16_19) + 1.0;
    SV_Target2.w = u_xlat16_19;
    u_xlat16_0.x = max(u_xlat16_27, 0.00100000005);
    u_xlat16_11 = u_xlat16_0.x * u_xlat16_11;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_9.xyz, u_xlat16_11);
    u_xlat16_9.x = u_xlat10_2.w + -1.0;
    u_xlat16_9.x = _ReflectionCube_HDR.w * u_xlat16_9.x + 1.0;
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.y;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.x;
    u_xlat16_9.xyz = u_xlat10_2.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_9.xyz;
    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = u_xlat16_1.x * -5.55472994 + -6.98316002;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11;
    u_xlat16_11 = exp2(u_xlat16_11);
    u_xlat16_19 = u_xlat16_0.x * u_xlat16_0.y;
    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_27 = u_xlat16_27 * 0.5;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = u_xlat16_19 * -0.5 + 1.0;
    u_xlat10_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzw * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xzw * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_28 = (-u_xlat16_0.y) + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_19) + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_11) + u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_11 = (-u_xlat16_27) + 1.0;
    u_xlat16_19 = u_xlat16_3 * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = float(1.0) / u_xlat16_11;
    u_xlat16_19 = float(1.0) / u_xlat16_19;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_19;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_9.xyz;
    SV_Target1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_3) + u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_4.z;
    SV_Target2.xy = u_xlat16_4.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat16_25 = sqrt(u_xlat16_25);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_25<_FillNormalGaps);
#else
    u_xlatb0 = u_xlat16_25<_FillNormalGaps;
#endif
    u_xlat16_1.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat16_1.xy;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16_1.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_9.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_9.xyz = u_xlat0.xyz * (-u_xlat16_9.xxx) + u_xlat2.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz);
    u_xlat16_3 = dot(u_xlat0.xyz, u_xlat16_9.xyz);
    u_xlat16_3 = max(u_xlat16_3, 0.00100000005);
    u_xlat16_11 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_19 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_27 + u_xlat16_0.x;
    u_xlat16_27 = (-u_xlat16_19) + 1.0;
    SV_Target2.w = u_xlat16_19;
    u_xlat16_0.x = max(u_xlat16_27, 0.00100000005);
    u_xlat16_11 = u_xlat16_0.x * u_xlat16_11;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_9.xyz, u_xlat16_11);
    u_xlat16_9.x = u_xlat10_2.w + -1.0;
    u_xlat16_9.x = _ReflectionCube_HDR.w * u_xlat16_9.x + 1.0;
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.y;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.x;
    u_xlat16_9.xyz = u_xlat10_2.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_9.xyz;
    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = u_xlat16_1.x * -5.55472994 + -6.98316002;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11;
    u_xlat16_11 = exp2(u_xlat16_11);
    u_xlat16_19 = u_xlat16_0.x * u_xlat16_0.y;
    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_27 = u_xlat16_27 * 0.5;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = u_xlat16_19 * -0.5 + 1.0;
    u_xlat10_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzw * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xzw * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_28 = (-u_xlat16_0.y) + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_19) + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_11) + u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_11 = (-u_xlat16_27) + 1.0;
    u_xlat16_19 = u_xlat16_3 * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = float(1.0) / u_xlat16_11;
    u_xlat16_19 = float(1.0) / u_xlat16_19;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_19;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_9.xyz;
    SV_Target1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_3) + u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_4.z;
    SV_Target2.xy = u_xlat16_4.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump float u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_19;
float u_xlat24;
mediump float u_xlat16_25;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat16_25 = sqrt(u_xlat16_25);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_25<_FillNormalGaps);
#else
    u_xlatb0 = u_xlat16_25<_FillNormalGaps;
#endif
    u_xlat16_1.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat16_1.xy;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16_1.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_9.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_9.xyz = u_xlat0.xyz * (-u_xlat16_9.xxx) + u_xlat2.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz);
    u_xlat16_3 = dot(u_xlat0.xyz, u_xlat16_9.xyz);
    u_xlat16_3 = max(u_xlat16_3, 0.00100000005);
    u_xlat16_11 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_19 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
#else
    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
#endif
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_27 + u_xlat16_0.x;
    u_xlat16_27 = (-u_xlat16_19) + 1.0;
    SV_Target2.w = u_xlat16_19;
    u_xlat16_0.x = max(u_xlat16_27, 0.00100000005);
    u_xlat16_11 = u_xlat16_0.x * u_xlat16_11;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_9.xyz, u_xlat16_11);
    u_xlat16_9.x = u_xlat10_2.w + -1.0;
    u_xlat16_9.x = _ReflectionCube_HDR.w * u_xlat16_9.x + 1.0;
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.y;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _ReflectionCube_HDR.x;
    u_xlat16_9.xyz = u_xlat10_2.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_9.xyz;
    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = u_xlat16_1.x * -5.55472994 + -6.98316002;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11;
    u_xlat16_11 = exp2(u_xlat16_11);
    u_xlat16_19 = u_xlat16_0.x * u_xlat16_0.y;
    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_27 = u_xlat16_27 * 0.5;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
    u_xlat16_19 = u_xlat16_19 * -0.5 + 1.0;
    u_xlat10_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzw * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xzw * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_28 = (-u_xlat16_0.y) + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_19) + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_11) + u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_11 = (-u_xlat16_27) + 1.0;
    u_xlat16_19 = u_xlat16_3 * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = u_xlat16_1.x * u_xlat16_11 + u_xlat16_27;
    u_xlat16_11 = float(1.0) / u_xlat16_11;
    u_xlat16_19 = float(1.0) / u_xlat16_19;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_19;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_11);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_9.xyz;
    SV_Target1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_3) + u_xlat16_5.xyz;
    SV_Target1.w = 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_4.z;
    SV_Target2.xy = u_xlat16_4.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat9;
mediump float u_xlat16_10;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat9;
mediump float u_xlat16_10;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
mediump vec3 u_xlat16_16;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
mediump float u_xlat16_22;
mediump float u_xlat16_32;
mediump float u_xlat16_35;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat20.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat20.xy + u_xlat0.xy;
    u_xlat20.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat20.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
    u_xlat16_32 = sqrt(u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_32<_FillNormalGaps);
#else
    u_xlatb20 = u_xlat16_32<_FillNormalGaps;
#endif
    u_xlat16_2.xy = (bool(u_xlatb20)) ? vec2(0.0, 0.0) : u_xlat16_2.xy;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
    u_xlat20.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat1.xyz = u_xlat20.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat3.x = vs_TEXCOORD1.w;
    u_xlat3.y = vs_TEXCOORD2.w;
    u_xlat3.z = vs_TEXCOORD3.w;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat16_12.x = u_xlat16_2.x + u_xlat16_2.x;
    u_xlat16_12.xyz = u_xlat1.xyz * (-u_xlat16_12.xxx) + u_xlat3.xyz;
    u_xlat16_12.xyz = (-u_xlat16_12.xyz);
    u_xlat10_20.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat10_3.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_0 = max(u_xlat10_20.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    u_xlat16_4 = (-u_xlat16_0) + 1.0;
    u_xlat16_14 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_14 * u_xlat16_4 + u_xlat16_0;
    u_xlat16_14 = (-u_xlat16_4) + 1.0;
    SV_Target2.w = u_xlat16_4;
    u_xlat16_0 = max(u_xlat16_14, 0.00100000005);
    u_xlat16_4 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_4 = u_xlat16_0 * u_xlat16_4;
    u_xlat10_4 = textureLod(_ReflectionCube, u_xlat16_12.xyz, u_xlat16_4);
    u_xlat16_2.y = dot(u_xlat1.xyz, u_xlat16_12.xyz);
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.00100000005, 0.00100000005));
    u_xlat16_22 = u_xlat10_4.w + -1.0;
    u_xlat16_22 = _ReflectionCube_HDR.w * u_xlat16_22 + 1.0;
    u_xlat16_22 = log2(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * _ReflectionCube_HDR.y;
    u_xlat16_22 = exp2(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * _ReflectionCube_HDR.x;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_22);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_22 = (-u_xlat16_0) + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat16_22 = u_xlat16_2.x * -5.55472994 + -6.98316002;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_22;
    u_xlat16_22 = exp2(u_xlat16_22);
    u_xlat16_32 = u_xlat10_20.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_0 * u_xlat16_32;
    u_xlat16_6 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_6 = u_xlat16_6 * 0.5;
    u_xlat16_6 = max(u_xlat16_6, 9.99999975e-05);
    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * -0.5 + 1.0;
    u_xlat16_16.xyz = u_xlat10_3.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_16.xyz = u_xlat10_20.yyy * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_32 = (-u_xlat16_32) + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_35) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_8.xyz) * vec3(u_xlat16_35) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_22) + u_xlat16_9.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_8.xyz;
    u_xlat16_22 = (-u_xlat16_6) + 1.0;
    u_xlat16_32 = u_xlat16_2.y * u_xlat16_22 + u_xlat16_6;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_22 + u_xlat16_6;
    u_xlat16_22 = float(1.0) / u_xlat16_22;
    u_xlat16_32 = float(1.0) / u_xlat16_32;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_32;
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_2.xzw * u_xlat16_2.yyy + u_xlat16_7.xyz;
    SV_Target1.w = 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_16.z;
    SV_Target2.xy = u_xlat16_16.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
mediump vec3 u_xlat16_16;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
mediump float u_xlat16_22;
mediump float u_xlat16_32;
mediump float u_xlat16_35;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat20.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat20.xy + u_xlat0.xy;
    u_xlat20.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat20.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
    u_xlat16_32 = sqrt(u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_32<_FillNormalGaps);
#else
    u_xlatb20 = u_xlat16_32<_FillNormalGaps;
#endif
    u_xlat16_2.xy = (bool(u_xlatb20)) ? vec2(0.0, 0.0) : u_xlat16_2.xy;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
    u_xlat20.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat1.xyz = u_xlat20.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat3.x = vs_TEXCOORD1.w;
    u_xlat3.y = vs_TEXCOORD2.w;
    u_xlat3.z = vs_TEXCOORD3.w;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat16_12.x = u_xlat16_2.x + u_xlat16_2.x;
    u_xlat16_12.xyz = u_xlat1.xyz * (-u_xlat16_12.xxx) + u_xlat3.xyz;
    u_xlat16_12.xyz = (-u_xlat16_12.xyz);
    u_xlat10_20.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat10_3.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_0 = max(u_xlat10_20.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    u_xlat16_4 = (-u_xlat16_0) + 1.0;
    u_xlat16_14 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_14 * u_xlat16_4 + u_xlat16_0;
    u_xlat16_14 = (-u_xlat16_4) + 1.0;
    SV_Target2.w = u_xlat16_4;
    u_xlat16_0 = max(u_xlat16_14, 0.00100000005);
    u_xlat16_4 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_4 = u_xlat16_0 * u_xlat16_4;
    u_xlat10_4 = textureLod(_ReflectionCube, u_xlat16_12.xyz, u_xlat16_4);
    u_xlat16_2.y = dot(u_xlat1.xyz, u_xlat16_12.xyz);
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.00100000005, 0.00100000005));
    u_xlat16_22 = u_xlat10_4.w + -1.0;
    u_xlat16_22 = _ReflectionCube_HDR.w * u_xlat16_22 + 1.0;
    u_xlat16_22 = log2(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * _ReflectionCube_HDR.y;
    u_xlat16_22 = exp2(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * _ReflectionCube_HDR.x;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_22);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_22 = (-u_xlat16_0) + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat16_22 = u_xlat16_2.x * -5.55472994 + -6.98316002;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_22;
    u_xlat16_22 = exp2(u_xlat16_22);
    u_xlat16_32 = u_xlat10_20.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_0 * u_xlat16_32;
    u_xlat16_6 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_6 = u_xlat16_6 * 0.5;
    u_xlat16_6 = max(u_xlat16_6, 9.99999975e-05);
    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * -0.5 + 1.0;
    u_xlat16_16.xyz = u_xlat10_3.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_16.xyz = u_xlat10_20.yyy * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_32 = (-u_xlat16_32) + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_35) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_8.xyz) * vec3(u_xlat16_35) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_22) + u_xlat16_9.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_8.xyz;
    u_xlat16_22 = (-u_xlat16_6) + 1.0;
    u_xlat16_32 = u_xlat16_2.y * u_xlat16_22 + u_xlat16_6;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_22 + u_xlat16_6;
    u_xlat16_22 = float(1.0) / u_xlat16_22;
    u_xlat16_32 = float(1.0) / u_xlat16_32;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_32;
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_2.xzw * u_xlat16_2.yyy + u_xlat16_7.xyz;
    SV_Target1.w = 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_16.z;
    SV_Target2.xy = u_xlat16_16.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
mediump vec3 u_xlat16_16;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
mediump float u_xlat16_22;
mediump float u_xlat16_32;
mediump float u_xlat16_35;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat20.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat20.xy + u_xlat0.xy;
    u_xlat20.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat20.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
    u_xlat16_32 = sqrt(u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_32<_FillNormalGaps);
#else
    u_xlatb20 = u_xlat16_32<_FillNormalGaps;
#endif
    u_xlat16_2.xy = (bool(u_xlatb20)) ? vec2(0.0, 0.0) : u_xlat16_2.xy;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
    u_xlat20.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat1.xyz = u_xlat20.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat3.x = vs_TEXCOORD1.w;
    u_xlat3.y = vs_TEXCOORD2.w;
    u_xlat3.z = vs_TEXCOORD3.w;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat16_12.x = u_xlat16_2.x + u_xlat16_2.x;
    u_xlat16_12.xyz = u_xlat1.xyz * (-u_xlat16_12.xxx) + u_xlat3.xyz;
    u_xlat16_12.xyz = (-u_xlat16_12.xyz);
    u_xlat10_20.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat10_3.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_0 = max(u_xlat10_20.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    u_xlat16_4 = (-u_xlat16_0) + 1.0;
    u_xlat16_14 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_14 * u_xlat16_4 + u_xlat16_0;
    u_xlat16_14 = (-u_xlat16_4) + 1.0;
    SV_Target2.w = u_xlat16_4;
    u_xlat16_0 = max(u_xlat16_14, 0.00100000005);
    u_xlat16_4 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_4 = u_xlat16_0 * u_xlat16_4;
    u_xlat10_4 = textureLod(_ReflectionCube, u_xlat16_12.xyz, u_xlat16_4);
    u_xlat16_2.y = dot(u_xlat1.xyz, u_xlat16_12.xyz);
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.00100000005, 0.00100000005));
    u_xlat16_22 = u_xlat10_4.w + -1.0;
    u_xlat16_22 = _ReflectionCube_HDR.w * u_xlat16_22 + 1.0;
    u_xlat16_22 = log2(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * _ReflectionCube_HDR.y;
    u_xlat16_22 = exp2(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * _ReflectionCube_HDR.x;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_22);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_22 = (-u_xlat16_0) + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat16_22 = u_xlat16_2.x * -5.55472994 + -6.98316002;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_22;
    u_xlat16_22 = exp2(u_xlat16_22);
    u_xlat16_32 = u_xlat10_20.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_0 * u_xlat16_32;
    u_xlat16_6 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_6 = u_xlat16_6 * 0.5;
    u_xlat16_6 = max(u_xlat16_6, 9.99999975e-05);
    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * -0.5 + 1.0;
    u_xlat16_16.xyz = u_xlat10_3.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_16.xyz = u_xlat10_20.yyy * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_32 = (-u_xlat16_32) + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_35) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_8.xyz) * vec3(u_xlat16_35) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_22) + u_xlat16_9.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_8.xyz;
    u_xlat16_22 = (-u_xlat16_6) + 1.0;
    u_xlat16_32 = u_xlat16_2.y * u_xlat16_22 + u_xlat16_6;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_22 + u_xlat16_6;
    u_xlat16_22 = float(1.0) / u_xlat16_22;
    u_xlat16_32 = float(1.0) / u_xlat16_32;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_32;
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_2.xzw * u_xlat16_2.yyy + u_xlat16_7.xyz;
    SV_Target1.w = 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_16.z;
    SV_Target2.xy = u_xlat16_16.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
mediump vec3 u_xlat16_16;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
mediump float u_xlat16_22;
mediump float u_xlat16_32;
mediump float u_xlat16_35;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat20.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat20.xy + u_xlat0.xy;
    u_xlat20.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat20.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
    u_xlat16_32 = sqrt(u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_32<_FillNormalGaps);
#else
    u_xlatb20 = u_xlat16_32<_FillNormalGaps;
#endif
    u_xlat16_2.xy = (bool(u_xlatb20)) ? vec2(0.0, 0.0) : u_xlat16_2.xy;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
    u_xlat20.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat1.xyz = u_xlat20.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat3.x = vs_TEXCOORD1.w;
    u_xlat3.y = vs_TEXCOORD2.w;
    u_xlat3.z = vs_TEXCOORD3.w;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat20.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat16_12.x = u_xlat16_2.x + u_xlat16_2.x;
    u_xlat16_12.xyz = u_xlat1.xyz * (-u_xlat16_12.xxx) + u_xlat3.xyz;
    u_xlat16_12.xyz = (-u_xlat16_12.xyz);
    u_xlat10_20.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat10_3.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_0 = max(u_xlat10_20.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    u_xlat16_4 = (-u_xlat16_0) + 1.0;
    u_xlat16_14 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_14 * u_xlat16_4 + u_xlat16_0;
    u_xlat16_14 = (-u_xlat16_4) + 1.0;
    SV_Target2.w = u_xlat16_4;
    u_xlat16_0 = max(u_xlat16_14, 0.00100000005);
    u_xlat16_4 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_4 = u_xlat16_0 * u_xlat16_4;
    u_xlat10_4 = textureLod(_ReflectionCube, u_xlat16_12.xyz, u_xlat16_4);
    u_xlat16_2.y = dot(u_xlat1.xyz, u_xlat16_12.xyz);
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.00100000005, 0.00100000005));
    u_xlat16_22 = u_xlat10_4.w + -1.0;
    u_xlat16_22 = _ReflectionCube_HDR.w * u_xlat16_22 + 1.0;
    u_xlat16_22 = log2(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * _ReflectionCube_HDR.y;
    u_xlat16_22 = exp2(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * _ReflectionCube_HDR.x;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_22);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_22 = (-u_xlat16_0) + 1.0;
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat16_22 = u_xlat16_2.x * -5.55472994 + -6.98316002;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_22;
    u_xlat16_22 = exp2(u_xlat16_22);
    u_xlat16_32 = u_xlat10_20.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_0 * u_xlat16_32;
    u_xlat16_6 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_6 = u_xlat16_6 * 0.5;
    u_xlat16_6 = max(u_xlat16_6, 9.99999975e-05);
    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * -0.5 + 1.0;
    u_xlat16_16.xyz = u_xlat10_3.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_16.xyz = u_xlat10_20.yyy * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_32 = (-u_xlat16_32) + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_35) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_8.xyz) * vec3(u_xlat16_35) + vec3(1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_22) + u_xlat16_9.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_8.xyz;
    u_xlat16_22 = (-u_xlat16_6) + 1.0;
    u_xlat16_32 = u_xlat16_2.y * u_xlat16_22 + u_xlat16_6;
    u_xlat16_22 = u_xlat16_2.x * u_xlat16_22 + u_xlat16_6;
    u_xlat16_22 = float(1.0) / u_xlat16_22;
    u_xlat16_32 = float(1.0) / u_xlat16_32;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_32;
    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_5.xyz;
    SV_Target1.xyz = u_xlat16_2.xzw * u_xlat16_2.yyy + u_xlat16_7.xyz;
    SV_Target1.w = 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_16.z;
    SV_Target2.xy = u_xlat16_16.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat8.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat8.xy + u_xlat0.xy;
    u_xlat8.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat8.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
    u_xlat8.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.yyy * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14 = (-u_xlat10_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0 = max(u_xlat10_0.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    SV_Target1.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    SV_Target1.w = 0.0;
    u_xlat16_2.x = (-u_xlat16_0) + 1.0;
    u_xlat16_6 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_6 * u_xlat16_2.x + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat8.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat8.xy + u_xlat0.xy;
    u_xlat8.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat8.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
    u_xlat8.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.yyy * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14 = (-u_xlat10_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0 = max(u_xlat10_0.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    SV_Target1.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    SV_Target1.w = 0.0;
    u_xlat16_2.x = (-u_xlat16_0) + 1.0;
    u_xlat16_6 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_6 * u_xlat16_2.x + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
float u_xlat15;
bvec3 u_xlatb15;
float u_xlat16;
bvec3 u_xlatb16;
float u_xlat17;
bvec3 u_xlatb17;
vec3 u_xlat18;
mediump float u_xlat16_25;
vec2 u_xlat29;
vec2 u_xlat30;
vec2 u_xlat31;
float u_xlat32;
vec2 u_xlat33;
mediump float u_xlat16_39;
float u_xlat42;
mediump float u_xlat16_42;
bool u_xlatb42;
float u_xlat43;
float u_xlat44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_50;
mediump float u_xlat16_51;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb42){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb42){
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb42){
        u_xlat42 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat42 = max(u_xlat42, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat42);
#else
        u_xlatb1.x = 256.0<u_xlat42;
#endif
        u_xlatb15.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat42)).xy;
        u_xlat2 = (u_xlatb15.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb15.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb42){
        u_xlat1.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat29.xy = dFdx(u_xlat1.xy);
        u_xlat1.xy = dFdy(u_xlat1.xy);
        u_xlat42 = dot(u_xlat29.xy, u_xlat29.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat42 = max(u_xlat42, u_xlat1.x);
        u_xlat42 = log2(u_xlat42);
        u_xlat42 = u_xlat42 * 0.5;
        u_xlat42 = max(u_xlat42, 0.0);
        u_xlat42 = u_xlat42 + 1.0;
        u_xlat1.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat42 = u_xlat1.x / u_xlat42;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat42);
#else
        u_xlatb1.x = 256.0<u_xlat42;
#endif
        u_xlatb15.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat42)).xy;
        u_xlat2 = (u_xlatb15.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb15.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb42){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat2.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat2.xyxx).xy;
        u_xlatb42 = u_xlatb2.y || u_xlatb2.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb42)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat3.xy = (bool(u_xlatb42)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat4.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat3.xy = u_xlat2.xy * u_xlat3.xy;
        u_xlat31.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat31.xyxx).xy;
        u_xlatb42 = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb42)) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb42 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb42){
            u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat3.zw = dFdx(u_xlat3.xy);
            u_xlat3.xy = dFdy(u_xlat3.xy);
            u_xlat42 = dot(u_xlat3.zw, u_xlat3.zw);
            u_xlat5.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat42 = max(u_xlat42, u_xlat5.x);
            u_xlat42 = log2(u_xlat42);
            u_xlat42 = u_xlat42 * 0.5;
            u_xlat42 = max(u_xlat42, 0.0);
            u_xlat42 = u_xlat42 + 1.0;
            u_xlat5.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat3 = u_xlat3 * u_xlat5.xxxx;
            u_xlat3 = u_xlat3 / vec4(u_xlat42);
            u_xlat42 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
            u_xlat17 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
            u_xlat45 = sqrt(u_xlat42);
            u_xlat5.x = sqrt(u_xlat17);
            u_xlat42 = inversesqrt(u_xlat42);
            u_xlat42 = u_xlat42 * abs(u_xlat3.z);
            u_xlat17 = inversesqrt(u_xlat17);
            u_xlat3.x = u_xlat17 * abs(u_xlat3.x);
            u_xlat42 = u_xlat42 * u_xlat3.x;
            u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
            u_xlat42 = sqrt(u_xlat42);
            u_xlat3.x = u_xlat45 * u_xlat5.x;
            u_xlat17 = u_xlat42 * u_xlat3.x;
            u_xlat31.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat5.x = fract((-u_xlat31.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = floor(u_xlat5.x);
            u_xlat31.xy = fract(u_xlat31.xy);
            u_xlat31.xy = u_xlat31.xy + vec2(0.5, 0.5);
            u_xlat31.xy = floor(u_xlat31.xy);
            u_xlat5.x = (-u_xlat31.x) + u_xlat5.x;
            u_xlat31.x = u_xlat5.x * u_xlat31.y + u_xlat31.x;
            u_xlat45 = (-u_xlat3.x) * u_xlat42 + 1.0;
            u_xlat5.xyz = (-u_xlat31.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat45) * u_xlat5.xyz + u_xlat31.xxx;
            u_xlatb17.xz = lessThan(vec4(u_xlat17), vec4(1.0, 0.0, 2.0, 2.0)).xz;
            u_xlat7.xyz = u_xlat31.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat42 = u_xlat3.x * u_xlat42 + -4.0;
            u_xlat42 = exp2(u_xlat42);
            u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
            u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
            u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.zyy + u_xlat31.xxx;
            u_xlat3.xzw = (u_xlatb17.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat3.xyz = (u_xlatb17.x) ? u_xlat6.xyz : u_xlat3.xzw;
        } else {
            u_xlat5.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat5.xyxx).xy;
            u_xlatb42 = u_xlatb5.y || u_xlatb5.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb42)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat5.xy = (bool(u_xlatb42)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat5.xy = u_xlat1.xy * u_xlat5.xy;
            u_xlat33.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(u_xlat5.xyxx, u_xlat33.xyxx).xy;
            u_xlatb42 = u_xlatb5.y || u_xlatb5.x;
            u_xlat4.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb42)) ? u_xlat4 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb42 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb42 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb42){
                u_xlat4.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat4.zw = dFdx(u_xlat4.xy);
                u_xlat4.xy = dFdy(u_xlat4.xy);
                u_xlat42 = dot(u_xlat4.zw, u_xlat4.zw);
                u_xlat45 = dot(u_xlat4.xy, u_xlat4.xy);
                u_xlat42 = max(u_xlat42, u_xlat45);
                u_xlat42 = log2(u_xlat42);
                u_xlat42 = u_xlat42 * 0.5;
                u_xlat42 = max(u_xlat42, 0.0);
                u_xlat42 = u_xlat42 + 1.0;
                u_xlat45 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat4 = vec4(u_xlat45) * u_xlat4;
                u_xlat4 = u_xlat4 / vec4(u_xlat42);
                u_xlat42 = dot(abs(u_xlat4.zw), abs(u_xlat4.zw));
                u_xlat45 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                u_xlat18.x = sqrt(u_xlat42);
                u_xlat46 = sqrt(u_xlat45);
                u_xlat42 = inversesqrt(u_xlat42);
                u_xlat42 = u_xlat42 * abs(u_xlat4.z);
                u_xlat45 = inversesqrt(u_xlat45);
                u_xlat45 = u_xlat45 * abs(u_xlat4.x);
                u_xlat42 = u_xlat42 * u_xlat45;
                u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
                u_xlat42 = sqrt(u_xlat42);
                u_xlat45 = u_xlat46 * u_xlat18.x;
                u_xlat4.x = u_xlat42 * u_xlat45;
                u_xlat18.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat46 = fract((-u_xlat18.x));
                u_xlat18.z = u_xlat46 + 0.5;
                u_xlat18.xy = fract(u_xlat18.xy);
                u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                u_xlat18.xyz = floor(u_xlat18.xyz);
                u_xlat46 = (-u_xlat18.x) + u_xlat18.z;
                u_xlat18.x = u_xlat46 * u_xlat18.y + u_xlat18.x;
                u_xlat32 = (-u_xlat45) * u_xlat42 + 1.0;
                u_xlat5.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat32) * u_xlat5.xyz + u_xlat18.xxx;
                u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat42 = u_xlat45 * u_xlat42 + -4.0;
                u_xlat42 = exp2(u_xlat42);
                u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
                u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
                u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.zyy + u_xlat18.xxx;
                u_xlat18.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat3.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat18.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb42 = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb42 = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb42){
                    u_xlat2.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat4.xy = dFdx(u_xlat2.xy);
                    u_xlat2.xy = dFdy(u_xlat2.xy);
                    u_xlat42 = dot(u_xlat4.xy, u_xlat4.xy);
                    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat42 = max(u_xlat42, u_xlat45);
                    u_xlat42 = log2(u_xlat42);
                    u_xlat42 = u_xlat42 * 0.5;
                    u_xlat42 = max(u_xlat42, 0.0);
                    u_xlat42 = u_xlat42 + 1.0;
                    u_xlat45 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat4.xy = vec2(u_xlat45) * u_xlat4.xy;
                    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat45);
                    u_xlat4.xy = u_xlat4.xy / vec2(u_xlat42);
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat42);
                    u_xlat42 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                    u_xlat16 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat45 = sqrt(u_xlat42);
                    u_xlat18.x = sqrt(u_xlat16);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat42 = u_xlat42 * abs(u_xlat4.x);
                    u_xlat16 = inversesqrt(u_xlat16);
                    u_xlat2.x = u_xlat16 * abs(u_xlat2.x);
                    u_xlat42 = u_xlat42 * u_xlat2.x;
                    u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
                    u_xlat42 = sqrt(u_xlat42);
                    u_xlat2.x = u_xlat45 * u_xlat18.x;
                    u_xlat16 = u_xlat42 * u_xlat2.x;
                    u_xlat30.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat45 = fract((-u_xlat30.x));
                    u_xlat45 = u_xlat45 + 0.5;
                    u_xlat45 = floor(u_xlat45);
                    u_xlat30.xy = fract(u_xlat30.xy);
                    u_xlat30.xy = u_xlat30.xy + vec2(0.5, 0.5);
                    u_xlat30.xy = floor(u_xlat30.xy);
                    u_xlat45 = (-u_xlat30.x) + u_xlat45;
                    u_xlat30.x = u_xlat45 * u_xlat30.y + u_xlat30.x;
                    u_xlat44 = (-u_xlat2.x) * u_xlat42 + 1.0;
                    u_xlat4.xyz = (-u_xlat30.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat44) * u_xlat4.xyz + u_xlat30.xxx;
                    u_xlatb16.xz = lessThan(vec4(u_xlat16), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat6.xyz = u_xlat30.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat42 = u_xlat2.x * u_xlat42 + -4.0;
                    u_xlat42 = exp2(u_xlat42);
                    u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
                    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
                    u_xlat4.xyz = vec3(u_xlat42) * u_xlat4.zyy + u_xlat30.xxx;
                    u_xlat2.xzw = (u_xlatb16.z) ? u_xlat6.xyz : u_xlat4.xyz;
                    u_xlat3.xyz = (u_xlatb16.x) ? u_xlat5.xyz : u_xlat2.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat2.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat42 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat30.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat42 = max(u_xlat42, u_xlat30.x);
                    u_xlat42 = log2(u_xlat42);
                    u_xlat42 = u_xlat42 * 0.5;
                    u_xlat42 = max(u_xlat42, 0.0);
                    u_xlat42 = u_xlat42 + 1.0;
                    u_xlat30.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat30.xx * u_xlat2.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat30.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat42);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat42);
                    u_xlat42 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat15 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat16 = sqrt(u_xlat42);
                    u_xlat30.x = sqrt(u_xlat15);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat42 = u_xlat42 * abs(u_xlat2.x);
                    u_xlat15 = inversesqrt(u_xlat15);
                    u_xlat1.x = u_xlat15 * abs(u_xlat1.x);
                    u_xlat42 = u_xlat42 * u_xlat1.x;
                    u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
                    u_xlat42 = sqrt(u_xlat42);
                    u_xlat1.x = u_xlat30.x * u_xlat16;
                    u_xlat15 = u_xlat42 * u_xlat1.x;
                    u_xlat29.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat29.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat29.xy = fract(u_xlat29.xy);
                    u_xlat29.xy = u_xlat29.xy + vec2(0.5, 0.5);
                    u_xlat29.xy = floor(u_xlat29.xy);
                    u_xlat2.x = (-u_xlat29.x) + u_xlat2.x;
                    u_xlat29.x = u_xlat2.x * u_xlat29.y + u_xlat29.x;
                    u_xlat43 = (-u_xlat1.x) * u_xlat42 + 1.0;
                    u_xlat2.xyz = (-u_xlat29.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat43) * u_xlat2.xyz + u_xlat29.xxx;
                    u_xlatb15.xz = lessThan(vec4(u_xlat15), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat29.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat42 = u_xlat1.x * u_xlat42 + -4.0;
                    u_xlat42 = exp2(u_xlat42);
                    u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
                    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat42) * u_xlat2.zyy + u_xlat29.xxx;
                    u_xlat1.xzw = (u_xlatb15.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat3.xyz = (u_xlatb15.x) ? u_xlat4.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat3.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb42 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb42){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb42 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb42){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_42 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_42 = min(u_xlat16_42, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_50 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
    u_xlat16_50 = sqrt(u_xlat16_50);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(u_xlat16_50<_FillNormalGaps);
#else
    u_xlatb1.x = u_xlat16_50<_FillNormalGaps;
#endif
    u_xlat16_9.xy = (u_xlatb1.x) ? vec2(0.0, 0.0) : u_xlat16_9.xy;
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat44 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat44 = inversesqrt(u_xlat44);
    u_xlat2.xyz = vec3(u_xlat44) * u_xlat2.xyz;
    u_xlat16_50 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_42) + 1.0;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_9.x + u_xlat16_42;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat16_1.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_51 = (-u_xlat16_50) + 1.0;
    u_xlat16_0 = max(u_xlat16_51, 0.00100000005);
    u_xlat16_51 = u_xlat16_0 * u_xlat16_1.y;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * -0.5 + 1.0;
    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_9.xyz;
    u_xlat16_52 = dot(u_xlat2.xyz, u_xlat1.xzw);
    u_xlat16_11.x = u_xlat16_52 + u_xlat16_52;
    u_xlat16_11.xyz = u_xlat1.xzw * (-u_xlat16_11.xxx) + u_xlat2.xyz;
    u_xlat16_11.xyz = (-u_xlat16_11.xyz);
    u_xlat16_53 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_53 = u_xlat16_0 * u_xlat16_53;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_11.xyz, u_xlat16_53);
    u_xlat16_53 = u_xlat10_2.w + -1.0;
    u_xlat16_53 = _ReflectionCube_HDR.w * u_xlat16_53 + 1.0;
    u_xlat16_53 = log2(u_xlat16_53);
    u_xlat16_53 = u_xlat16_53 * _ReflectionCube_HDR.y;
    u_xlat16_53 = exp2(u_xlat16_53);
    u_xlat16_53 = u_xlat16_53 * _ReflectionCube_HDR.x;
    u_xlat16_12.xyz = u_xlat10_2.xyz * vec3(u_xlat16_53);
    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_12.xyz;
    u_xlat16_53 = (-u_xlat16_0) + 1.0;
    u_xlat16_12.xyz = vec3(u_xlat16_53) * u_xlat16_12.xyz;
    u_xlat16_52 = max(u_xlat16_52, 0.00100000005);
    u_xlat16_11.x = dot(u_xlat1.xzw, u_xlat16_11.xyz);
    u_xlat16_11.x = max(u_xlat16_11.x, 0.00100000005);
    u_xlat16_25 = u_xlat16_52 * -5.55472994 + -6.98316002;
    u_xlat16_25 = u_xlat16_52 * u_xlat16_25;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_13.xyz = (-u_xlat16_9.xyz) * vec3(u_xlat16_51) + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_13.xyz * vec3(u_xlat16_25) + u_xlat16_10.xyz;
    u_xlat16_51 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_51 = u_xlat16_51 * 0.5;
    u_xlat16_51 = max(u_xlat16_51, 9.99999975e-05);
    u_xlat16_25 = (-u_xlat16_51) + 1.0;
    u_xlat16_39 = u_xlat16_11.x * u_xlat16_25 + u_xlat16_51;
    u_xlat16_39 = float(1.0) / u_xlat16_39;
    u_xlat16_51 = u_xlat16_52 * u_xlat16_25 + u_xlat16_51;
    u_xlat16_51 = float(1.0) / u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_39;
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_10.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_52) * u_xlat16_10.xyz;
    u_xlat16_51 = (-u_xlat16_1.y) + 1.0;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_51);
    SV_Target1.xyz = u_xlat16_10.xyz * u_xlat16_11.xxx + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    SV_Target2.w = u_xlat16_50;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
float u_xlat15;
bvec3 u_xlatb15;
float u_xlat16;
bvec3 u_xlatb16;
float u_xlat17;
bvec3 u_xlatb17;
vec3 u_xlat18;
mediump float u_xlat16_25;
vec2 u_xlat29;
vec2 u_xlat30;
vec2 u_xlat31;
float u_xlat32;
vec2 u_xlat33;
mediump float u_xlat16_39;
float u_xlat42;
mediump float u_xlat16_42;
bool u_xlatb42;
float u_xlat43;
float u_xlat44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_50;
mediump float u_xlat16_51;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb42){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb42){
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb42){
        u_xlat42 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat42 = max(u_xlat42, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat42);
#else
        u_xlatb1.x = 256.0<u_xlat42;
#endif
        u_xlatb15.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat42)).xy;
        u_xlat2 = (u_xlatb15.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb15.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb42){
        u_xlat1.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat29.xy = dFdx(u_xlat1.xy);
        u_xlat1.xy = dFdy(u_xlat1.xy);
        u_xlat42 = dot(u_xlat29.xy, u_xlat29.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat42 = max(u_xlat42, u_xlat1.x);
        u_xlat42 = log2(u_xlat42);
        u_xlat42 = u_xlat42 * 0.5;
        u_xlat42 = max(u_xlat42, 0.0);
        u_xlat42 = u_xlat42 + 1.0;
        u_xlat1.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat42 = u_xlat1.x / u_xlat42;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat42);
#else
        u_xlatb1.x = 256.0<u_xlat42;
#endif
        u_xlatb15.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat42)).xy;
        u_xlat2 = (u_xlatb15.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb15.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb42){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat2.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat2.xyxx).xy;
        u_xlatb42 = u_xlatb2.y || u_xlatb2.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb42)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat3.xy = (bool(u_xlatb42)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat4.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat3.xy = u_xlat2.xy * u_xlat3.xy;
        u_xlat31.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat31.xyxx).xy;
        u_xlatb42 = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb42)) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb42 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb42){
            u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat3.zw = dFdx(u_xlat3.xy);
            u_xlat3.xy = dFdy(u_xlat3.xy);
            u_xlat42 = dot(u_xlat3.zw, u_xlat3.zw);
            u_xlat5.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat42 = max(u_xlat42, u_xlat5.x);
            u_xlat42 = log2(u_xlat42);
            u_xlat42 = u_xlat42 * 0.5;
            u_xlat42 = max(u_xlat42, 0.0);
            u_xlat42 = u_xlat42 + 1.0;
            u_xlat5.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat3 = u_xlat3 * u_xlat5.xxxx;
            u_xlat3 = u_xlat3 / vec4(u_xlat42);
            u_xlat42 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
            u_xlat17 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
            u_xlat45 = sqrt(u_xlat42);
            u_xlat5.x = sqrt(u_xlat17);
            u_xlat42 = inversesqrt(u_xlat42);
            u_xlat42 = u_xlat42 * abs(u_xlat3.z);
            u_xlat17 = inversesqrt(u_xlat17);
            u_xlat3.x = u_xlat17 * abs(u_xlat3.x);
            u_xlat42 = u_xlat42 * u_xlat3.x;
            u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
            u_xlat42 = sqrt(u_xlat42);
            u_xlat3.x = u_xlat45 * u_xlat5.x;
            u_xlat17 = u_xlat42 * u_xlat3.x;
            u_xlat31.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat5.x = fract((-u_xlat31.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = floor(u_xlat5.x);
            u_xlat31.xy = fract(u_xlat31.xy);
            u_xlat31.xy = u_xlat31.xy + vec2(0.5, 0.5);
            u_xlat31.xy = floor(u_xlat31.xy);
            u_xlat5.x = (-u_xlat31.x) + u_xlat5.x;
            u_xlat31.x = u_xlat5.x * u_xlat31.y + u_xlat31.x;
            u_xlat45 = (-u_xlat3.x) * u_xlat42 + 1.0;
            u_xlat5.xyz = (-u_xlat31.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat45) * u_xlat5.xyz + u_xlat31.xxx;
            u_xlatb17.xz = lessThan(vec4(u_xlat17), vec4(1.0, 0.0, 2.0, 2.0)).xz;
            u_xlat7.xyz = u_xlat31.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat42 = u_xlat3.x * u_xlat42 + -4.0;
            u_xlat42 = exp2(u_xlat42);
            u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
            u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
            u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.zyy + u_xlat31.xxx;
            u_xlat3.xzw = (u_xlatb17.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat3.xyz = (u_xlatb17.x) ? u_xlat6.xyz : u_xlat3.xzw;
        } else {
            u_xlat5.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat5.xyxx).xy;
            u_xlatb42 = u_xlatb5.y || u_xlatb5.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb42)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat5.xy = (bool(u_xlatb42)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat5.xy = u_xlat1.xy * u_xlat5.xy;
            u_xlat33.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(u_xlat5.xyxx, u_xlat33.xyxx).xy;
            u_xlatb42 = u_xlatb5.y || u_xlatb5.x;
            u_xlat4.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb42)) ? u_xlat4 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb42 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb42 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb42){
                u_xlat4.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat4.zw = dFdx(u_xlat4.xy);
                u_xlat4.xy = dFdy(u_xlat4.xy);
                u_xlat42 = dot(u_xlat4.zw, u_xlat4.zw);
                u_xlat45 = dot(u_xlat4.xy, u_xlat4.xy);
                u_xlat42 = max(u_xlat42, u_xlat45);
                u_xlat42 = log2(u_xlat42);
                u_xlat42 = u_xlat42 * 0.5;
                u_xlat42 = max(u_xlat42, 0.0);
                u_xlat42 = u_xlat42 + 1.0;
                u_xlat45 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat4 = vec4(u_xlat45) * u_xlat4;
                u_xlat4 = u_xlat4 / vec4(u_xlat42);
                u_xlat42 = dot(abs(u_xlat4.zw), abs(u_xlat4.zw));
                u_xlat45 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                u_xlat18.x = sqrt(u_xlat42);
                u_xlat46 = sqrt(u_xlat45);
                u_xlat42 = inversesqrt(u_xlat42);
                u_xlat42 = u_xlat42 * abs(u_xlat4.z);
                u_xlat45 = inversesqrt(u_xlat45);
                u_xlat45 = u_xlat45 * abs(u_xlat4.x);
                u_xlat42 = u_xlat42 * u_xlat45;
                u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
                u_xlat42 = sqrt(u_xlat42);
                u_xlat45 = u_xlat46 * u_xlat18.x;
                u_xlat4.x = u_xlat42 * u_xlat45;
                u_xlat18.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat46 = fract((-u_xlat18.x));
                u_xlat18.z = u_xlat46 + 0.5;
                u_xlat18.xy = fract(u_xlat18.xy);
                u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                u_xlat18.xyz = floor(u_xlat18.xyz);
                u_xlat46 = (-u_xlat18.x) + u_xlat18.z;
                u_xlat18.x = u_xlat46 * u_xlat18.y + u_xlat18.x;
                u_xlat32 = (-u_xlat45) * u_xlat42 + 1.0;
                u_xlat5.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat32) * u_xlat5.xyz + u_xlat18.xxx;
                u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat42 = u_xlat45 * u_xlat42 + -4.0;
                u_xlat42 = exp2(u_xlat42);
                u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
                u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
                u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.zyy + u_xlat18.xxx;
                u_xlat18.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat3.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat18.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb42 = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb42 = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb42){
                    u_xlat2.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat4.xy = dFdx(u_xlat2.xy);
                    u_xlat2.xy = dFdy(u_xlat2.xy);
                    u_xlat42 = dot(u_xlat4.xy, u_xlat4.xy);
                    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat42 = max(u_xlat42, u_xlat45);
                    u_xlat42 = log2(u_xlat42);
                    u_xlat42 = u_xlat42 * 0.5;
                    u_xlat42 = max(u_xlat42, 0.0);
                    u_xlat42 = u_xlat42 + 1.0;
                    u_xlat45 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat4.xy = vec2(u_xlat45) * u_xlat4.xy;
                    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat45);
                    u_xlat4.xy = u_xlat4.xy / vec2(u_xlat42);
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat42);
                    u_xlat42 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                    u_xlat16 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat45 = sqrt(u_xlat42);
                    u_xlat18.x = sqrt(u_xlat16);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat42 = u_xlat42 * abs(u_xlat4.x);
                    u_xlat16 = inversesqrt(u_xlat16);
                    u_xlat2.x = u_xlat16 * abs(u_xlat2.x);
                    u_xlat42 = u_xlat42 * u_xlat2.x;
                    u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
                    u_xlat42 = sqrt(u_xlat42);
                    u_xlat2.x = u_xlat45 * u_xlat18.x;
                    u_xlat16 = u_xlat42 * u_xlat2.x;
                    u_xlat30.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat45 = fract((-u_xlat30.x));
                    u_xlat45 = u_xlat45 + 0.5;
                    u_xlat45 = floor(u_xlat45);
                    u_xlat30.xy = fract(u_xlat30.xy);
                    u_xlat30.xy = u_xlat30.xy + vec2(0.5, 0.5);
                    u_xlat30.xy = floor(u_xlat30.xy);
                    u_xlat45 = (-u_xlat30.x) + u_xlat45;
                    u_xlat30.x = u_xlat45 * u_xlat30.y + u_xlat30.x;
                    u_xlat44 = (-u_xlat2.x) * u_xlat42 + 1.0;
                    u_xlat4.xyz = (-u_xlat30.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat44) * u_xlat4.xyz + u_xlat30.xxx;
                    u_xlatb16.xz = lessThan(vec4(u_xlat16), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat6.xyz = u_xlat30.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat42 = u_xlat2.x * u_xlat42 + -4.0;
                    u_xlat42 = exp2(u_xlat42);
                    u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
                    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
                    u_xlat4.xyz = vec3(u_xlat42) * u_xlat4.zyy + u_xlat30.xxx;
                    u_xlat2.xzw = (u_xlatb16.z) ? u_xlat6.xyz : u_xlat4.xyz;
                    u_xlat3.xyz = (u_xlatb16.x) ? u_xlat5.xyz : u_xlat2.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat2.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat42 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat30.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat42 = max(u_xlat42, u_xlat30.x);
                    u_xlat42 = log2(u_xlat42);
                    u_xlat42 = u_xlat42 * 0.5;
                    u_xlat42 = max(u_xlat42, 0.0);
                    u_xlat42 = u_xlat42 + 1.0;
                    u_xlat30.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat30.xx * u_xlat2.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat30.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat42);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat42);
                    u_xlat42 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat15 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat16 = sqrt(u_xlat42);
                    u_xlat30.x = sqrt(u_xlat15);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat42 = u_xlat42 * abs(u_xlat2.x);
                    u_xlat15 = inversesqrt(u_xlat15);
                    u_xlat1.x = u_xlat15 * abs(u_xlat1.x);
                    u_xlat42 = u_xlat42 * u_xlat1.x;
                    u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
                    u_xlat42 = sqrt(u_xlat42);
                    u_xlat1.x = u_xlat30.x * u_xlat16;
                    u_xlat15 = u_xlat42 * u_xlat1.x;
                    u_xlat29.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat29.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat29.xy = fract(u_xlat29.xy);
                    u_xlat29.xy = u_xlat29.xy + vec2(0.5, 0.5);
                    u_xlat29.xy = floor(u_xlat29.xy);
                    u_xlat2.x = (-u_xlat29.x) + u_xlat2.x;
                    u_xlat29.x = u_xlat2.x * u_xlat29.y + u_xlat29.x;
                    u_xlat43 = (-u_xlat1.x) * u_xlat42 + 1.0;
                    u_xlat2.xyz = (-u_xlat29.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat43) * u_xlat2.xyz + u_xlat29.xxx;
                    u_xlatb15.xz = lessThan(vec4(u_xlat15), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat29.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat42 = u_xlat1.x * u_xlat42 + -4.0;
                    u_xlat42 = exp2(u_xlat42);
                    u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
                    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat42) * u_xlat2.zyy + u_xlat29.xxx;
                    u_xlat1.xzw = (u_xlatb15.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat3.xyz = (u_xlatb15.x) ? u_xlat4.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat3.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb42 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb42){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb42 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb42){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_42 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_42 = min(u_xlat16_42, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_50 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
    u_xlat16_50 = sqrt(u_xlat16_50);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(u_xlat16_50<_FillNormalGaps);
#else
    u_xlatb1.x = u_xlat16_50<_FillNormalGaps;
#endif
    u_xlat16_9.xy = (u_xlatb1.x) ? vec2(0.0, 0.0) : u_xlat16_9.xy;
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat44 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat44 = inversesqrt(u_xlat44);
    u_xlat2.xyz = vec3(u_xlat44) * u_xlat2.xyz;
    u_xlat16_50 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_42) + 1.0;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_9.x + u_xlat16_42;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat16_1.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_51 = (-u_xlat16_50) + 1.0;
    u_xlat16_0 = max(u_xlat16_51, 0.00100000005);
    u_xlat16_51 = u_xlat16_0 * u_xlat16_1.y;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * -0.5 + 1.0;
    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_9.xyz;
    u_xlat16_52 = dot(u_xlat2.xyz, u_xlat1.xzw);
    u_xlat16_11.x = u_xlat16_52 + u_xlat16_52;
    u_xlat16_11.xyz = u_xlat1.xzw * (-u_xlat16_11.xxx) + u_xlat2.xyz;
    u_xlat16_11.xyz = (-u_xlat16_11.xyz);
    u_xlat16_53 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_53 = u_xlat16_0 * u_xlat16_53;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_11.xyz, u_xlat16_53);
    u_xlat16_53 = u_xlat10_2.w + -1.0;
    u_xlat16_53 = _ReflectionCube_HDR.w * u_xlat16_53 + 1.0;
    u_xlat16_53 = log2(u_xlat16_53);
    u_xlat16_53 = u_xlat16_53 * _ReflectionCube_HDR.y;
    u_xlat16_53 = exp2(u_xlat16_53);
    u_xlat16_53 = u_xlat16_53 * _ReflectionCube_HDR.x;
    u_xlat16_12.xyz = u_xlat10_2.xyz * vec3(u_xlat16_53);
    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_12.xyz;
    u_xlat16_53 = (-u_xlat16_0) + 1.0;
    u_xlat16_12.xyz = vec3(u_xlat16_53) * u_xlat16_12.xyz;
    u_xlat16_52 = max(u_xlat16_52, 0.00100000005);
    u_xlat16_11.x = dot(u_xlat1.xzw, u_xlat16_11.xyz);
    u_xlat16_11.x = max(u_xlat16_11.x, 0.00100000005);
    u_xlat16_25 = u_xlat16_52 * -5.55472994 + -6.98316002;
    u_xlat16_25 = u_xlat16_52 * u_xlat16_25;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_13.xyz = (-u_xlat16_9.xyz) * vec3(u_xlat16_51) + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_13.xyz * vec3(u_xlat16_25) + u_xlat16_10.xyz;
    u_xlat16_51 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_51 = u_xlat16_51 * 0.5;
    u_xlat16_51 = max(u_xlat16_51, 9.99999975e-05);
    u_xlat16_25 = (-u_xlat16_51) + 1.0;
    u_xlat16_39 = u_xlat16_11.x * u_xlat16_25 + u_xlat16_51;
    u_xlat16_39 = float(1.0) / u_xlat16_39;
    u_xlat16_51 = u_xlat16_52 * u_xlat16_25 + u_xlat16_51;
    u_xlat16_51 = float(1.0) / u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_39;
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_10.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_52) * u_xlat16_10.xyz;
    u_xlat16_51 = (-u_xlat16_1.y) + 1.0;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_51);
    SV_Target1.xyz = u_xlat16_10.xyz * u_xlat16_11.xxx + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    SV_Target2.w = u_xlat16_50;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
float u_xlat15;
bvec3 u_xlatb15;
float u_xlat16;
bvec3 u_xlatb16;
float u_xlat17;
bvec3 u_xlatb17;
vec3 u_xlat18;
mediump float u_xlat16_25;
vec2 u_xlat29;
vec2 u_xlat30;
vec2 u_xlat31;
float u_xlat32;
vec2 u_xlat33;
mediump float u_xlat16_39;
float u_xlat42;
mediump float u_xlat16_42;
bool u_xlatb42;
float u_xlat43;
float u_xlat44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_50;
mediump float u_xlat16_51;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb42){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb42){
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb42){
        u_xlat42 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat42 = max(u_xlat42, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat42);
#else
        u_xlatb1.x = 256.0<u_xlat42;
#endif
        u_xlatb15.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat42)).xy;
        u_xlat2 = (u_xlatb15.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb15.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb42){
        u_xlat1.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat29.xy = dFdx(u_xlat1.xy);
        u_xlat1.xy = dFdy(u_xlat1.xy);
        u_xlat42 = dot(u_xlat29.xy, u_xlat29.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat42 = max(u_xlat42, u_xlat1.x);
        u_xlat42 = log2(u_xlat42);
        u_xlat42 = u_xlat42 * 0.5;
        u_xlat42 = max(u_xlat42, 0.0);
        u_xlat42 = u_xlat42 + 1.0;
        u_xlat1.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat42 = u_xlat1.x / u_xlat42;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat42);
#else
        u_xlatb1.x = 256.0<u_xlat42;
#endif
        u_xlatb15.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat42)).xy;
        u_xlat2 = (u_xlatb15.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb15.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb42){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat2.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat2.xyxx).xy;
        u_xlatb42 = u_xlatb2.y || u_xlatb2.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb42)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat3.xy = (bool(u_xlatb42)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat4.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat3.xy = u_xlat2.xy * u_xlat3.xy;
        u_xlat31.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat31.xyxx).xy;
        u_xlatb42 = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb42)) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb42 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb42){
            u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat3.zw = dFdx(u_xlat3.xy);
            u_xlat3.xy = dFdy(u_xlat3.xy);
            u_xlat42 = dot(u_xlat3.zw, u_xlat3.zw);
            u_xlat5.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat42 = max(u_xlat42, u_xlat5.x);
            u_xlat42 = log2(u_xlat42);
            u_xlat42 = u_xlat42 * 0.5;
            u_xlat42 = max(u_xlat42, 0.0);
            u_xlat42 = u_xlat42 + 1.0;
            u_xlat5.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat3 = u_xlat3 * u_xlat5.xxxx;
            u_xlat3 = u_xlat3 / vec4(u_xlat42);
            u_xlat42 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
            u_xlat17 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
            u_xlat45 = sqrt(u_xlat42);
            u_xlat5.x = sqrt(u_xlat17);
            u_xlat42 = inversesqrt(u_xlat42);
            u_xlat42 = u_xlat42 * abs(u_xlat3.z);
            u_xlat17 = inversesqrt(u_xlat17);
            u_xlat3.x = u_xlat17 * abs(u_xlat3.x);
            u_xlat42 = u_xlat42 * u_xlat3.x;
            u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
            u_xlat42 = sqrt(u_xlat42);
            u_xlat3.x = u_xlat45 * u_xlat5.x;
            u_xlat17 = u_xlat42 * u_xlat3.x;
            u_xlat31.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat5.x = fract((-u_xlat31.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = floor(u_xlat5.x);
            u_xlat31.xy = fract(u_xlat31.xy);
            u_xlat31.xy = u_xlat31.xy + vec2(0.5, 0.5);
            u_xlat31.xy = floor(u_xlat31.xy);
            u_xlat5.x = (-u_xlat31.x) + u_xlat5.x;
            u_xlat31.x = u_xlat5.x * u_xlat31.y + u_xlat31.x;
            u_xlat45 = (-u_xlat3.x) * u_xlat42 + 1.0;
            u_xlat5.xyz = (-u_xlat31.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat45) * u_xlat5.xyz + u_xlat31.xxx;
            u_xlatb17.xz = lessThan(vec4(u_xlat17), vec4(1.0, 0.0, 2.0, 2.0)).xz;
            u_xlat7.xyz = u_xlat31.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat42 = u_xlat3.x * u_xlat42 + -4.0;
            u_xlat42 = exp2(u_xlat42);
            u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
            u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
            u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.zyy + u_xlat31.xxx;
            u_xlat3.xzw = (u_xlatb17.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat3.xyz = (u_xlatb17.x) ? u_xlat6.xyz : u_xlat3.xzw;
        } else {
            u_xlat5.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat5.xyxx).xy;
            u_xlatb42 = u_xlatb5.y || u_xlatb5.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb42)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat5.xy = (bool(u_xlatb42)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat5.xy = u_xlat1.xy * u_xlat5.xy;
            u_xlat33.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(u_xlat5.xyxx, u_xlat33.xyxx).xy;
            u_xlatb42 = u_xlatb5.y || u_xlatb5.x;
            u_xlat4.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb42)) ? u_xlat4 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb42 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb42 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb42){
                u_xlat4.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat4.zw = dFdx(u_xlat4.xy);
                u_xlat4.xy = dFdy(u_xlat4.xy);
                u_xlat42 = dot(u_xlat4.zw, u_xlat4.zw);
                u_xlat45 = dot(u_xlat4.xy, u_xlat4.xy);
                u_xlat42 = max(u_xlat42, u_xlat45);
                u_xlat42 = log2(u_xlat42);
                u_xlat42 = u_xlat42 * 0.5;
                u_xlat42 = max(u_xlat42, 0.0);
                u_xlat42 = u_xlat42 + 1.0;
                u_xlat45 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat4 = vec4(u_xlat45) * u_xlat4;
                u_xlat4 = u_xlat4 / vec4(u_xlat42);
                u_xlat42 = dot(abs(u_xlat4.zw), abs(u_xlat4.zw));
                u_xlat45 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                u_xlat18.x = sqrt(u_xlat42);
                u_xlat46 = sqrt(u_xlat45);
                u_xlat42 = inversesqrt(u_xlat42);
                u_xlat42 = u_xlat42 * abs(u_xlat4.z);
                u_xlat45 = inversesqrt(u_xlat45);
                u_xlat45 = u_xlat45 * abs(u_xlat4.x);
                u_xlat42 = u_xlat42 * u_xlat45;
                u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
                u_xlat42 = sqrt(u_xlat42);
                u_xlat45 = u_xlat46 * u_xlat18.x;
                u_xlat4.x = u_xlat42 * u_xlat45;
                u_xlat18.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat46 = fract((-u_xlat18.x));
                u_xlat18.z = u_xlat46 + 0.5;
                u_xlat18.xy = fract(u_xlat18.xy);
                u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                u_xlat18.xyz = floor(u_xlat18.xyz);
                u_xlat46 = (-u_xlat18.x) + u_xlat18.z;
                u_xlat18.x = u_xlat46 * u_xlat18.y + u_xlat18.x;
                u_xlat32 = (-u_xlat45) * u_xlat42 + 1.0;
                u_xlat5.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat32) * u_xlat5.xyz + u_xlat18.xxx;
                u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat42 = u_xlat45 * u_xlat42 + -4.0;
                u_xlat42 = exp2(u_xlat42);
                u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
                u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
                u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.zyy + u_xlat18.xxx;
                u_xlat18.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat3.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat18.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb42 = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb42 = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb42){
                    u_xlat2.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat4.xy = dFdx(u_xlat2.xy);
                    u_xlat2.xy = dFdy(u_xlat2.xy);
                    u_xlat42 = dot(u_xlat4.xy, u_xlat4.xy);
                    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat42 = max(u_xlat42, u_xlat45);
                    u_xlat42 = log2(u_xlat42);
                    u_xlat42 = u_xlat42 * 0.5;
                    u_xlat42 = max(u_xlat42, 0.0);
                    u_xlat42 = u_xlat42 + 1.0;
                    u_xlat45 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat4.xy = vec2(u_xlat45) * u_xlat4.xy;
                    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat45);
                    u_xlat4.xy = u_xlat4.xy / vec2(u_xlat42);
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat42);
                    u_xlat42 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                    u_xlat16 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat45 = sqrt(u_xlat42);
                    u_xlat18.x = sqrt(u_xlat16);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat42 = u_xlat42 * abs(u_xlat4.x);
                    u_xlat16 = inversesqrt(u_xlat16);
                    u_xlat2.x = u_xlat16 * abs(u_xlat2.x);
                    u_xlat42 = u_xlat42 * u_xlat2.x;
                    u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
                    u_xlat42 = sqrt(u_xlat42);
                    u_xlat2.x = u_xlat45 * u_xlat18.x;
                    u_xlat16 = u_xlat42 * u_xlat2.x;
                    u_xlat30.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat45 = fract((-u_xlat30.x));
                    u_xlat45 = u_xlat45 + 0.5;
                    u_xlat45 = floor(u_xlat45);
                    u_xlat30.xy = fract(u_xlat30.xy);
                    u_xlat30.xy = u_xlat30.xy + vec2(0.5, 0.5);
                    u_xlat30.xy = floor(u_xlat30.xy);
                    u_xlat45 = (-u_xlat30.x) + u_xlat45;
                    u_xlat30.x = u_xlat45 * u_xlat30.y + u_xlat30.x;
                    u_xlat44 = (-u_xlat2.x) * u_xlat42 + 1.0;
                    u_xlat4.xyz = (-u_xlat30.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat44) * u_xlat4.xyz + u_xlat30.xxx;
                    u_xlatb16.xz = lessThan(vec4(u_xlat16), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat6.xyz = u_xlat30.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat42 = u_xlat2.x * u_xlat42 + -4.0;
                    u_xlat42 = exp2(u_xlat42);
                    u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
                    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
                    u_xlat4.xyz = vec3(u_xlat42) * u_xlat4.zyy + u_xlat30.xxx;
                    u_xlat2.xzw = (u_xlatb16.z) ? u_xlat6.xyz : u_xlat4.xyz;
                    u_xlat3.xyz = (u_xlatb16.x) ? u_xlat5.xyz : u_xlat2.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat2.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat42 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat30.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat42 = max(u_xlat42, u_xlat30.x);
                    u_xlat42 = log2(u_xlat42);
                    u_xlat42 = u_xlat42 * 0.5;
                    u_xlat42 = max(u_xlat42, 0.0);
                    u_xlat42 = u_xlat42 + 1.0;
                    u_xlat30.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat30.xx * u_xlat2.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat30.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat42);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat42);
                    u_xlat42 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat15 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat16 = sqrt(u_xlat42);
                    u_xlat30.x = sqrt(u_xlat15);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat42 = u_xlat42 * abs(u_xlat2.x);
                    u_xlat15 = inversesqrt(u_xlat15);
                    u_xlat1.x = u_xlat15 * abs(u_xlat1.x);
                    u_xlat42 = u_xlat42 * u_xlat1.x;
                    u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
                    u_xlat42 = sqrt(u_xlat42);
                    u_xlat1.x = u_xlat30.x * u_xlat16;
                    u_xlat15 = u_xlat42 * u_xlat1.x;
                    u_xlat29.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat29.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat29.xy = fract(u_xlat29.xy);
                    u_xlat29.xy = u_xlat29.xy + vec2(0.5, 0.5);
                    u_xlat29.xy = floor(u_xlat29.xy);
                    u_xlat2.x = (-u_xlat29.x) + u_xlat2.x;
                    u_xlat29.x = u_xlat2.x * u_xlat29.y + u_xlat29.x;
                    u_xlat43 = (-u_xlat1.x) * u_xlat42 + 1.0;
                    u_xlat2.xyz = (-u_xlat29.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat43) * u_xlat2.xyz + u_xlat29.xxx;
                    u_xlatb15.xz = lessThan(vec4(u_xlat15), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat29.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat42 = u_xlat1.x * u_xlat42 + -4.0;
                    u_xlat42 = exp2(u_xlat42);
                    u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
                    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat42) * u_xlat2.zyy + u_xlat29.xxx;
                    u_xlat1.xzw = (u_xlatb15.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat3.xyz = (u_xlatb15.x) ? u_xlat4.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat3.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb42 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb42){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb42 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb42){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_42 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_42 = min(u_xlat16_42, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_50 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
    u_xlat16_50 = sqrt(u_xlat16_50);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(u_xlat16_50<_FillNormalGaps);
#else
    u_xlatb1.x = u_xlat16_50<_FillNormalGaps;
#endif
    u_xlat16_9.xy = (u_xlatb1.x) ? vec2(0.0, 0.0) : u_xlat16_9.xy;
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat44 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat44 = inversesqrt(u_xlat44);
    u_xlat2.xyz = vec3(u_xlat44) * u_xlat2.xyz;
    u_xlat16_50 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_42) + 1.0;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_9.x + u_xlat16_42;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat16_1.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_51 = (-u_xlat16_50) + 1.0;
    u_xlat16_0 = max(u_xlat16_51, 0.00100000005);
    u_xlat16_51 = u_xlat16_0 * u_xlat16_1.y;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * -0.5 + 1.0;
    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_9.xyz;
    u_xlat16_52 = dot(u_xlat2.xyz, u_xlat1.xzw);
    u_xlat16_11.x = u_xlat16_52 + u_xlat16_52;
    u_xlat16_11.xyz = u_xlat1.xzw * (-u_xlat16_11.xxx) + u_xlat2.xyz;
    u_xlat16_11.xyz = (-u_xlat16_11.xyz);
    u_xlat16_53 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_53 = u_xlat16_0 * u_xlat16_53;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_11.xyz, u_xlat16_53);
    u_xlat16_53 = u_xlat10_2.w + -1.0;
    u_xlat16_53 = _ReflectionCube_HDR.w * u_xlat16_53 + 1.0;
    u_xlat16_53 = log2(u_xlat16_53);
    u_xlat16_53 = u_xlat16_53 * _ReflectionCube_HDR.y;
    u_xlat16_53 = exp2(u_xlat16_53);
    u_xlat16_53 = u_xlat16_53 * _ReflectionCube_HDR.x;
    u_xlat16_12.xyz = u_xlat10_2.xyz * vec3(u_xlat16_53);
    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_12.xyz;
    u_xlat16_53 = (-u_xlat16_0) + 1.0;
    u_xlat16_12.xyz = vec3(u_xlat16_53) * u_xlat16_12.xyz;
    u_xlat16_52 = max(u_xlat16_52, 0.00100000005);
    u_xlat16_11.x = dot(u_xlat1.xzw, u_xlat16_11.xyz);
    u_xlat16_11.x = max(u_xlat16_11.x, 0.00100000005);
    u_xlat16_25 = u_xlat16_52 * -5.55472994 + -6.98316002;
    u_xlat16_25 = u_xlat16_52 * u_xlat16_25;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_13.xyz = (-u_xlat16_9.xyz) * vec3(u_xlat16_51) + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_13.xyz * vec3(u_xlat16_25) + u_xlat16_10.xyz;
    u_xlat16_51 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_51 = u_xlat16_51 * 0.5;
    u_xlat16_51 = max(u_xlat16_51, 9.99999975e-05);
    u_xlat16_25 = (-u_xlat16_51) + 1.0;
    u_xlat16_39 = u_xlat16_11.x * u_xlat16_25 + u_xlat16_51;
    u_xlat16_39 = float(1.0) / u_xlat16_39;
    u_xlat16_51 = u_xlat16_52 * u_xlat16_25 + u_xlat16_51;
    u_xlat16_51 = float(1.0) / u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_39;
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_10.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_52) * u_xlat16_10.xyz;
    u_xlat16_51 = (-u_xlat16_1.y) + 1.0;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_51);
    SV_Target1.xyz = u_xlat16_10.xyz * u_xlat16_11.xxx + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    SV_Target2.w = u_xlat16_50;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
float u_xlat15;
bvec3 u_xlatb15;
float u_xlat16;
bvec3 u_xlatb16;
float u_xlat17;
bvec3 u_xlatb17;
vec3 u_xlat18;
mediump float u_xlat16_25;
vec2 u_xlat29;
vec2 u_xlat30;
vec2 u_xlat31;
float u_xlat32;
vec2 u_xlat33;
mediump float u_xlat16_39;
float u_xlat42;
mediump float u_xlat16_42;
bool u_xlatb42;
float u_xlat43;
float u_xlat44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_50;
mediump float u_xlat16_51;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb42){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb42){
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb42){
        u_xlat42 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat42 = max(u_xlat42, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat42);
#else
        u_xlatb1.x = 256.0<u_xlat42;
#endif
        u_xlatb15.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat42)).xy;
        u_xlat2 = (u_xlatb15.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb15.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb42){
        u_xlat1.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat29.xy = dFdx(u_xlat1.xy);
        u_xlat1.xy = dFdy(u_xlat1.xy);
        u_xlat42 = dot(u_xlat29.xy, u_xlat29.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat42 = max(u_xlat42, u_xlat1.x);
        u_xlat42 = log2(u_xlat42);
        u_xlat42 = u_xlat42 * 0.5;
        u_xlat42 = max(u_xlat42, 0.0);
        u_xlat42 = u_xlat42 + 1.0;
        u_xlat1.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat42 = u_xlat1.x / u_xlat42;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat42);
#else
        u_xlatb1.x = 256.0<u_xlat42;
#endif
        u_xlatb15.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat42)).xy;
        u_xlat2 = (u_xlatb15.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb15.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb42 = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb42){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat2.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat2.xyxx).xy;
        u_xlatb42 = u_xlatb2.y || u_xlatb2.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb42)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat3.xy = (bool(u_xlatb42)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat4.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat3.xy = u_xlat2.xy * u_xlat3.xy;
        u_xlat31.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat31.xyxx).xy;
        u_xlatb42 = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb42)) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb42 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb42){
            u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat3.zw = dFdx(u_xlat3.xy);
            u_xlat3.xy = dFdy(u_xlat3.xy);
            u_xlat42 = dot(u_xlat3.zw, u_xlat3.zw);
            u_xlat5.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat42 = max(u_xlat42, u_xlat5.x);
            u_xlat42 = log2(u_xlat42);
            u_xlat42 = u_xlat42 * 0.5;
            u_xlat42 = max(u_xlat42, 0.0);
            u_xlat42 = u_xlat42 + 1.0;
            u_xlat5.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat3 = u_xlat3 * u_xlat5.xxxx;
            u_xlat3 = u_xlat3 / vec4(u_xlat42);
            u_xlat42 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
            u_xlat17 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
            u_xlat45 = sqrt(u_xlat42);
            u_xlat5.x = sqrt(u_xlat17);
            u_xlat42 = inversesqrt(u_xlat42);
            u_xlat42 = u_xlat42 * abs(u_xlat3.z);
            u_xlat17 = inversesqrt(u_xlat17);
            u_xlat3.x = u_xlat17 * abs(u_xlat3.x);
            u_xlat42 = u_xlat42 * u_xlat3.x;
            u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
            u_xlat42 = sqrt(u_xlat42);
            u_xlat3.x = u_xlat45 * u_xlat5.x;
            u_xlat17 = u_xlat42 * u_xlat3.x;
            u_xlat31.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat5.x = fract((-u_xlat31.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = floor(u_xlat5.x);
            u_xlat31.xy = fract(u_xlat31.xy);
            u_xlat31.xy = u_xlat31.xy + vec2(0.5, 0.5);
            u_xlat31.xy = floor(u_xlat31.xy);
            u_xlat5.x = (-u_xlat31.x) + u_xlat5.x;
            u_xlat31.x = u_xlat5.x * u_xlat31.y + u_xlat31.x;
            u_xlat45 = (-u_xlat3.x) * u_xlat42 + 1.0;
            u_xlat5.xyz = (-u_xlat31.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat45) * u_xlat5.xyz + u_xlat31.xxx;
            u_xlatb17.xz = lessThan(vec4(u_xlat17), vec4(1.0, 0.0, 2.0, 2.0)).xz;
            u_xlat7.xyz = u_xlat31.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat42 = u_xlat3.x * u_xlat42 + -4.0;
            u_xlat42 = exp2(u_xlat42);
            u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
            u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
            u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.zyy + u_xlat31.xxx;
            u_xlat3.xzw = (u_xlatb17.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat3.xyz = (u_xlatb17.x) ? u_xlat6.xyz : u_xlat3.xzw;
        } else {
            u_xlat5.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat5.xyxx).xy;
            u_xlatb42 = u_xlatb5.y || u_xlatb5.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb42)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat5.xy = (bool(u_xlatb42)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat5.xy = u_xlat1.xy * u_xlat5.xy;
            u_xlat33.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(u_xlat5.xyxx, u_xlat33.xyxx).xy;
            u_xlatb42 = u_xlatb5.y || u_xlatb5.x;
            u_xlat4.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb42)) ? u_xlat4 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb42 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb42 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb42){
                u_xlat4.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat4.zw = dFdx(u_xlat4.xy);
                u_xlat4.xy = dFdy(u_xlat4.xy);
                u_xlat42 = dot(u_xlat4.zw, u_xlat4.zw);
                u_xlat45 = dot(u_xlat4.xy, u_xlat4.xy);
                u_xlat42 = max(u_xlat42, u_xlat45);
                u_xlat42 = log2(u_xlat42);
                u_xlat42 = u_xlat42 * 0.5;
                u_xlat42 = max(u_xlat42, 0.0);
                u_xlat42 = u_xlat42 + 1.0;
                u_xlat45 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat4 = vec4(u_xlat45) * u_xlat4;
                u_xlat4 = u_xlat4 / vec4(u_xlat42);
                u_xlat42 = dot(abs(u_xlat4.zw), abs(u_xlat4.zw));
                u_xlat45 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                u_xlat18.x = sqrt(u_xlat42);
                u_xlat46 = sqrt(u_xlat45);
                u_xlat42 = inversesqrt(u_xlat42);
                u_xlat42 = u_xlat42 * abs(u_xlat4.z);
                u_xlat45 = inversesqrt(u_xlat45);
                u_xlat45 = u_xlat45 * abs(u_xlat4.x);
                u_xlat42 = u_xlat42 * u_xlat45;
                u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
                u_xlat42 = sqrt(u_xlat42);
                u_xlat45 = u_xlat46 * u_xlat18.x;
                u_xlat4.x = u_xlat42 * u_xlat45;
                u_xlat18.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat46 = fract((-u_xlat18.x));
                u_xlat18.z = u_xlat46 + 0.5;
                u_xlat18.xy = fract(u_xlat18.xy);
                u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                u_xlat18.xyz = floor(u_xlat18.xyz);
                u_xlat46 = (-u_xlat18.x) + u_xlat18.z;
                u_xlat18.x = u_xlat46 * u_xlat18.y + u_xlat18.x;
                u_xlat32 = (-u_xlat45) * u_xlat42 + 1.0;
                u_xlat5.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat32) * u_xlat5.xyz + u_xlat18.xxx;
                u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat42 = u_xlat45 * u_xlat42 + -4.0;
                u_xlat42 = exp2(u_xlat42);
                u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
                u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
                u_xlat5.xyz = vec3(u_xlat42) * u_xlat5.zyy + u_xlat18.xxx;
                u_xlat18.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat3.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat18.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb42 = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb42 = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb42){
                    u_xlat2.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat4.xy = dFdx(u_xlat2.xy);
                    u_xlat2.xy = dFdy(u_xlat2.xy);
                    u_xlat42 = dot(u_xlat4.xy, u_xlat4.xy);
                    u_xlat45 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat42 = max(u_xlat42, u_xlat45);
                    u_xlat42 = log2(u_xlat42);
                    u_xlat42 = u_xlat42 * 0.5;
                    u_xlat42 = max(u_xlat42, 0.0);
                    u_xlat42 = u_xlat42 + 1.0;
                    u_xlat45 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat4.xy = vec2(u_xlat45) * u_xlat4.xy;
                    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat45);
                    u_xlat4.xy = u_xlat4.xy / vec2(u_xlat42);
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat42);
                    u_xlat42 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                    u_xlat16 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat45 = sqrt(u_xlat42);
                    u_xlat18.x = sqrt(u_xlat16);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat42 = u_xlat42 * abs(u_xlat4.x);
                    u_xlat16 = inversesqrt(u_xlat16);
                    u_xlat2.x = u_xlat16 * abs(u_xlat2.x);
                    u_xlat42 = u_xlat42 * u_xlat2.x;
                    u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
                    u_xlat42 = sqrt(u_xlat42);
                    u_xlat2.x = u_xlat45 * u_xlat18.x;
                    u_xlat16 = u_xlat42 * u_xlat2.x;
                    u_xlat30.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat45 = fract((-u_xlat30.x));
                    u_xlat45 = u_xlat45 + 0.5;
                    u_xlat45 = floor(u_xlat45);
                    u_xlat30.xy = fract(u_xlat30.xy);
                    u_xlat30.xy = u_xlat30.xy + vec2(0.5, 0.5);
                    u_xlat30.xy = floor(u_xlat30.xy);
                    u_xlat45 = (-u_xlat30.x) + u_xlat45;
                    u_xlat30.x = u_xlat45 * u_xlat30.y + u_xlat30.x;
                    u_xlat44 = (-u_xlat2.x) * u_xlat42 + 1.0;
                    u_xlat4.xyz = (-u_xlat30.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat44) * u_xlat4.xyz + u_xlat30.xxx;
                    u_xlatb16.xz = lessThan(vec4(u_xlat16), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat6.xyz = u_xlat30.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat42 = u_xlat2.x * u_xlat42 + -4.0;
                    u_xlat42 = exp2(u_xlat42);
                    u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
                    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
                    u_xlat4.xyz = vec3(u_xlat42) * u_xlat4.zyy + u_xlat30.xxx;
                    u_xlat2.xzw = (u_xlatb16.z) ? u_xlat6.xyz : u_xlat4.xyz;
                    u_xlat3.xyz = (u_xlatb16.x) ? u_xlat5.xyz : u_xlat2.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat2.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat42 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat30.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat42 = max(u_xlat42, u_xlat30.x);
                    u_xlat42 = log2(u_xlat42);
                    u_xlat42 = u_xlat42 * 0.5;
                    u_xlat42 = max(u_xlat42, 0.0);
                    u_xlat42 = u_xlat42 + 1.0;
                    u_xlat30.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat30.xx * u_xlat2.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat30.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat42);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat42);
                    u_xlat42 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat15 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat16 = sqrt(u_xlat42);
                    u_xlat30.x = sqrt(u_xlat15);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat42 = u_xlat42 * abs(u_xlat2.x);
                    u_xlat15 = inversesqrt(u_xlat15);
                    u_xlat1.x = u_xlat15 * abs(u_xlat1.x);
                    u_xlat42 = u_xlat42 * u_xlat1.x;
                    u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
                    u_xlat42 = sqrt(u_xlat42);
                    u_xlat1.x = u_xlat30.x * u_xlat16;
                    u_xlat15 = u_xlat42 * u_xlat1.x;
                    u_xlat29.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat29.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat29.xy = fract(u_xlat29.xy);
                    u_xlat29.xy = u_xlat29.xy + vec2(0.5, 0.5);
                    u_xlat29.xy = floor(u_xlat29.xy);
                    u_xlat2.x = (-u_xlat29.x) + u_xlat2.x;
                    u_xlat29.x = u_xlat2.x * u_xlat29.y + u_xlat29.x;
                    u_xlat43 = (-u_xlat1.x) * u_xlat42 + 1.0;
                    u_xlat2.xyz = (-u_xlat29.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat43) * u_xlat2.xyz + u_xlat29.xxx;
                    u_xlatb15.xz = lessThan(vec4(u_xlat15), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat29.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat42 = u_xlat1.x * u_xlat42 + -4.0;
                    u_xlat42 = exp2(u_xlat42);
                    u_xlat42 = u_xlat42 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
                    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat42) * u_xlat2.zyy + u_xlat29.xxx;
                    u_xlat1.xzw = (u_xlatb15.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat3.xyz = (u_xlatb15.x) ? u_xlat4.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat3.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb42 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb42){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb42 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb42){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_42 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_42 = min(u_xlat16_42, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_50 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
    u_xlat16_50 = sqrt(u_xlat16_50);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(u_xlat16_50<_FillNormalGaps);
#else
    u_xlatb1.x = u_xlat16_50<_FillNormalGaps;
#endif
    u_xlat16_9.xy = (u_xlatb1.x) ? vec2(0.0, 0.0) : u_xlat16_9.xy;
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat44 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat44 = inversesqrt(u_xlat44);
    u_xlat2.xyz = vec3(u_xlat44) * u_xlat2.xyz;
    u_xlat16_50 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_42) + 1.0;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_9.x + u_xlat16_42;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat16_1.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_51 = (-u_xlat16_50) + 1.0;
    u_xlat16_0 = max(u_xlat16_51, 0.00100000005);
    u_xlat16_51 = u_xlat16_0 * u_xlat16_1.y;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * -0.5 + 1.0;
    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_9.xyz;
    u_xlat16_52 = dot(u_xlat2.xyz, u_xlat1.xzw);
    u_xlat16_11.x = u_xlat16_52 + u_xlat16_52;
    u_xlat16_11.xyz = u_xlat1.xzw * (-u_xlat16_11.xxx) + u_xlat2.xyz;
    u_xlat16_11.xyz = (-u_xlat16_11.xyz);
    u_xlat16_53 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_53 = u_xlat16_0 * u_xlat16_53;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_11.xyz, u_xlat16_53);
    u_xlat16_53 = u_xlat10_2.w + -1.0;
    u_xlat16_53 = _ReflectionCube_HDR.w * u_xlat16_53 + 1.0;
    u_xlat16_53 = log2(u_xlat16_53);
    u_xlat16_53 = u_xlat16_53 * _ReflectionCube_HDR.y;
    u_xlat16_53 = exp2(u_xlat16_53);
    u_xlat16_53 = u_xlat16_53 * _ReflectionCube_HDR.x;
    u_xlat16_12.xyz = u_xlat10_2.xyz * vec3(u_xlat16_53);
    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_12.xyz;
    u_xlat16_53 = (-u_xlat16_0) + 1.0;
    u_xlat16_12.xyz = vec3(u_xlat16_53) * u_xlat16_12.xyz;
    u_xlat16_52 = max(u_xlat16_52, 0.00100000005);
    u_xlat16_11.x = dot(u_xlat1.xzw, u_xlat16_11.xyz);
    u_xlat16_11.x = max(u_xlat16_11.x, 0.00100000005);
    u_xlat16_25 = u_xlat16_52 * -5.55472994 + -6.98316002;
    u_xlat16_25 = u_xlat16_52 * u_xlat16_25;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_13.xyz = (-u_xlat16_9.xyz) * vec3(u_xlat16_51) + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_13.xyz * vec3(u_xlat16_25) + u_xlat16_10.xyz;
    u_xlat16_51 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_51 = u_xlat16_51 * 0.5;
    u_xlat16_51 = max(u_xlat16_51, 9.99999975e-05);
    u_xlat16_25 = (-u_xlat16_51) + 1.0;
    u_xlat16_39 = u_xlat16_11.x * u_xlat16_25 + u_xlat16_51;
    u_xlat16_39 = float(1.0) / u_xlat16_39;
    u_xlat16_51 = u_xlat16_52 * u_xlat16_25 + u_xlat16_51;
    u_xlat16_51 = float(1.0) / u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_39;
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_12.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_10.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_52) * u_xlat16_10.xyz;
    u_xlat16_51 = (-u_xlat16_1.y) + 1.0;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_51);
    SV_Target1.xyz = u_xlat16_10.xyz * u_xlat16_11.xxx + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    SV_Target2.w = u_xlat16_50;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat14;
vec2 u_xlat21;
vec2 u_xlat22;
vec2 u_xlat23;
float u_xlat24;
vec2 u_xlat25;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb30){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb30){
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb30){
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = max(u_xlat30, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb30){
        u_xlat1.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat21.xy = dFdx(u_xlat1.xy);
        u_xlat1.xy = dFdy(u_xlat1.xy);
        u_xlat30 = dot(u_xlat21.xy, u_xlat21.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat30 = max(u_xlat30, u_xlat1.x);
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * 0.5;
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 + 1.0;
        u_xlat1.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = u_xlat1.x / u_xlat30;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb30){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat2.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat2.xyxx).xy;
        u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat3.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat4.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat3.xy = u_xlat2.xy * u_xlat3.xy;
        u_xlat23.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat23.xyxx).xy;
        u_xlatb30 = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb30 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb30){
            u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat3.zw = dFdx(u_xlat3.xy);
            u_xlat3.xy = dFdy(u_xlat3.xy);
            u_xlat30 = dot(u_xlat3.zw, u_xlat3.zw);
            u_xlat5.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat30 = max(u_xlat30, u_xlat5.x);
            u_xlat30 = log2(u_xlat30);
            u_xlat30 = u_xlat30 * 0.5;
            u_xlat30 = max(u_xlat30, 0.0);
            u_xlat30 = u_xlat30 + 1.0;
            u_xlat5.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat3 = u_xlat3 * u_xlat5.xxxx;
            u_xlat3 = u_xlat3 / vec4(u_xlat30);
            u_xlat30 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
            u_xlat13 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
            u_xlat33 = sqrt(u_xlat30);
            u_xlat5.x = sqrt(u_xlat13);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat30 = u_xlat30 * abs(u_xlat3.z);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat3.x = u_xlat13 * abs(u_xlat3.x);
            u_xlat30 = u_xlat30 * u_xlat3.x;
            u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
            u_xlat30 = sqrt(u_xlat30);
            u_xlat3.x = u_xlat33 * u_xlat5.x;
            u_xlat13 = u_xlat30 * u_xlat3.x;
            u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat5.x = fract((-u_xlat23.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = floor(u_xlat5.x);
            u_xlat23.xy = fract(u_xlat23.xy);
            u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
            u_xlat23.xy = floor(u_xlat23.xy);
            u_xlat5.x = (-u_xlat23.x) + u_xlat5.x;
            u_xlat23.x = u_xlat5.x * u_xlat23.y + u_xlat23.x;
            u_xlat33 = (-u_xlat3.x) * u_xlat30 + 1.0;
            u_xlat5.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat23.xxx;
            u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
            u_xlat7.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat30 = u_xlat3.x * u_xlat30 + -4.0;
            u_xlat30 = exp2(u_xlat30);
            u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
            u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
            u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat23.xxx;
            u_xlat3.xzw = (u_xlatb13.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat3.xyz = (u_xlatb13.x) ? u_xlat6.xyz : u_xlat3.xzw;
        } else {
            u_xlat5.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat5.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat5.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat5.xy = u_xlat1.xy * u_xlat5.xy;
            u_xlat25.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(u_xlat5.xyxx, u_xlat25.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat4.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb30 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb30 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb30){
                u_xlat4.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat4.zw = dFdx(u_xlat4.xy);
                u_xlat4.xy = dFdy(u_xlat4.xy);
                u_xlat30 = dot(u_xlat4.zw, u_xlat4.zw);
                u_xlat33 = dot(u_xlat4.xy, u_xlat4.xy);
                u_xlat30 = max(u_xlat30, u_xlat33);
                u_xlat30 = log2(u_xlat30);
                u_xlat30 = u_xlat30 * 0.5;
                u_xlat30 = max(u_xlat30, 0.0);
                u_xlat30 = u_xlat30 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat4 = vec4(u_xlat33) * u_xlat4;
                u_xlat4 = u_xlat4 / vec4(u_xlat30);
                u_xlat30 = dot(abs(u_xlat4.zw), abs(u_xlat4.zw));
                u_xlat33 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                u_xlat14.x = sqrt(u_xlat30);
                u_xlat34 = sqrt(u_xlat33);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat30 = u_xlat30 * abs(u_xlat4.z);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat4.x);
                u_xlat30 = u_xlat30 * u_xlat33;
                u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                u_xlat30 = sqrt(u_xlat30);
                u_xlat33 = u_xlat34 * u_xlat14.x;
                u_xlat4.x = u_xlat30 * u_xlat33;
                u_xlat14.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat34 = fract((-u_xlat14.x));
                u_xlat14.z = u_xlat34 + 0.5;
                u_xlat14.xy = fract(u_xlat14.xy);
                u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
                u_xlat14.xyz = floor(u_xlat14.xyz);
                u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
                u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
                u_xlat24 = (-u_xlat33) * u_xlat30 + 1.0;
                u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
                u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat30 = u_xlat33 * u_xlat30 + -4.0;
                u_xlat30 = exp2(u_xlat30);
                u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat14.xxx;
                u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat3.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb30 = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb30 = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb30){
                    u_xlat2.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat4.xy = dFdx(u_xlat2.xy);
                    u_xlat2.xy = dFdy(u_xlat2.xy);
                    u_xlat30 = dot(u_xlat4.xy, u_xlat4.xy);
                    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat30 = max(u_xlat30, u_xlat33);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat4.xy = vec2(u_xlat33) * u_xlat4.xy;
                    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat33);
                    u_xlat4.xy = u_xlat4.xy / vec2(u_xlat30);
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                    u_xlat12 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat33 = sqrt(u_xlat30);
                    u_xlat14.x = sqrt(u_xlat12);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat4.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat2.x = u_xlat12 * abs(u_xlat2.x);
                    u_xlat30 = u_xlat30 * u_xlat2.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat2.x = u_xlat33 * u_xlat14.x;
                    u_xlat12 = u_xlat30 * u_xlat2.x;
                    u_xlat22.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat33 = fract((-u_xlat22.x));
                    u_xlat33 = u_xlat33 + 0.5;
                    u_xlat33 = floor(u_xlat33);
                    u_xlat22.xy = fract(u_xlat22.xy);
                    u_xlat22.xy = u_xlat22.xy + vec2(0.5, 0.5);
                    u_xlat22.xy = floor(u_xlat22.xy);
                    u_xlat33 = (-u_xlat22.x) + u_xlat33;
                    u_xlat22.x = u_xlat33 * u_xlat22.y + u_xlat22.x;
                    u_xlat32 = (-u_xlat2.x) * u_xlat30 + 1.0;
                    u_xlat4.xyz = (-u_xlat22.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat32) * u_xlat4.xyz + u_xlat22.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat6.xyz = u_xlat22.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat2.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zyy + u_xlat22.xxx;
                    u_xlat2.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                    u_xlat3.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat2.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat2.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat22.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat30 = max(u_xlat30, u_xlat22.x);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat22.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat22.xx * u_xlat2.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat22.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat11 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat30);
                    u_xlat22.x = sqrt(u_xlat11);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat2.x);
                    u_xlat11 = inversesqrt(u_xlat11);
                    u_xlat1.x = u_xlat11 * abs(u_xlat1.x);
                    u_xlat30 = u_xlat30 * u_xlat1.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat1.x = u_xlat22.x * u_xlat12;
                    u_xlat11 = u_xlat30 * u_xlat1.x;
                    u_xlat21.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat21.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat21.xy = fract(u_xlat21.xy);
                    u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                    u_xlat21.xy = floor(u_xlat21.xy);
                    u_xlat2.x = (-u_xlat21.x) + u_xlat2.x;
                    u_xlat21.x = u_xlat2.x * u_xlat21.y + u_xlat21.x;
                    u_xlat31 = (-u_xlat1.x) * u_xlat30 + 1.0;
                    u_xlat2.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz + u_xlat21.xxx;
                    u_xlatb11.xz = lessThan(vec4(u_xlat11), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat1.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.zyy + u_xlat21.xxx;
                    u_xlat1.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat3.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat3.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_30 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_30 = min(u_xlat16_30, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_30) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_30;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat16_1.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat14;
vec2 u_xlat21;
vec2 u_xlat22;
vec2 u_xlat23;
float u_xlat24;
vec2 u_xlat25;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb30){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb30){
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb30){
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = max(u_xlat30, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb30){
        u_xlat1.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat21.xy = dFdx(u_xlat1.xy);
        u_xlat1.xy = dFdy(u_xlat1.xy);
        u_xlat30 = dot(u_xlat21.xy, u_xlat21.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat30 = max(u_xlat30, u_xlat1.x);
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * 0.5;
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 + 1.0;
        u_xlat1.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = u_xlat1.x / u_xlat30;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb30){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat2.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat2.xyxx).xy;
        u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat3.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat4.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat3.xy = u_xlat2.xy * u_xlat3.xy;
        u_xlat23.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat23.xyxx).xy;
        u_xlatb30 = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb30 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb30){
            u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat3.zw = dFdx(u_xlat3.xy);
            u_xlat3.xy = dFdy(u_xlat3.xy);
            u_xlat30 = dot(u_xlat3.zw, u_xlat3.zw);
            u_xlat5.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat30 = max(u_xlat30, u_xlat5.x);
            u_xlat30 = log2(u_xlat30);
            u_xlat30 = u_xlat30 * 0.5;
            u_xlat30 = max(u_xlat30, 0.0);
            u_xlat30 = u_xlat30 + 1.0;
            u_xlat5.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat3 = u_xlat3 * u_xlat5.xxxx;
            u_xlat3 = u_xlat3 / vec4(u_xlat30);
            u_xlat30 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
            u_xlat13 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
            u_xlat33 = sqrt(u_xlat30);
            u_xlat5.x = sqrt(u_xlat13);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat30 = u_xlat30 * abs(u_xlat3.z);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat3.x = u_xlat13 * abs(u_xlat3.x);
            u_xlat30 = u_xlat30 * u_xlat3.x;
            u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
            u_xlat30 = sqrt(u_xlat30);
            u_xlat3.x = u_xlat33 * u_xlat5.x;
            u_xlat13 = u_xlat30 * u_xlat3.x;
            u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat5.x = fract((-u_xlat23.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = floor(u_xlat5.x);
            u_xlat23.xy = fract(u_xlat23.xy);
            u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
            u_xlat23.xy = floor(u_xlat23.xy);
            u_xlat5.x = (-u_xlat23.x) + u_xlat5.x;
            u_xlat23.x = u_xlat5.x * u_xlat23.y + u_xlat23.x;
            u_xlat33 = (-u_xlat3.x) * u_xlat30 + 1.0;
            u_xlat5.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat23.xxx;
            u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
            u_xlat7.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat30 = u_xlat3.x * u_xlat30 + -4.0;
            u_xlat30 = exp2(u_xlat30);
            u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
            u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
            u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat23.xxx;
            u_xlat3.xzw = (u_xlatb13.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat3.xyz = (u_xlatb13.x) ? u_xlat6.xyz : u_xlat3.xzw;
        } else {
            u_xlat5.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat5.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat5.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat5.xy = u_xlat1.xy * u_xlat5.xy;
            u_xlat25.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(u_xlat5.xyxx, u_xlat25.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat4.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb30 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb30 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb30){
                u_xlat4.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat4.zw = dFdx(u_xlat4.xy);
                u_xlat4.xy = dFdy(u_xlat4.xy);
                u_xlat30 = dot(u_xlat4.zw, u_xlat4.zw);
                u_xlat33 = dot(u_xlat4.xy, u_xlat4.xy);
                u_xlat30 = max(u_xlat30, u_xlat33);
                u_xlat30 = log2(u_xlat30);
                u_xlat30 = u_xlat30 * 0.5;
                u_xlat30 = max(u_xlat30, 0.0);
                u_xlat30 = u_xlat30 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat4 = vec4(u_xlat33) * u_xlat4;
                u_xlat4 = u_xlat4 / vec4(u_xlat30);
                u_xlat30 = dot(abs(u_xlat4.zw), abs(u_xlat4.zw));
                u_xlat33 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                u_xlat14.x = sqrt(u_xlat30);
                u_xlat34 = sqrt(u_xlat33);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat30 = u_xlat30 * abs(u_xlat4.z);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat4.x);
                u_xlat30 = u_xlat30 * u_xlat33;
                u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                u_xlat30 = sqrt(u_xlat30);
                u_xlat33 = u_xlat34 * u_xlat14.x;
                u_xlat4.x = u_xlat30 * u_xlat33;
                u_xlat14.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat34 = fract((-u_xlat14.x));
                u_xlat14.z = u_xlat34 + 0.5;
                u_xlat14.xy = fract(u_xlat14.xy);
                u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
                u_xlat14.xyz = floor(u_xlat14.xyz);
                u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
                u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
                u_xlat24 = (-u_xlat33) * u_xlat30 + 1.0;
                u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
                u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat30 = u_xlat33 * u_xlat30 + -4.0;
                u_xlat30 = exp2(u_xlat30);
                u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat14.xxx;
                u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat3.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb30 = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb30 = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb30){
                    u_xlat2.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat4.xy = dFdx(u_xlat2.xy);
                    u_xlat2.xy = dFdy(u_xlat2.xy);
                    u_xlat30 = dot(u_xlat4.xy, u_xlat4.xy);
                    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat30 = max(u_xlat30, u_xlat33);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat4.xy = vec2(u_xlat33) * u_xlat4.xy;
                    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat33);
                    u_xlat4.xy = u_xlat4.xy / vec2(u_xlat30);
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                    u_xlat12 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat33 = sqrt(u_xlat30);
                    u_xlat14.x = sqrt(u_xlat12);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat4.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat2.x = u_xlat12 * abs(u_xlat2.x);
                    u_xlat30 = u_xlat30 * u_xlat2.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat2.x = u_xlat33 * u_xlat14.x;
                    u_xlat12 = u_xlat30 * u_xlat2.x;
                    u_xlat22.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat33 = fract((-u_xlat22.x));
                    u_xlat33 = u_xlat33 + 0.5;
                    u_xlat33 = floor(u_xlat33);
                    u_xlat22.xy = fract(u_xlat22.xy);
                    u_xlat22.xy = u_xlat22.xy + vec2(0.5, 0.5);
                    u_xlat22.xy = floor(u_xlat22.xy);
                    u_xlat33 = (-u_xlat22.x) + u_xlat33;
                    u_xlat22.x = u_xlat33 * u_xlat22.y + u_xlat22.x;
                    u_xlat32 = (-u_xlat2.x) * u_xlat30 + 1.0;
                    u_xlat4.xyz = (-u_xlat22.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat32) * u_xlat4.xyz + u_xlat22.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat6.xyz = u_xlat22.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat2.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zyy + u_xlat22.xxx;
                    u_xlat2.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                    u_xlat3.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat2.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat2.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat22.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat30 = max(u_xlat30, u_xlat22.x);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat22.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat22.xx * u_xlat2.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat22.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat11 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat30);
                    u_xlat22.x = sqrt(u_xlat11);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat2.x);
                    u_xlat11 = inversesqrt(u_xlat11);
                    u_xlat1.x = u_xlat11 * abs(u_xlat1.x);
                    u_xlat30 = u_xlat30 * u_xlat1.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat1.x = u_xlat22.x * u_xlat12;
                    u_xlat11 = u_xlat30 * u_xlat1.x;
                    u_xlat21.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat21.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat21.xy = fract(u_xlat21.xy);
                    u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                    u_xlat21.xy = floor(u_xlat21.xy);
                    u_xlat2.x = (-u_xlat21.x) + u_xlat2.x;
                    u_xlat21.x = u_xlat2.x * u_xlat21.y + u_xlat21.x;
                    u_xlat31 = (-u_xlat1.x) * u_xlat30 + 1.0;
                    u_xlat2.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz + u_xlat21.xxx;
                    u_xlatb11.xz = lessThan(vec4(u_xlat11), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat1.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.zyy + u_xlat21.xxx;
                    u_xlat1.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat3.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat3.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_30 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_30 = min(u_xlat16_30, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_30) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_30;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat16_1.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
vec3 u_xlat15;
float u_xlat16;
bvec3 u_xlatb16;
vec3 u_xlat17;
mediump float u_xlat16_23;
vec2 u_xlat26;
vec2 u_xlat27;
float u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat39;
mediump float u_xlat16_39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(256.0<u_xlat0.x);
#else
        u_xlatb13 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb13)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat26.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat26.x = dot(u_xlat26.xy, u_xlat26.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat26.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat13 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat13 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(256.0<u_xlat0.x);
#else
        u_xlatb13 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb13)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat27.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat27.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat1 = (u_xlatb1.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb2 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb2){
            u_xlat2.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat2.zw = dFdx(u_xlat2.xy);
            u_xlat2.xy = dFdy(u_xlat2.xy);
            u_xlat4.x = dot(u_xlat2.zw, u_xlat2.zw);
            u_xlat17.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat4.x = max(u_xlat17.x, u_xlat4.x);
            u_xlat4.x = log2(u_xlat4.x);
            u_xlat4.x = u_xlat4.x * 0.5;
            u_xlat4.x = max(u_xlat4.x, 0.0);
            u_xlat4.x = u_xlat4.x + 1.0;
            u_xlat17.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat2 = u_xlat2 * u_xlat17.xxxx;
            u_xlat2 = u_xlat2 / u_xlat4.xxxx;
            u_xlat15.z = dot(abs(u_xlat2.zw), abs(u_xlat2.zw));
            u_xlat15.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
            u_xlat4.xy = sqrt(u_xlat15.zx);
            u_xlat15.z = inversesqrt(u_xlat15.z);
            u_xlat15.x = inversesqrt(u_xlat15.x);
            u_xlat2.xz = u_xlat15.xz * abs(u_xlat2.xz);
            u_xlat2.x = u_xlat2.x * u_xlat2.z;
            u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat15.x = u_xlat4.y * u_xlat4.x;
            u_xlat28 = u_xlat2.x * u_xlat15.x;
            u_xlat4.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat41 = fract((-u_xlat4.x));
            u_xlat41 = u_xlat41 + 0.5;
            u_xlat41 = floor(u_xlat41);
            u_xlat4.xy = fract(u_xlat4.xy);
            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
            u_xlat4.xy = floor(u_xlat4.xy);
            u_xlat41 = u_xlat41 + (-u_xlat4.x);
            u_xlat41 = u_xlat41 * u_xlat4.y + u_xlat4.x;
            u_xlat4.x = (-u_xlat15.x) * u_xlat2.x + 1.0;
            u_xlat17.xyz = (-vec3(u_xlat41)) + vec3(0.5, 0.0, 1.0);
            u_xlat5.xyz = u_xlat4.xxx * u_xlat17.xyz + vec3(u_xlat41);
            u_xlatb4.xy = lessThan(vec4(u_xlat28), vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat6.xyz = vec3(u_xlat41) * vec3(0.0, 1.0, 0.0);
            u_xlat2.x = u_xlat15.x * u_xlat2.x + -4.0;
            u_xlat2.x = exp2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
            u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
            u_xlat2.xyz = u_xlat2.xxx * u_xlat17.zyy + vec3(u_xlat41);
            u_xlat2.xyz = (u_xlatb4.y) ? u_xlat6.xyz : u_xlat2.xyz;
            u_xlat2.xyz = (u_xlatb4.x) ? u_xlat5.xyz : u_xlat2.xyz;
        } else {
            u_xlat4.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat4.xyxx).xy;
            u_xlatb41 = u_xlatb4.y || u_xlatb4.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb41)) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat4.xy = (bool(u_xlatb41)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat4.xy = u_xlat0.xy * u_xlat4.xy;
            u_xlat30.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(u_xlat4.xyxx, u_xlat30.xyxx).xy;
            u_xlatb41 = u_xlatb4.y || u_xlatb4.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb41)) ? u_xlat3 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb41 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb41 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb41){
                u_xlat3.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat41 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat41 = max(u_xlat41, u_xlat4.x);
                u_xlat41 = log2(u_xlat41);
                u_xlat41 = u_xlat41 * 0.5;
                u_xlat41 = max(u_xlat41, 0.0);
                u_xlat41 = u_xlat41 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat41);
                u_xlat41 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat16 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat42 = sqrt(u_xlat41);
                u_xlat4.x = sqrt(u_xlat16);
                u_xlat41 = inversesqrt(u_xlat41);
                u_xlat41 = u_xlat41 * abs(u_xlat3.z);
                u_xlat16 = inversesqrt(u_xlat16);
                u_xlat3.x = u_xlat16 * abs(u_xlat3.x);
                u_xlat41 = u_xlat41 * u_xlat3.x;
                u_xlat41 = (-u_xlat41) * u_xlat41 + 1.0;
                u_xlat41 = sqrt(u_xlat41);
                u_xlat3.x = u_xlat42 * u_xlat4.x;
                u_xlat16 = u_xlat41 * u_xlat3.x;
                u_xlat29.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat4.x = fract((-u_xlat29.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat29.xy = fract(u_xlat29.xy);
                u_xlat29.xy = u_xlat29.xy + vec2(0.5, 0.5);
                u_xlat29.xy = floor(u_xlat29.xy);
                u_xlat4.x = (-u_xlat29.x) + u_xlat4.x;
                u_xlat29.x = u_xlat4.x * u_xlat29.y + u_xlat29.x;
                u_xlat42 = (-u_xlat3.x) * u_xlat41 + 1.0;
                u_xlat4.xyz = (-u_xlat29.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat42) * u_xlat4.xyz + u_xlat29.xxx;
                u_xlatb16.xz = lessThan(vec4(u_xlat16), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat29.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat41 = u_xlat3.x * u_xlat41 + -4.0;
                u_xlat41 = exp2(u_xlat41);
                u_xlat41 = u_xlat41 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat41 = min(max(u_xlat41, 0.0), 1.0);
#else
                u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat41) * u_xlat4.zyy + u_xlat29.xxx;
                u_xlat3.xzw = (u_xlatb16.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat2.xyz = (u_xlatb16.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb41 = !!(u_xlat1.x>=u_xlat0.x);
#else
                u_xlatb41 = u_xlat1.x>=u_xlat0.x;
#endif
                if(u_xlatb41){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat29.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat41 = max(u_xlat41, u_xlat29.x);
                    u_xlat41 = log2(u_xlat41);
                    u_xlat41 = u_xlat41 * 0.5;
                    u_xlat41 = max(u_xlat41, 0.0);
                    u_xlat41 = u_xlat41 + 1.0;
                    u_xlat29.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat29.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat29.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat41);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat41);
                    u_xlat41 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat14.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat16 = sqrt(u_xlat41);
                    u_xlat29.x = sqrt(u_xlat14.x);
                    u_xlat41 = inversesqrt(u_xlat41);
                    u_xlat41 = u_xlat41 * abs(u_xlat3.x);
                    u_xlat14.x = inversesqrt(u_xlat14.x);
                    u_xlat1.x = u_xlat14.x * abs(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x * u_xlat41;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat14.x = u_xlat29.x * u_xlat16;
                    u_xlat41 = u_xlat1.x * u_xlat14.x;
                    u_xlat27.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat27.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat27.xy = fract(u_xlat27.xy);
                    u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                    u_xlat27.xy = floor(u_xlat27.xy);
                    u_xlat3.x = (-u_xlat27.x) + u_xlat3.x;
                    u_xlat27.x = u_xlat3.x * u_xlat27.y + u_xlat27.x;
                    u_xlat40 = (-u_xlat14.x) * u_xlat1.x + 1.0;
                    u_xlat3.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat40) * u_xlat3.xyz + u_xlat27.xxx;
                    u_xlatb3.xw = lessThan(vec4(u_xlat41), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat5.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat14.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.zyy + u_xlat27.xxx;
                    u_xlat1.xyz = (u_xlatb3.w) ? u_xlat5.xyz : u_xlat1.xyz;
                    u_xlat2.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat40 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat27.x = max(u_xlat40, u_xlat27.x);
                    u_xlat27.x = log2(u_xlat27.x);
                    u_xlat27.x = u_xlat27.x * 0.5;
                    u_xlat27.x = max(u_xlat27.x, 0.0);
                    u_xlat27.x = u_xlat27.x + 1.0;
                    u_xlat40 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat40) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat40);
                    u_xlat1.xy = u_xlat1.xy / u_xlat27.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat27.xx;
                    u_xlat14.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat13 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat27.x = sqrt(u_xlat14.x);
                    u_xlat40 = sqrt(u_xlat13);
                    u_xlat14.x = inversesqrt(u_xlat14.x);
                    u_xlat1.x = u_xlat14.x * abs(u_xlat1.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat0.x = u_xlat13 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat13 = u_xlat40 * u_xlat27.x;
                    u_xlat1.x = u_xlat0.x * u_xlat13;
                    u_xlat26.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat14.x = fract((-u_xlat26.x));
                    u_xlat14.x = u_xlat14.x + 0.5;
                    u_xlat14.x = floor(u_xlat14.x);
                    u_xlat26.xy = fract(u_xlat26.xy);
                    u_xlat26.xy = u_xlat26.xy + vec2(0.5, 0.5);
                    u_xlat26.xy = floor(u_xlat26.xy);
                    u_xlat14.x = (-u_xlat26.x) + u_xlat14.x;
                    u_xlat26.x = u_xlat14.x * u_xlat26.y + u_xlat26.x;
                    u_xlat39 = (-u_xlat13) * u_xlat0.x + 1.0;
                    u_xlat14.xyz = (-u_xlat26.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat39) * u_xlat14.xyz + u_xlat26.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = u_xlat26.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat13 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + u_xlat26.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat2.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat2.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_39 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_39 = min(u_xlat16_39, 0.999000013);
    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_46 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat16_46 = sqrt(u_xlat16_46);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(u_xlat16_46<_FillNormalGaps);
#else
    u_xlatb1.x = u_xlat16_46<_FillNormalGaps;
#endif
    u_xlat16_8.xy = (u_xlatb1.x) ? vec2(0.0, 0.0) : u_xlat16_8.xy;
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = vec3(u_xlat41) * u_xlat2.xyz;
    u_xlat16_46 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat16_39) + 1.0;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x + u_xlat16_39;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.yyy * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_47 = (-u_xlat16_46) + 1.0;
    u_xlat16_0 = max(u_xlat16_47, 0.00100000005);
    u_xlat16_47 = u_xlat16_0 * u_xlat16_1.y;
    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;
    u_xlat16_47 = u_xlat16_47 * -0.5 + 1.0;
    u_xlat16_9.xyz = vec3(u_xlat16_47) * u_xlat16_8.xyz;
    u_xlat16_48 = dot(u_xlat2.xyz, u_xlat1.xzw);
    u_xlat16_10.x = u_xlat16_48 + u_xlat16_48;
    u_xlat16_10.xyz = u_xlat1.xzw * (-u_xlat16_10.xxx) + u_xlat2.xyz;
    u_xlat16_10.xyz = (-u_xlat16_10.xyz);
    u_xlat16_49 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_49 = u_xlat16_0 * u_xlat16_49;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_10.xyz, u_xlat16_49);
    u_xlat16_49 = u_xlat10_2.w + -1.0;
    u_xlat16_49 = _ReflectionCube_HDR.w * u_xlat16_49 + 1.0;
    u_xlat16_49 = log2(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * _ReflectionCube_HDR.y;
    u_xlat16_49 = exp2(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * _ReflectionCube_HDR.x;
    u_xlat16_11.xyz = u_xlat10_2.xyz * vec3(u_xlat16_49);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_11.xyz;
    u_xlat16_49 = (-u_xlat16_0) + 1.0;
    u_xlat16_11.xyz = vec3(u_xlat16_49) * u_xlat16_11.xyz;
    u_xlat16_48 = max(u_xlat16_48, 0.00100000005);
    u_xlat16_10.x = dot(u_xlat1.xzw, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.00100000005);
    u_xlat16_23 = u_xlat16_48 * -5.55472994 + -6.98316002;
    u_xlat16_23 = u_xlat16_48 * u_xlat16_23;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_12.xyz = (-u_xlat16_8.xyz) * vec3(u_xlat16_47) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_12.xyz * vec3(u_xlat16_23) + u_xlat16_9.xyz;
    u_xlat16_47 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_47 = u_xlat16_47 * 0.5;
    u_xlat16_47 = max(u_xlat16_47, 9.99999975e-05);
    u_xlat16_23 = (-u_xlat16_47) + 1.0;
    u_xlat16_36 = u_xlat16_10.x * u_xlat16_23 + u_xlat16_47;
    u_xlat16_36 = float(1.0) / u_xlat16_36;
    u_xlat16_47 = u_xlat16_48 * u_xlat16_23 + u_xlat16_47;
    u_xlat16_47 = float(1.0) / u_xlat16_47;
    u_xlat16_47 = u_xlat16_47 * u_xlat16_36;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_11.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_47) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_9.xyz;
    u_xlat16_47 = (-u_xlat16_1.y) + 1.0;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_47);
    SV_Target1.xyz = u_xlat16_9.xyz * u_xlat16_10.xxx + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : u_xlat16_8.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_8.xy;
    SV_Target2.w = u_xlat16_46;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
vec3 u_xlat15;
float u_xlat16;
bvec3 u_xlatb16;
vec3 u_xlat17;
mediump float u_xlat16_23;
vec2 u_xlat26;
vec2 u_xlat27;
float u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat39;
mediump float u_xlat16_39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(256.0<u_xlat0.x);
#else
        u_xlatb13 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb13)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat26.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat26.x = dot(u_xlat26.xy, u_xlat26.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat26.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat13 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat13 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(256.0<u_xlat0.x);
#else
        u_xlatb13 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb13)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat27.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat27.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat1 = (u_xlatb1.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb2 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb2){
            u_xlat2.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat2.zw = dFdx(u_xlat2.xy);
            u_xlat2.xy = dFdy(u_xlat2.xy);
            u_xlat4.x = dot(u_xlat2.zw, u_xlat2.zw);
            u_xlat17.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat4.x = max(u_xlat17.x, u_xlat4.x);
            u_xlat4.x = log2(u_xlat4.x);
            u_xlat4.x = u_xlat4.x * 0.5;
            u_xlat4.x = max(u_xlat4.x, 0.0);
            u_xlat4.x = u_xlat4.x + 1.0;
            u_xlat17.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat2 = u_xlat2 * u_xlat17.xxxx;
            u_xlat2 = u_xlat2 / u_xlat4.xxxx;
            u_xlat15.z = dot(abs(u_xlat2.zw), abs(u_xlat2.zw));
            u_xlat15.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
            u_xlat4.xy = sqrt(u_xlat15.zx);
            u_xlat15.z = inversesqrt(u_xlat15.z);
            u_xlat15.x = inversesqrt(u_xlat15.x);
            u_xlat2.xz = u_xlat15.xz * abs(u_xlat2.xz);
            u_xlat2.x = u_xlat2.x * u_xlat2.z;
            u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat15.x = u_xlat4.y * u_xlat4.x;
            u_xlat28 = u_xlat2.x * u_xlat15.x;
            u_xlat4.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat41 = fract((-u_xlat4.x));
            u_xlat41 = u_xlat41 + 0.5;
            u_xlat41 = floor(u_xlat41);
            u_xlat4.xy = fract(u_xlat4.xy);
            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
            u_xlat4.xy = floor(u_xlat4.xy);
            u_xlat41 = u_xlat41 + (-u_xlat4.x);
            u_xlat41 = u_xlat41 * u_xlat4.y + u_xlat4.x;
            u_xlat4.x = (-u_xlat15.x) * u_xlat2.x + 1.0;
            u_xlat17.xyz = (-vec3(u_xlat41)) + vec3(0.5, 0.0, 1.0);
            u_xlat5.xyz = u_xlat4.xxx * u_xlat17.xyz + vec3(u_xlat41);
            u_xlatb4.xy = lessThan(vec4(u_xlat28), vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat6.xyz = vec3(u_xlat41) * vec3(0.0, 1.0, 0.0);
            u_xlat2.x = u_xlat15.x * u_xlat2.x + -4.0;
            u_xlat2.x = exp2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
            u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
            u_xlat2.xyz = u_xlat2.xxx * u_xlat17.zyy + vec3(u_xlat41);
            u_xlat2.xyz = (u_xlatb4.y) ? u_xlat6.xyz : u_xlat2.xyz;
            u_xlat2.xyz = (u_xlatb4.x) ? u_xlat5.xyz : u_xlat2.xyz;
        } else {
            u_xlat4.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat4.xyxx).xy;
            u_xlatb41 = u_xlatb4.y || u_xlatb4.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb41)) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat4.xy = (bool(u_xlatb41)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat4.xy = u_xlat0.xy * u_xlat4.xy;
            u_xlat30.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(u_xlat4.xyxx, u_xlat30.xyxx).xy;
            u_xlatb41 = u_xlatb4.y || u_xlatb4.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb41)) ? u_xlat3 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb41 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb41 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb41){
                u_xlat3.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat41 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat41 = max(u_xlat41, u_xlat4.x);
                u_xlat41 = log2(u_xlat41);
                u_xlat41 = u_xlat41 * 0.5;
                u_xlat41 = max(u_xlat41, 0.0);
                u_xlat41 = u_xlat41 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat41);
                u_xlat41 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat16 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat42 = sqrt(u_xlat41);
                u_xlat4.x = sqrt(u_xlat16);
                u_xlat41 = inversesqrt(u_xlat41);
                u_xlat41 = u_xlat41 * abs(u_xlat3.z);
                u_xlat16 = inversesqrt(u_xlat16);
                u_xlat3.x = u_xlat16 * abs(u_xlat3.x);
                u_xlat41 = u_xlat41 * u_xlat3.x;
                u_xlat41 = (-u_xlat41) * u_xlat41 + 1.0;
                u_xlat41 = sqrt(u_xlat41);
                u_xlat3.x = u_xlat42 * u_xlat4.x;
                u_xlat16 = u_xlat41 * u_xlat3.x;
                u_xlat29.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat4.x = fract((-u_xlat29.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat29.xy = fract(u_xlat29.xy);
                u_xlat29.xy = u_xlat29.xy + vec2(0.5, 0.5);
                u_xlat29.xy = floor(u_xlat29.xy);
                u_xlat4.x = (-u_xlat29.x) + u_xlat4.x;
                u_xlat29.x = u_xlat4.x * u_xlat29.y + u_xlat29.x;
                u_xlat42 = (-u_xlat3.x) * u_xlat41 + 1.0;
                u_xlat4.xyz = (-u_xlat29.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat42) * u_xlat4.xyz + u_xlat29.xxx;
                u_xlatb16.xz = lessThan(vec4(u_xlat16), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat29.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat41 = u_xlat3.x * u_xlat41 + -4.0;
                u_xlat41 = exp2(u_xlat41);
                u_xlat41 = u_xlat41 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat41 = min(max(u_xlat41, 0.0), 1.0);
#else
                u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat41) * u_xlat4.zyy + u_xlat29.xxx;
                u_xlat3.xzw = (u_xlatb16.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat2.xyz = (u_xlatb16.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb41 = !!(u_xlat1.x>=u_xlat0.x);
#else
                u_xlatb41 = u_xlat1.x>=u_xlat0.x;
#endif
                if(u_xlatb41){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat29.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat41 = max(u_xlat41, u_xlat29.x);
                    u_xlat41 = log2(u_xlat41);
                    u_xlat41 = u_xlat41 * 0.5;
                    u_xlat41 = max(u_xlat41, 0.0);
                    u_xlat41 = u_xlat41 + 1.0;
                    u_xlat29.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat29.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat29.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat41);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat41);
                    u_xlat41 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat14.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat16 = sqrt(u_xlat41);
                    u_xlat29.x = sqrt(u_xlat14.x);
                    u_xlat41 = inversesqrt(u_xlat41);
                    u_xlat41 = u_xlat41 * abs(u_xlat3.x);
                    u_xlat14.x = inversesqrt(u_xlat14.x);
                    u_xlat1.x = u_xlat14.x * abs(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x * u_xlat41;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat14.x = u_xlat29.x * u_xlat16;
                    u_xlat41 = u_xlat1.x * u_xlat14.x;
                    u_xlat27.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat27.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat27.xy = fract(u_xlat27.xy);
                    u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                    u_xlat27.xy = floor(u_xlat27.xy);
                    u_xlat3.x = (-u_xlat27.x) + u_xlat3.x;
                    u_xlat27.x = u_xlat3.x * u_xlat27.y + u_xlat27.x;
                    u_xlat40 = (-u_xlat14.x) * u_xlat1.x + 1.0;
                    u_xlat3.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat40) * u_xlat3.xyz + u_xlat27.xxx;
                    u_xlatb3.xw = lessThan(vec4(u_xlat41), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat5.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat14.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.zyy + u_xlat27.xxx;
                    u_xlat1.xyz = (u_xlatb3.w) ? u_xlat5.xyz : u_xlat1.xyz;
                    u_xlat2.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat40 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat27.x = max(u_xlat40, u_xlat27.x);
                    u_xlat27.x = log2(u_xlat27.x);
                    u_xlat27.x = u_xlat27.x * 0.5;
                    u_xlat27.x = max(u_xlat27.x, 0.0);
                    u_xlat27.x = u_xlat27.x + 1.0;
                    u_xlat40 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat40) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat40);
                    u_xlat1.xy = u_xlat1.xy / u_xlat27.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat27.xx;
                    u_xlat14.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat13 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat27.x = sqrt(u_xlat14.x);
                    u_xlat40 = sqrt(u_xlat13);
                    u_xlat14.x = inversesqrt(u_xlat14.x);
                    u_xlat1.x = u_xlat14.x * abs(u_xlat1.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat0.x = u_xlat13 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat13 = u_xlat40 * u_xlat27.x;
                    u_xlat1.x = u_xlat0.x * u_xlat13;
                    u_xlat26.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat14.x = fract((-u_xlat26.x));
                    u_xlat14.x = u_xlat14.x + 0.5;
                    u_xlat14.x = floor(u_xlat14.x);
                    u_xlat26.xy = fract(u_xlat26.xy);
                    u_xlat26.xy = u_xlat26.xy + vec2(0.5, 0.5);
                    u_xlat26.xy = floor(u_xlat26.xy);
                    u_xlat14.x = (-u_xlat26.x) + u_xlat14.x;
                    u_xlat26.x = u_xlat14.x * u_xlat26.y + u_xlat26.x;
                    u_xlat39 = (-u_xlat13) * u_xlat0.x + 1.0;
                    u_xlat14.xyz = (-u_xlat26.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat39) * u_xlat14.xyz + u_xlat26.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = u_xlat26.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat13 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + u_xlat26.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat2.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat2.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_39 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_39 = min(u_xlat16_39, 0.999000013);
    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_46 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat16_46 = sqrt(u_xlat16_46);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(u_xlat16_46<_FillNormalGaps);
#else
    u_xlatb1.x = u_xlat16_46<_FillNormalGaps;
#endif
    u_xlat16_8.xy = (u_xlatb1.x) ? vec2(0.0, 0.0) : u_xlat16_8.xy;
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = vec3(u_xlat41) * u_xlat2.xyz;
    u_xlat16_46 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat16_39) + 1.0;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x + u_xlat16_39;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.yyy * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_47 = (-u_xlat16_46) + 1.0;
    u_xlat16_0 = max(u_xlat16_47, 0.00100000005);
    u_xlat16_47 = u_xlat16_0 * u_xlat16_1.y;
    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;
    u_xlat16_47 = u_xlat16_47 * -0.5 + 1.0;
    u_xlat16_9.xyz = vec3(u_xlat16_47) * u_xlat16_8.xyz;
    u_xlat16_48 = dot(u_xlat2.xyz, u_xlat1.xzw);
    u_xlat16_10.x = u_xlat16_48 + u_xlat16_48;
    u_xlat16_10.xyz = u_xlat1.xzw * (-u_xlat16_10.xxx) + u_xlat2.xyz;
    u_xlat16_10.xyz = (-u_xlat16_10.xyz);
    u_xlat16_49 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_49 = u_xlat16_0 * u_xlat16_49;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_10.xyz, u_xlat16_49);
    u_xlat16_49 = u_xlat10_2.w + -1.0;
    u_xlat16_49 = _ReflectionCube_HDR.w * u_xlat16_49 + 1.0;
    u_xlat16_49 = log2(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * _ReflectionCube_HDR.y;
    u_xlat16_49 = exp2(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * _ReflectionCube_HDR.x;
    u_xlat16_11.xyz = u_xlat10_2.xyz * vec3(u_xlat16_49);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_11.xyz;
    u_xlat16_49 = (-u_xlat16_0) + 1.0;
    u_xlat16_11.xyz = vec3(u_xlat16_49) * u_xlat16_11.xyz;
    u_xlat16_48 = max(u_xlat16_48, 0.00100000005);
    u_xlat16_10.x = dot(u_xlat1.xzw, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.00100000005);
    u_xlat16_23 = u_xlat16_48 * -5.55472994 + -6.98316002;
    u_xlat16_23 = u_xlat16_48 * u_xlat16_23;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_12.xyz = (-u_xlat16_8.xyz) * vec3(u_xlat16_47) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_12.xyz * vec3(u_xlat16_23) + u_xlat16_9.xyz;
    u_xlat16_47 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_47 = u_xlat16_47 * 0.5;
    u_xlat16_47 = max(u_xlat16_47, 9.99999975e-05);
    u_xlat16_23 = (-u_xlat16_47) + 1.0;
    u_xlat16_36 = u_xlat16_10.x * u_xlat16_23 + u_xlat16_47;
    u_xlat16_36 = float(1.0) / u_xlat16_36;
    u_xlat16_47 = u_xlat16_48 * u_xlat16_23 + u_xlat16_47;
    u_xlat16_47 = float(1.0) / u_xlat16_47;
    u_xlat16_47 = u_xlat16_47 * u_xlat16_36;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_11.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_47) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_9.xyz;
    u_xlat16_47 = (-u_xlat16_1.y) + 1.0;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_47);
    SV_Target1.xyz = u_xlat16_9.xyz * u_xlat16_10.xxx + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : u_xlat16_8.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_8.xy;
    SV_Target2.w = u_xlat16_46;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
vec3 u_xlat15;
float u_xlat16;
bvec3 u_xlatb16;
vec3 u_xlat17;
mediump float u_xlat16_23;
vec2 u_xlat26;
vec2 u_xlat27;
float u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat39;
mediump float u_xlat16_39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(256.0<u_xlat0.x);
#else
        u_xlatb13 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb13)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat26.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat26.x = dot(u_xlat26.xy, u_xlat26.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat26.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat13 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat13 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(256.0<u_xlat0.x);
#else
        u_xlatb13 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb13)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat27.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat27.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat1 = (u_xlatb1.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb2 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb2){
            u_xlat2.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat2.zw = dFdx(u_xlat2.xy);
            u_xlat2.xy = dFdy(u_xlat2.xy);
            u_xlat4.x = dot(u_xlat2.zw, u_xlat2.zw);
            u_xlat17.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat4.x = max(u_xlat17.x, u_xlat4.x);
            u_xlat4.x = log2(u_xlat4.x);
            u_xlat4.x = u_xlat4.x * 0.5;
            u_xlat4.x = max(u_xlat4.x, 0.0);
            u_xlat4.x = u_xlat4.x + 1.0;
            u_xlat17.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat2 = u_xlat2 * u_xlat17.xxxx;
            u_xlat2 = u_xlat2 / u_xlat4.xxxx;
            u_xlat15.z = dot(abs(u_xlat2.zw), abs(u_xlat2.zw));
            u_xlat15.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
            u_xlat4.xy = sqrt(u_xlat15.zx);
            u_xlat15.z = inversesqrt(u_xlat15.z);
            u_xlat15.x = inversesqrt(u_xlat15.x);
            u_xlat2.xz = u_xlat15.xz * abs(u_xlat2.xz);
            u_xlat2.x = u_xlat2.x * u_xlat2.z;
            u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat15.x = u_xlat4.y * u_xlat4.x;
            u_xlat28 = u_xlat2.x * u_xlat15.x;
            u_xlat4.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat41 = fract((-u_xlat4.x));
            u_xlat41 = u_xlat41 + 0.5;
            u_xlat41 = floor(u_xlat41);
            u_xlat4.xy = fract(u_xlat4.xy);
            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
            u_xlat4.xy = floor(u_xlat4.xy);
            u_xlat41 = u_xlat41 + (-u_xlat4.x);
            u_xlat41 = u_xlat41 * u_xlat4.y + u_xlat4.x;
            u_xlat4.x = (-u_xlat15.x) * u_xlat2.x + 1.0;
            u_xlat17.xyz = (-vec3(u_xlat41)) + vec3(0.5, 0.0, 1.0);
            u_xlat5.xyz = u_xlat4.xxx * u_xlat17.xyz + vec3(u_xlat41);
            u_xlatb4.xy = lessThan(vec4(u_xlat28), vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat6.xyz = vec3(u_xlat41) * vec3(0.0, 1.0, 0.0);
            u_xlat2.x = u_xlat15.x * u_xlat2.x + -4.0;
            u_xlat2.x = exp2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
            u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
            u_xlat2.xyz = u_xlat2.xxx * u_xlat17.zyy + vec3(u_xlat41);
            u_xlat2.xyz = (u_xlatb4.y) ? u_xlat6.xyz : u_xlat2.xyz;
            u_xlat2.xyz = (u_xlatb4.x) ? u_xlat5.xyz : u_xlat2.xyz;
        } else {
            u_xlat4.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat4.xyxx).xy;
            u_xlatb41 = u_xlatb4.y || u_xlatb4.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb41)) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat4.xy = (bool(u_xlatb41)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat4.xy = u_xlat0.xy * u_xlat4.xy;
            u_xlat30.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(u_xlat4.xyxx, u_xlat30.xyxx).xy;
            u_xlatb41 = u_xlatb4.y || u_xlatb4.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb41)) ? u_xlat3 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb41 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb41 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb41){
                u_xlat3.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat41 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat41 = max(u_xlat41, u_xlat4.x);
                u_xlat41 = log2(u_xlat41);
                u_xlat41 = u_xlat41 * 0.5;
                u_xlat41 = max(u_xlat41, 0.0);
                u_xlat41 = u_xlat41 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat41);
                u_xlat41 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat16 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat42 = sqrt(u_xlat41);
                u_xlat4.x = sqrt(u_xlat16);
                u_xlat41 = inversesqrt(u_xlat41);
                u_xlat41 = u_xlat41 * abs(u_xlat3.z);
                u_xlat16 = inversesqrt(u_xlat16);
                u_xlat3.x = u_xlat16 * abs(u_xlat3.x);
                u_xlat41 = u_xlat41 * u_xlat3.x;
                u_xlat41 = (-u_xlat41) * u_xlat41 + 1.0;
                u_xlat41 = sqrt(u_xlat41);
                u_xlat3.x = u_xlat42 * u_xlat4.x;
                u_xlat16 = u_xlat41 * u_xlat3.x;
                u_xlat29.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat4.x = fract((-u_xlat29.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat29.xy = fract(u_xlat29.xy);
                u_xlat29.xy = u_xlat29.xy + vec2(0.5, 0.5);
                u_xlat29.xy = floor(u_xlat29.xy);
                u_xlat4.x = (-u_xlat29.x) + u_xlat4.x;
                u_xlat29.x = u_xlat4.x * u_xlat29.y + u_xlat29.x;
                u_xlat42 = (-u_xlat3.x) * u_xlat41 + 1.0;
                u_xlat4.xyz = (-u_xlat29.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat42) * u_xlat4.xyz + u_xlat29.xxx;
                u_xlatb16.xz = lessThan(vec4(u_xlat16), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat29.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat41 = u_xlat3.x * u_xlat41 + -4.0;
                u_xlat41 = exp2(u_xlat41);
                u_xlat41 = u_xlat41 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat41 = min(max(u_xlat41, 0.0), 1.0);
#else
                u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat41) * u_xlat4.zyy + u_xlat29.xxx;
                u_xlat3.xzw = (u_xlatb16.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat2.xyz = (u_xlatb16.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb41 = !!(u_xlat1.x>=u_xlat0.x);
#else
                u_xlatb41 = u_xlat1.x>=u_xlat0.x;
#endif
                if(u_xlatb41){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat29.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat41 = max(u_xlat41, u_xlat29.x);
                    u_xlat41 = log2(u_xlat41);
                    u_xlat41 = u_xlat41 * 0.5;
                    u_xlat41 = max(u_xlat41, 0.0);
                    u_xlat41 = u_xlat41 + 1.0;
                    u_xlat29.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat29.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat29.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat41);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat41);
                    u_xlat41 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat14.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat16 = sqrt(u_xlat41);
                    u_xlat29.x = sqrt(u_xlat14.x);
                    u_xlat41 = inversesqrt(u_xlat41);
                    u_xlat41 = u_xlat41 * abs(u_xlat3.x);
                    u_xlat14.x = inversesqrt(u_xlat14.x);
                    u_xlat1.x = u_xlat14.x * abs(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x * u_xlat41;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat14.x = u_xlat29.x * u_xlat16;
                    u_xlat41 = u_xlat1.x * u_xlat14.x;
                    u_xlat27.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat27.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat27.xy = fract(u_xlat27.xy);
                    u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                    u_xlat27.xy = floor(u_xlat27.xy);
                    u_xlat3.x = (-u_xlat27.x) + u_xlat3.x;
                    u_xlat27.x = u_xlat3.x * u_xlat27.y + u_xlat27.x;
                    u_xlat40 = (-u_xlat14.x) * u_xlat1.x + 1.0;
                    u_xlat3.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat40) * u_xlat3.xyz + u_xlat27.xxx;
                    u_xlatb3.xw = lessThan(vec4(u_xlat41), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat5.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat14.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.zyy + u_xlat27.xxx;
                    u_xlat1.xyz = (u_xlatb3.w) ? u_xlat5.xyz : u_xlat1.xyz;
                    u_xlat2.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat40 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat27.x = max(u_xlat40, u_xlat27.x);
                    u_xlat27.x = log2(u_xlat27.x);
                    u_xlat27.x = u_xlat27.x * 0.5;
                    u_xlat27.x = max(u_xlat27.x, 0.0);
                    u_xlat27.x = u_xlat27.x + 1.0;
                    u_xlat40 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat40) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat40);
                    u_xlat1.xy = u_xlat1.xy / u_xlat27.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat27.xx;
                    u_xlat14.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat13 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat27.x = sqrt(u_xlat14.x);
                    u_xlat40 = sqrt(u_xlat13);
                    u_xlat14.x = inversesqrt(u_xlat14.x);
                    u_xlat1.x = u_xlat14.x * abs(u_xlat1.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat0.x = u_xlat13 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat13 = u_xlat40 * u_xlat27.x;
                    u_xlat1.x = u_xlat0.x * u_xlat13;
                    u_xlat26.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat14.x = fract((-u_xlat26.x));
                    u_xlat14.x = u_xlat14.x + 0.5;
                    u_xlat14.x = floor(u_xlat14.x);
                    u_xlat26.xy = fract(u_xlat26.xy);
                    u_xlat26.xy = u_xlat26.xy + vec2(0.5, 0.5);
                    u_xlat26.xy = floor(u_xlat26.xy);
                    u_xlat14.x = (-u_xlat26.x) + u_xlat14.x;
                    u_xlat26.x = u_xlat14.x * u_xlat26.y + u_xlat26.x;
                    u_xlat39 = (-u_xlat13) * u_xlat0.x + 1.0;
                    u_xlat14.xyz = (-u_xlat26.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat39) * u_xlat14.xyz + u_xlat26.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = u_xlat26.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat13 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + u_xlat26.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat2.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat2.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_39 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_39 = min(u_xlat16_39, 0.999000013);
    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_46 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat16_46 = sqrt(u_xlat16_46);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(u_xlat16_46<_FillNormalGaps);
#else
    u_xlatb1.x = u_xlat16_46<_FillNormalGaps;
#endif
    u_xlat16_8.xy = (u_xlatb1.x) ? vec2(0.0, 0.0) : u_xlat16_8.xy;
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = vec3(u_xlat41) * u_xlat2.xyz;
    u_xlat16_46 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat16_39) + 1.0;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x + u_xlat16_39;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.yyy * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_47 = (-u_xlat16_46) + 1.0;
    u_xlat16_0 = max(u_xlat16_47, 0.00100000005);
    u_xlat16_47 = u_xlat16_0 * u_xlat16_1.y;
    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;
    u_xlat16_47 = u_xlat16_47 * -0.5 + 1.0;
    u_xlat16_9.xyz = vec3(u_xlat16_47) * u_xlat16_8.xyz;
    u_xlat16_48 = dot(u_xlat2.xyz, u_xlat1.xzw);
    u_xlat16_10.x = u_xlat16_48 + u_xlat16_48;
    u_xlat16_10.xyz = u_xlat1.xzw * (-u_xlat16_10.xxx) + u_xlat2.xyz;
    u_xlat16_10.xyz = (-u_xlat16_10.xyz);
    u_xlat16_49 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_49 = u_xlat16_0 * u_xlat16_49;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_10.xyz, u_xlat16_49);
    u_xlat16_49 = u_xlat10_2.w + -1.0;
    u_xlat16_49 = _ReflectionCube_HDR.w * u_xlat16_49 + 1.0;
    u_xlat16_49 = log2(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * _ReflectionCube_HDR.y;
    u_xlat16_49 = exp2(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * _ReflectionCube_HDR.x;
    u_xlat16_11.xyz = u_xlat10_2.xyz * vec3(u_xlat16_49);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_11.xyz;
    u_xlat16_49 = (-u_xlat16_0) + 1.0;
    u_xlat16_11.xyz = vec3(u_xlat16_49) * u_xlat16_11.xyz;
    u_xlat16_48 = max(u_xlat16_48, 0.00100000005);
    u_xlat16_10.x = dot(u_xlat1.xzw, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.00100000005);
    u_xlat16_23 = u_xlat16_48 * -5.55472994 + -6.98316002;
    u_xlat16_23 = u_xlat16_48 * u_xlat16_23;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_12.xyz = (-u_xlat16_8.xyz) * vec3(u_xlat16_47) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_12.xyz * vec3(u_xlat16_23) + u_xlat16_9.xyz;
    u_xlat16_47 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_47 = u_xlat16_47 * 0.5;
    u_xlat16_47 = max(u_xlat16_47, 9.99999975e-05);
    u_xlat16_23 = (-u_xlat16_47) + 1.0;
    u_xlat16_36 = u_xlat16_10.x * u_xlat16_23 + u_xlat16_47;
    u_xlat16_36 = float(1.0) / u_xlat16_36;
    u_xlat16_47 = u_xlat16_48 * u_xlat16_23 + u_xlat16_47;
    u_xlat16_47 = float(1.0) / u_xlat16_47;
    u_xlat16_47 = u_xlat16_47 * u_xlat16_36;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_11.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_47) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_9.xyz;
    u_xlat16_47 = (-u_xlat16_1.y) + 1.0;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_47);
    SV_Target1.xyz = u_xlat16_9.xyz * u_xlat16_10.xxx + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : u_xlat16_8.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_8.xy;
    SV_Target2.w = u_xlat16_46;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
vec3 u_xlat15;
float u_xlat16;
bvec3 u_xlatb16;
vec3 u_xlat17;
mediump float u_xlat16_23;
vec2 u_xlat26;
vec2 u_xlat27;
float u_xlat28;
vec2 u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat39;
mediump float u_xlat16_39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(256.0<u_xlat0.x);
#else
        u_xlatb13 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb13)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat26.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat26.x = dot(u_xlat26.xy, u_xlat26.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat26.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat13 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat13 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(256.0<u_xlat0.x);
#else
        u_xlatb13 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb13)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat27.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat27.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat1 = (u_xlatb1.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb2 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb2){
            u_xlat2.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat2.zw = dFdx(u_xlat2.xy);
            u_xlat2.xy = dFdy(u_xlat2.xy);
            u_xlat4.x = dot(u_xlat2.zw, u_xlat2.zw);
            u_xlat17.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat4.x = max(u_xlat17.x, u_xlat4.x);
            u_xlat4.x = log2(u_xlat4.x);
            u_xlat4.x = u_xlat4.x * 0.5;
            u_xlat4.x = max(u_xlat4.x, 0.0);
            u_xlat4.x = u_xlat4.x + 1.0;
            u_xlat17.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat2 = u_xlat2 * u_xlat17.xxxx;
            u_xlat2 = u_xlat2 / u_xlat4.xxxx;
            u_xlat15.z = dot(abs(u_xlat2.zw), abs(u_xlat2.zw));
            u_xlat15.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
            u_xlat4.xy = sqrt(u_xlat15.zx);
            u_xlat15.z = inversesqrt(u_xlat15.z);
            u_xlat15.x = inversesqrt(u_xlat15.x);
            u_xlat2.xz = u_xlat15.xz * abs(u_xlat2.xz);
            u_xlat2.x = u_xlat2.x * u_xlat2.z;
            u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat15.x = u_xlat4.y * u_xlat4.x;
            u_xlat28 = u_xlat2.x * u_xlat15.x;
            u_xlat4.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat41 = fract((-u_xlat4.x));
            u_xlat41 = u_xlat41 + 0.5;
            u_xlat41 = floor(u_xlat41);
            u_xlat4.xy = fract(u_xlat4.xy);
            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
            u_xlat4.xy = floor(u_xlat4.xy);
            u_xlat41 = u_xlat41 + (-u_xlat4.x);
            u_xlat41 = u_xlat41 * u_xlat4.y + u_xlat4.x;
            u_xlat4.x = (-u_xlat15.x) * u_xlat2.x + 1.0;
            u_xlat17.xyz = (-vec3(u_xlat41)) + vec3(0.5, 0.0, 1.0);
            u_xlat5.xyz = u_xlat4.xxx * u_xlat17.xyz + vec3(u_xlat41);
            u_xlatb4.xy = lessThan(vec4(u_xlat28), vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat6.xyz = vec3(u_xlat41) * vec3(0.0, 1.0, 0.0);
            u_xlat2.x = u_xlat15.x * u_xlat2.x + -4.0;
            u_xlat2.x = exp2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
            u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
            u_xlat2.xyz = u_xlat2.xxx * u_xlat17.zyy + vec3(u_xlat41);
            u_xlat2.xyz = (u_xlatb4.y) ? u_xlat6.xyz : u_xlat2.xyz;
            u_xlat2.xyz = (u_xlatb4.x) ? u_xlat5.xyz : u_xlat2.xyz;
        } else {
            u_xlat4.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat4.xyxx).xy;
            u_xlatb41 = u_xlatb4.y || u_xlatb4.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb41)) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat4.xy = (bool(u_xlatb41)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat4.xy = u_xlat0.xy * u_xlat4.xy;
            u_xlat30.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(u_xlat4.xyxx, u_xlat30.xyxx).xy;
            u_xlatb41 = u_xlatb4.y || u_xlatb4.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb41)) ? u_xlat3 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb41 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb41 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb41){
                u_xlat3.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat41 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat41 = max(u_xlat41, u_xlat4.x);
                u_xlat41 = log2(u_xlat41);
                u_xlat41 = u_xlat41 * 0.5;
                u_xlat41 = max(u_xlat41, 0.0);
                u_xlat41 = u_xlat41 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat41);
                u_xlat41 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat16 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat42 = sqrt(u_xlat41);
                u_xlat4.x = sqrt(u_xlat16);
                u_xlat41 = inversesqrt(u_xlat41);
                u_xlat41 = u_xlat41 * abs(u_xlat3.z);
                u_xlat16 = inversesqrt(u_xlat16);
                u_xlat3.x = u_xlat16 * abs(u_xlat3.x);
                u_xlat41 = u_xlat41 * u_xlat3.x;
                u_xlat41 = (-u_xlat41) * u_xlat41 + 1.0;
                u_xlat41 = sqrt(u_xlat41);
                u_xlat3.x = u_xlat42 * u_xlat4.x;
                u_xlat16 = u_xlat41 * u_xlat3.x;
                u_xlat29.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat4.x = fract((-u_xlat29.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat29.xy = fract(u_xlat29.xy);
                u_xlat29.xy = u_xlat29.xy + vec2(0.5, 0.5);
                u_xlat29.xy = floor(u_xlat29.xy);
                u_xlat4.x = (-u_xlat29.x) + u_xlat4.x;
                u_xlat29.x = u_xlat4.x * u_xlat29.y + u_xlat29.x;
                u_xlat42 = (-u_xlat3.x) * u_xlat41 + 1.0;
                u_xlat4.xyz = (-u_xlat29.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat42) * u_xlat4.xyz + u_xlat29.xxx;
                u_xlatb16.xz = lessThan(vec4(u_xlat16), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat29.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat41 = u_xlat3.x * u_xlat41 + -4.0;
                u_xlat41 = exp2(u_xlat41);
                u_xlat41 = u_xlat41 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat41 = min(max(u_xlat41, 0.0), 1.0);
#else
                u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat41) * u_xlat4.zyy + u_xlat29.xxx;
                u_xlat3.xzw = (u_xlatb16.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat2.xyz = (u_xlatb16.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb41 = !!(u_xlat1.x>=u_xlat0.x);
#else
                u_xlatb41 = u_xlat1.x>=u_xlat0.x;
#endif
                if(u_xlatb41){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat41 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat29.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat41 = max(u_xlat41, u_xlat29.x);
                    u_xlat41 = log2(u_xlat41);
                    u_xlat41 = u_xlat41 * 0.5;
                    u_xlat41 = max(u_xlat41, 0.0);
                    u_xlat41 = u_xlat41 + 1.0;
                    u_xlat29.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat29.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat29.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat41);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat41);
                    u_xlat41 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat14.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat16 = sqrt(u_xlat41);
                    u_xlat29.x = sqrt(u_xlat14.x);
                    u_xlat41 = inversesqrt(u_xlat41);
                    u_xlat41 = u_xlat41 * abs(u_xlat3.x);
                    u_xlat14.x = inversesqrt(u_xlat14.x);
                    u_xlat1.x = u_xlat14.x * abs(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x * u_xlat41;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat14.x = u_xlat29.x * u_xlat16;
                    u_xlat41 = u_xlat1.x * u_xlat14.x;
                    u_xlat27.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat27.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat27.xy = fract(u_xlat27.xy);
                    u_xlat27.xy = u_xlat27.xy + vec2(0.5, 0.5);
                    u_xlat27.xy = floor(u_xlat27.xy);
                    u_xlat3.x = (-u_xlat27.x) + u_xlat3.x;
                    u_xlat27.x = u_xlat3.x * u_xlat27.y + u_xlat27.x;
                    u_xlat40 = (-u_xlat14.x) * u_xlat1.x + 1.0;
                    u_xlat3.xyz = (-u_xlat27.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat40) * u_xlat3.xyz + u_xlat27.xxx;
                    u_xlatb3.xw = lessThan(vec4(u_xlat41), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat5.xyz = u_xlat27.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat14.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.zyy + u_xlat27.xxx;
                    u_xlat1.xyz = (u_xlatb3.w) ? u_xlat5.xyz : u_xlat1.xyz;
                    u_xlat2.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat27.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat40 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat27.x = max(u_xlat40, u_xlat27.x);
                    u_xlat27.x = log2(u_xlat27.x);
                    u_xlat27.x = u_xlat27.x * 0.5;
                    u_xlat27.x = max(u_xlat27.x, 0.0);
                    u_xlat27.x = u_xlat27.x + 1.0;
                    u_xlat40 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat40) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat40);
                    u_xlat1.xy = u_xlat1.xy / u_xlat27.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat27.xx;
                    u_xlat14.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat13 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat27.x = sqrt(u_xlat14.x);
                    u_xlat40 = sqrt(u_xlat13);
                    u_xlat14.x = inversesqrt(u_xlat14.x);
                    u_xlat1.x = u_xlat14.x * abs(u_xlat1.x);
                    u_xlat13 = inversesqrt(u_xlat13);
                    u_xlat0.x = u_xlat13 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat13 = u_xlat40 * u_xlat27.x;
                    u_xlat1.x = u_xlat0.x * u_xlat13;
                    u_xlat26.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat14.x = fract((-u_xlat26.x));
                    u_xlat14.x = u_xlat14.x + 0.5;
                    u_xlat14.x = floor(u_xlat14.x);
                    u_xlat26.xy = fract(u_xlat26.xy);
                    u_xlat26.xy = u_xlat26.xy + vec2(0.5, 0.5);
                    u_xlat26.xy = floor(u_xlat26.xy);
                    u_xlat14.x = (-u_xlat26.x) + u_xlat14.x;
                    u_xlat26.x = u_xlat14.x * u_xlat26.y + u_xlat26.x;
                    u_xlat39 = (-u_xlat13) * u_xlat0.x + 1.0;
                    u_xlat14.xyz = (-u_xlat26.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat39) * u_xlat14.xyz + u_xlat26.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = u_xlat26.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat13 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat14.zyy + u_xlat26.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat2.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat2.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_39 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_39 = min(u_xlat16_39, 0.999000013);
    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_46 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat16_46 = sqrt(u_xlat16_46);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(u_xlat16_46<_FillNormalGaps);
#else
    u_xlatb1.x = u_xlat16_46<_FillNormalGaps;
#endif
    u_xlat16_8.xy = (u_xlatb1.x) ? vec2(0.0, 0.0) : u_xlat16_8.xy;
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.x = vs_TEXCOORD1.w;
    u_xlat2.y = vs_TEXCOORD2.w;
    u_xlat2.z = vs_TEXCOORD3.w;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat2.xyz = vec3(u_xlat41) * u_xlat2.xyz;
    u_xlat16_46 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat16_39) + 1.0;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x + u_xlat16_39;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.yyy * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_47 = (-u_xlat16_46) + 1.0;
    u_xlat16_0 = max(u_xlat16_47, 0.00100000005);
    u_xlat16_47 = u_xlat16_0 * u_xlat16_1.y;
    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;
    u_xlat16_47 = u_xlat16_47 * -0.5 + 1.0;
    u_xlat16_9.xyz = vec3(u_xlat16_47) * u_xlat16_8.xyz;
    u_xlat16_48 = dot(u_xlat2.xyz, u_xlat1.xzw);
    u_xlat16_10.x = u_xlat16_48 + u_xlat16_48;
    u_xlat16_10.xyz = u_xlat1.xzw * (-u_xlat16_10.xxx) + u_xlat2.xyz;
    u_xlat16_10.xyz = (-u_xlat16_10.xyz);
    u_xlat16_49 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_49 = u_xlat16_0 * u_xlat16_49;
    u_xlat10_2 = textureLod(_ReflectionCube, u_xlat16_10.xyz, u_xlat16_49);
    u_xlat16_49 = u_xlat10_2.w + -1.0;
    u_xlat16_49 = _ReflectionCube_HDR.w * u_xlat16_49 + 1.0;
    u_xlat16_49 = log2(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * _ReflectionCube_HDR.y;
    u_xlat16_49 = exp2(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * _ReflectionCube_HDR.x;
    u_xlat16_11.xyz = u_xlat10_2.xyz * vec3(u_xlat16_49);
    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_11.xyz;
    u_xlat16_49 = (-u_xlat16_0) + 1.0;
    u_xlat16_11.xyz = vec3(u_xlat16_49) * u_xlat16_11.xyz;
    u_xlat16_48 = max(u_xlat16_48, 0.00100000005);
    u_xlat16_10.x = dot(u_xlat1.xzw, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.00100000005);
    u_xlat16_23 = u_xlat16_48 * -5.55472994 + -6.98316002;
    u_xlat16_23 = u_xlat16_48 * u_xlat16_23;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_12.xyz = (-u_xlat16_8.xyz) * vec3(u_xlat16_47) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_12.xyz * vec3(u_xlat16_23) + u_xlat16_9.xyz;
    u_xlat16_47 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_47 = u_xlat16_47 * 0.5;
    u_xlat16_47 = max(u_xlat16_47, 9.99999975e-05);
    u_xlat16_23 = (-u_xlat16_47) + 1.0;
    u_xlat16_36 = u_xlat16_10.x * u_xlat16_23 + u_xlat16_47;
    u_xlat16_36 = float(1.0) / u_xlat16_36;
    u_xlat16_47 = u_xlat16_48 * u_xlat16_23 + u_xlat16_47;
    u_xlat16_47 = float(1.0) / u_xlat16_47;
    u_xlat16_47 = u_xlat16_47 * u_xlat16_36;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_11.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_47) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_9.xyz;
    u_xlat16_47 = (-u_xlat16_1.y) + 1.0;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_47);
    SV_Target1.xyz = u_xlat16_9.xyz * u_xlat16_10.xxx + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : u_xlat16_8.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_8.xy;
    SV_Target2.w = u_xlat16_46;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
vec2 u_xlat18;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat21;
vec2 u_xlat22;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
mediump float u_xlat16_34;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat19.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat1 = (u_xlatb1.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb2 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb2){
            u_xlat2.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat2.zw = dFdx(u_xlat2.xy);
            u_xlat2.xy = dFdy(u_xlat2.xy);
            u_xlat4.x = dot(u_xlat2.zw, u_xlat2.zw);
            u_xlat13.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat4.x = max(u_xlat13.x, u_xlat4.x);
            u_xlat4.x = log2(u_xlat4.x);
            u_xlat4.x = u_xlat4.x * 0.5;
            u_xlat4.x = max(u_xlat4.x, 0.0);
            u_xlat4.x = u_xlat4.x + 1.0;
            u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat2 = u_xlat2 * u_xlat13.xxxx;
            u_xlat2 = u_xlat2 / u_xlat4.xxxx;
            u_xlat11.z = dot(abs(u_xlat2.zw), abs(u_xlat2.zw));
            u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
            u_xlat4.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat2.xz = u_xlat11.xz * abs(u_xlat2.xz);
            u_xlat2.x = u_xlat2.x * u_xlat2.z;
            u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat11.x = u_xlat4.y * u_xlat4.x;
            u_xlat20 = u_xlat2.x * u_xlat11.x;
            u_xlat4.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat29 = fract((-u_xlat4.x));
            u_xlat29 = u_xlat29 + 0.5;
            u_xlat29 = floor(u_xlat29);
            u_xlat4.xy = fract(u_xlat4.xy);
            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
            u_xlat4.xy = floor(u_xlat4.xy);
            u_xlat29 = u_xlat29 + (-u_xlat4.x);
            u_xlat29 = u_xlat29 * u_xlat4.y + u_xlat4.x;
            u_xlat4.x = (-u_xlat11.x) * u_xlat2.x + 1.0;
            u_xlat13.xyz = (-vec3(u_xlat29)) + vec3(0.5, 0.0, 1.0);
            u_xlat5.xyz = u_xlat4.xxx * u_xlat13.xyz + vec3(u_xlat29);
            u_xlatb4.xy = lessThan(vec4(u_xlat20), vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat6.xyz = vec3(u_xlat29) * vec3(0.0, 1.0, 0.0);
            u_xlat2.x = u_xlat11.x * u_xlat2.x + -4.0;
            u_xlat2.x = exp2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
            u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
            u_xlat2.xyz = u_xlat2.xxx * u_xlat13.zyy + vec3(u_xlat29);
            u_xlat2.xyz = (u_xlatb4.y) ? u_xlat6.xyz : u_xlat2.xyz;
            u_xlat2.xyz = (u_xlatb4.x) ? u_xlat5.xyz : u_xlat2.xyz;
        } else {
            u_xlat4.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat4.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat4.xy = (bool(u_xlatb29)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat4.xy = u_xlat0.xy * u_xlat4.xy;
            u_xlat22.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(u_xlat4.xyxx, u_xlat22.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat3 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb29 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb29 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb29){
                u_xlat3.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat29 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat29 = max(u_xlat29, u_xlat4.x);
                u_xlat29 = log2(u_xlat29);
                u_xlat29 = u_xlat29 * 0.5;
                u_xlat29 = max(u_xlat29, 0.0);
                u_xlat29 = u_xlat29 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat29);
                u_xlat29 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat12 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = sqrt(u_xlat29);
                u_xlat4.x = sqrt(u_xlat12);
                u_xlat29 = inversesqrt(u_xlat29);
                u_xlat29 = u_xlat29 * abs(u_xlat3.z);
                u_xlat12 = inversesqrt(u_xlat12);
                u_xlat3.x = u_xlat12 * abs(u_xlat3.x);
                u_xlat29 = u_xlat29 * u_xlat3.x;
                u_xlat29 = (-u_xlat29) * u_xlat29 + 1.0;
                u_xlat29 = sqrt(u_xlat29);
                u_xlat3.x = u_xlat30 * u_xlat4.x;
                u_xlat12 = u_xlat29 * u_xlat3.x;
                u_xlat21.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat4.x = fract((-u_xlat21.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat21.xy = fract(u_xlat21.xy);
                u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                u_xlat21.xy = floor(u_xlat21.xy);
                u_xlat4.x = (-u_xlat21.x) + u_xlat4.x;
                u_xlat21.x = u_xlat4.x * u_xlat21.y + u_xlat21.x;
                u_xlat30 = (-u_xlat3.x) * u_xlat29 + 1.0;
                u_xlat4.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat21.xxx;
                u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat29 = u_xlat3.x * u_xlat29 + -4.0;
                u_xlat29 = exp2(u_xlat29);
                u_xlat29 = u_xlat29 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
                u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.zyy + u_xlat21.xxx;
                u_xlat3.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat2.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb29 = !!(u_xlat1.x>=u_xlat0.x);
#else
                u_xlatb29 = u_xlat1.x>=u_xlat0.x;
#endif
                if(u_xlatb29){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat29 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat29 = max(u_xlat29, u_xlat21.x);
                    u_xlat29 = log2(u_xlat29);
                    u_xlat29 = u_xlat29 * 0.5;
                    u_xlat29 = max(u_xlat29, 0.0);
                    u_xlat29 = u_xlat29 + 1.0;
                    u_xlat21.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat21.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat21.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat29);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat29);
                    u_xlat29 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat29);
                    u_xlat21.x = sqrt(u_xlat10.x);
                    u_xlat29 = inversesqrt(u_xlat29);
                    u_xlat29 = u_xlat29 * abs(u_xlat3.x);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x * u_xlat29;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat10.x = u_xlat21.x * u_xlat12;
                    u_xlat29 = u_xlat1.x * u_xlat10.x;
                    u_xlat19.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat19.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat19.xy = fract(u_xlat19.xy);
                    u_xlat19.xy = u_xlat19.xy + vec2(0.5, 0.5);
                    u_xlat19.xy = floor(u_xlat19.xy);
                    u_xlat3.x = (-u_xlat19.x) + u_xlat3.x;
                    u_xlat19.x = u_xlat3.x * u_xlat19.y + u_xlat19.x;
                    u_xlat28 = (-u_xlat10.x) * u_xlat1.x + 1.0;
                    u_xlat3.xyz = (-u_xlat19.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat19.xxx;
                    u_xlatb3.xw = lessThan(vec4(u_xlat29), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat5.xyz = u_xlat19.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.zyy + u_xlat19.xxx;
                    u_xlat1.xyz = (u_xlatb3.w) ? u_xlat5.xyz : u_xlat1.xyz;
                    u_xlat2.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat28 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat19.x = max(u_xlat28, u_xlat19.x);
                    u_xlat19.x = log2(u_xlat19.x);
                    u_xlat19.x = u_xlat19.x * 0.5;
                    u_xlat19.x = max(u_xlat19.x, 0.0);
                    u_xlat19.x = u_xlat19.x + 1.0;
                    u_xlat28 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat28) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat28);
                    u_xlat1.xy = u_xlat1.xy / u_xlat19.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat19.xx;
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat19.x = sqrt(u_xlat10.x);
                    u_xlat28 = sqrt(u_xlat9);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat28 * u_xlat19.x;
                    u_xlat1.x = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat10.x = fract((-u_xlat18.x));
                    u_xlat10.x = u_xlat10.x + 0.5;
                    u_xlat10.x = floor(u_xlat10.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat10.x = (-u_xlat18.x) + u_xlat10.x;
                    u_xlat18.x = u_xlat10.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat10.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat18.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat2.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat2.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_27 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_27 = min(u_xlat16_27, 0.999000013);
    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat16_34 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat16_27) + 1.0;
    SV_Target2.w = u_xlat16_34 * u_xlat16_8.x + u_xlat16_27;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.yyy * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_34 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : u_xlat16_8.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_8.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
vec2 u_xlat18;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat21;
vec2 u_xlat22;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
mediump float u_xlat16_34;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat19.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat1 = (u_xlatb1.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb2 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb2){
            u_xlat2.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat2.zw = dFdx(u_xlat2.xy);
            u_xlat2.xy = dFdy(u_xlat2.xy);
            u_xlat4.x = dot(u_xlat2.zw, u_xlat2.zw);
            u_xlat13.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat4.x = max(u_xlat13.x, u_xlat4.x);
            u_xlat4.x = log2(u_xlat4.x);
            u_xlat4.x = u_xlat4.x * 0.5;
            u_xlat4.x = max(u_xlat4.x, 0.0);
            u_xlat4.x = u_xlat4.x + 1.0;
            u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat2 = u_xlat2 * u_xlat13.xxxx;
            u_xlat2 = u_xlat2 / u_xlat4.xxxx;
            u_xlat11.z = dot(abs(u_xlat2.zw), abs(u_xlat2.zw));
            u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
            u_xlat4.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat2.xz = u_xlat11.xz * abs(u_xlat2.xz);
            u_xlat2.x = u_xlat2.x * u_xlat2.z;
            u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat11.x = u_xlat4.y * u_xlat4.x;
            u_xlat20 = u_xlat2.x * u_xlat11.x;
            u_xlat4.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat29 = fract((-u_xlat4.x));
            u_xlat29 = u_xlat29 + 0.5;
            u_xlat29 = floor(u_xlat29);
            u_xlat4.xy = fract(u_xlat4.xy);
            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
            u_xlat4.xy = floor(u_xlat4.xy);
            u_xlat29 = u_xlat29 + (-u_xlat4.x);
            u_xlat29 = u_xlat29 * u_xlat4.y + u_xlat4.x;
            u_xlat4.x = (-u_xlat11.x) * u_xlat2.x + 1.0;
            u_xlat13.xyz = (-vec3(u_xlat29)) + vec3(0.5, 0.0, 1.0);
            u_xlat5.xyz = u_xlat4.xxx * u_xlat13.xyz + vec3(u_xlat29);
            u_xlatb4.xy = lessThan(vec4(u_xlat20), vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat6.xyz = vec3(u_xlat29) * vec3(0.0, 1.0, 0.0);
            u_xlat2.x = u_xlat11.x * u_xlat2.x + -4.0;
            u_xlat2.x = exp2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
            u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
            u_xlat2.xyz = u_xlat2.xxx * u_xlat13.zyy + vec3(u_xlat29);
            u_xlat2.xyz = (u_xlatb4.y) ? u_xlat6.xyz : u_xlat2.xyz;
            u_xlat2.xyz = (u_xlatb4.x) ? u_xlat5.xyz : u_xlat2.xyz;
        } else {
            u_xlat4.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat4.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat4.xy = (bool(u_xlatb29)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat4.xy = u_xlat0.xy * u_xlat4.xy;
            u_xlat22.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(u_xlat4.xyxx, u_xlat22.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat3 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb29 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb29 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb29){
                u_xlat3.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat29 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat29 = max(u_xlat29, u_xlat4.x);
                u_xlat29 = log2(u_xlat29);
                u_xlat29 = u_xlat29 * 0.5;
                u_xlat29 = max(u_xlat29, 0.0);
                u_xlat29 = u_xlat29 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat29);
                u_xlat29 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat12 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = sqrt(u_xlat29);
                u_xlat4.x = sqrt(u_xlat12);
                u_xlat29 = inversesqrt(u_xlat29);
                u_xlat29 = u_xlat29 * abs(u_xlat3.z);
                u_xlat12 = inversesqrt(u_xlat12);
                u_xlat3.x = u_xlat12 * abs(u_xlat3.x);
                u_xlat29 = u_xlat29 * u_xlat3.x;
                u_xlat29 = (-u_xlat29) * u_xlat29 + 1.0;
                u_xlat29 = sqrt(u_xlat29);
                u_xlat3.x = u_xlat30 * u_xlat4.x;
                u_xlat12 = u_xlat29 * u_xlat3.x;
                u_xlat21.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat4.x = fract((-u_xlat21.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat21.xy = fract(u_xlat21.xy);
                u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                u_xlat21.xy = floor(u_xlat21.xy);
                u_xlat4.x = (-u_xlat21.x) + u_xlat4.x;
                u_xlat21.x = u_xlat4.x * u_xlat21.y + u_xlat21.x;
                u_xlat30 = (-u_xlat3.x) * u_xlat29 + 1.0;
                u_xlat4.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat21.xxx;
                u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat29 = u_xlat3.x * u_xlat29 + -4.0;
                u_xlat29 = exp2(u_xlat29);
                u_xlat29 = u_xlat29 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
                u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.zyy + u_xlat21.xxx;
                u_xlat3.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat2.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb29 = !!(u_xlat1.x>=u_xlat0.x);
#else
                u_xlatb29 = u_xlat1.x>=u_xlat0.x;
#endif
                if(u_xlatb29){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat29 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat29 = max(u_xlat29, u_xlat21.x);
                    u_xlat29 = log2(u_xlat29);
                    u_xlat29 = u_xlat29 * 0.5;
                    u_xlat29 = max(u_xlat29, 0.0);
                    u_xlat29 = u_xlat29 + 1.0;
                    u_xlat21.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat21.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat21.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat29);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat29);
                    u_xlat29 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat29);
                    u_xlat21.x = sqrt(u_xlat10.x);
                    u_xlat29 = inversesqrt(u_xlat29);
                    u_xlat29 = u_xlat29 * abs(u_xlat3.x);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x * u_xlat29;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat10.x = u_xlat21.x * u_xlat12;
                    u_xlat29 = u_xlat1.x * u_xlat10.x;
                    u_xlat19.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat19.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat19.xy = fract(u_xlat19.xy);
                    u_xlat19.xy = u_xlat19.xy + vec2(0.5, 0.5);
                    u_xlat19.xy = floor(u_xlat19.xy);
                    u_xlat3.x = (-u_xlat19.x) + u_xlat3.x;
                    u_xlat19.x = u_xlat3.x * u_xlat19.y + u_xlat19.x;
                    u_xlat28 = (-u_xlat10.x) * u_xlat1.x + 1.0;
                    u_xlat3.xyz = (-u_xlat19.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat19.xxx;
                    u_xlatb3.xw = lessThan(vec4(u_xlat29), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat5.xyz = u_xlat19.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.zyy + u_xlat19.xxx;
                    u_xlat1.xyz = (u_xlatb3.w) ? u_xlat5.xyz : u_xlat1.xyz;
                    u_xlat2.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat28 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat19.x = max(u_xlat28, u_xlat19.x);
                    u_xlat19.x = log2(u_xlat19.x);
                    u_xlat19.x = u_xlat19.x * 0.5;
                    u_xlat19.x = max(u_xlat19.x, 0.0);
                    u_xlat19.x = u_xlat19.x + 1.0;
                    u_xlat28 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat28) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat28);
                    u_xlat1.xy = u_xlat1.xy / u_xlat19.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat19.xx;
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat19.x = sqrt(u_xlat10.x);
                    u_xlat28 = sqrt(u_xlat9);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat28 * u_xlat19.x;
                    u_xlat1.x = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat10.x = fract((-u_xlat18.x));
                    u_xlat10.x = u_xlat10.x + 0.5;
                    u_xlat10.x = floor(u_xlat10.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat10.x = (-u_xlat18.x) + u_xlat10.x;
                    u_xlat18.x = u_xlat10.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat10.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat18.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat2.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat2.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_27 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_27 = min(u_xlat16_27, 0.999000013);
    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat16_34 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat16_27) + 1.0;
    SV_Target2.w = u_xlat16_34 * u_xlat16_8.x + u_xlat16_27;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.yyy * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_34 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : u_xlat16_8.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_8.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
vec3 u_xlat15;
vec3 u_xlat16;
vec3 u_xlat17;
vec3 u_xlat18;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
vec2 u_xlat28;
mediump float u_xlat16_28;
lowp vec2 u_xlat10_28;
bvec2 u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
float u_xlat32;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
float u_xlat44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_50;
mediump float u_xlat16_51;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
mediump float u_xlat16_54;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat28.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat28.xy + u_xlat0.xy;
    u_xlat28.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat28.xy : u_xlat0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb28.x){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb28.x){
        u_xlat10_1.xyz = texture(_MainTex, u_xlat0.xy).xyz;
        SV_Target0.xyz = u_xlat10_1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb28.x){
        u_xlat28.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat28.x = max(u_xlat28.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(256.0<u_xlat28.x);
#else
        u_xlatb42 = 256.0<u_xlat28.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat28.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb42)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb28.x){
        u_xlat28.xy = vec2(u_xlat0.x * _MainTex_TexelSize.z, u_xlat0.y * _MainTex_TexelSize.w);
        u_xlat1.xy = dFdx(u_xlat28.xy);
        u_xlat28.xy = dFdy(u_xlat28.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat28.x = dot(u_xlat28.xy, u_xlat28.xy);
        u_xlat28.x = max(u_xlat28.x, u_xlat1.x);
        u_xlat28.x = log2(u_xlat28.x);
        u_xlat28.x = u_xlat28.x * 0.5;
        u_xlat28.x = max(u_xlat28.x, 0.0);
        u_xlat28.x = u_xlat28.x + 1.0;
        u_xlat42 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat28.x = u_xlat42 / u_xlat28.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(256.0<u_xlat28.x);
#else
        u_xlatb42 = 256.0<u_xlat28.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat28.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb42)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb28.x){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat28.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb28.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat28.xyxy).xy;
        u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb28.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat28.xy = (u_xlatb28.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat28.xy = u_xlat28.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb28.xy = lessThan(u_xlat28.xyxy, u_xlat4.xyxy).xy;
        u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb28.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb28.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb28.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb28.x){
            u_xlat28.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat4.xy = dFdx(u_xlat28.xy);
            u_xlat28.xy = dFdy(u_xlat28.xy);
            u_xlat32 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat46 = dot(u_xlat28.xy, u_xlat28.xy);
            u_xlat32 = max(u_xlat46, u_xlat32);
            u_xlat32 = log2(u_xlat32);
            u_xlat32 = u_xlat32 * 0.5;
            u_xlat32 = max(u_xlat32, 0.0);
            u_xlat32 = u_xlat32 + 1.0;
            u_xlat46 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat4.xy = vec2(u_xlat46) * u_xlat4.xy;
            u_xlat28.xy = u_xlat28.xy * vec2(u_xlat46);
            u_xlat4.xy = u_xlat4.xy / vec2(u_xlat32);
            u_xlat28.xy = u_xlat28.xy / vec2(u_xlat32);
            u_xlat18.x = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
            u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
            u_xlat32 = sqrt(u_xlat18.x);
            u_xlat46 = sqrt(u_xlat42);
            u_xlat18.x = inversesqrt(u_xlat18.x);
            u_xlat4.x = u_xlat18.x * abs(u_xlat4.x);
            u_xlat42 = inversesqrt(u_xlat42);
            u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
            u_xlat28.x = u_xlat28.x * u_xlat4.x;
            u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
            u_xlat28.x = sqrt(u_xlat28.x);
            u_xlat42 = u_xlat46 * u_xlat32;
            u_xlat4.x = u_xlat28.x * u_xlat42;
            u_xlat18.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat46 = fract((-u_xlat18.x));
            u_xlat18.z = u_xlat46 + 0.5;
            u_xlat18.xy = fract(u_xlat18.xy);
            u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
            u_xlat18.xyz = floor(u_xlat18.xyz);
            u_xlat46 = (-u_xlat18.x) + u_xlat18.z;
            u_xlat18.x = u_xlat46 * u_xlat18.y + u_xlat18.x;
            u_xlat32 = (-u_xlat42) * u_xlat28.x + 1.0;
            u_xlat5.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat32) * u_xlat5.xyz + u_xlat18.xxx;
            u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat7.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
            u_xlat28.x = exp2(u_xlat28.x);
            u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
            u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
            u_xlat5.xyz = u_xlat28.xxx * u_xlat5.zyy + u_xlat18.xxx;
            u_xlat18.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat4.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat18.xyz;
        } else {
            u_xlat28.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb28.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat28.xyxy).xy;
            u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb28.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat28.xy = (u_xlatb28.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat28.xy = u_xlat28.xy * u_xlat1.xy;
            u_xlat5.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb28.xy = lessThan(u_xlat28.xyxy, u_xlat5.xyxy).xy;
            u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb28.x) ? u_xlat3 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb28.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28.x){
                u_xlat28.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat3.xy = dFdx(u_xlat28.xy);
                u_xlat28.xy = dFdy(u_xlat28.xy);
                u_xlat31 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat45 = dot(u_xlat28.xy, u_xlat28.xy);
                u_xlat31 = max(u_xlat45, u_xlat31);
                u_xlat31 = log2(u_xlat31);
                u_xlat31 = u_xlat31 * 0.5;
                u_xlat31 = max(u_xlat31, 0.0);
                u_xlat31 = u_xlat31 + 1.0;
                u_xlat45 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat45) * u_xlat3.xy;
                u_xlat28.xy = u_xlat28.xy * vec2(u_xlat45);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat31);
                u_xlat28.xy = u_xlat28.xy / vec2(u_xlat31);
                u_xlat17.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
                u_xlat31 = sqrt(u_xlat17.x);
                u_xlat45 = sqrt(u_xlat42);
                u_xlat17.x = inversesqrt(u_xlat17.x);
                u_xlat3.x = u_xlat17.x * abs(u_xlat3.x);
                u_xlat42 = inversesqrt(u_xlat42);
                u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
                u_xlat28.x = u_xlat28.x * u_xlat3.x;
                u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
                u_xlat28.x = sqrt(u_xlat28.x);
                u_xlat42 = u_xlat45 * u_xlat31;
                u_xlat3.x = u_xlat28.x * u_xlat42;
                u_xlat17.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat45 = fract((-u_xlat17.x));
                u_xlat17.z = u_xlat45 + 0.5;
                u_xlat17.xy = fract(u_xlat17.xy);
                u_xlat17.xy = u_xlat17.xy + vec2(0.5, 0.5);
                u_xlat17.xyz = floor(u_xlat17.xyz);
                u_xlat45 = (-u_xlat17.x) + u_xlat17.z;
                u_xlat17.x = u_xlat45 * u_xlat17.y + u_xlat17.x;
                u_xlat31 = (-u_xlat42) * u_xlat28.x + 1.0;
                u_xlat5.xyz = (-u_xlat17.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat31) * u_xlat5.xyz + u_xlat17.xxx;
                u_xlatb3.xz = lessThan(u_xlat3.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat17.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
                u_xlat28.x = exp2(u_xlat28.x);
                u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
                u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
                u_xlat5.xyz = u_xlat28.xxx * u_xlat5.zyy + u_xlat17.xxx;
                u_xlat17.xyz = (u_xlatb3.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat4.xyz = (u_xlatb3.x) ? u_xlat6.xyz : u_xlat17.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28.x = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb28.x = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb28.x){
                    u_xlat28.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat2.xy = dFdx(u_xlat28.xy);
                    u_xlat28.xy = dFdy(u_xlat28.xy);
                    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat17.x = dot(u_xlat28.xy, u_xlat28.xy);
                    u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
                    u_xlat3.x = log2(u_xlat3.x);
                    u_xlat3.x = u_xlat3.x * 0.5;
                    u_xlat3.x = max(u_xlat3.x, 0.0);
                    u_xlat3.x = u_xlat3.x + 1.0;
                    u_xlat17.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat2.xy * u_xlat17.xx;
                    u_xlat28.xy = u_xlat28.xy * u_xlat17.xx;
                    u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
                    u_xlat28.xy = u_xlat28.xy / u_xlat3.xx;
                    u_xlat16.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
                    u_xlat3.x = sqrt(u_xlat16.x);
                    u_xlat17.x = sqrt(u_xlat42);
                    u_xlat16.x = inversesqrt(u_xlat16.x);
                    u_xlat2.x = u_xlat16.x * abs(u_xlat2.x);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x * u_xlat2.x;
                    u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
                    u_xlat28.x = sqrt(u_xlat28.x);
                    u_xlat42 = u_xlat17.x * u_xlat3.x;
                    u_xlat2.x = u_xlat28.x * u_xlat42;
                    u_xlat16.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat44 = fract((-u_xlat16.x));
                    u_xlat16.z = u_xlat44 + 0.5;
                    u_xlat16.xy = fract(u_xlat16.xy);
                    u_xlat16.xy = u_xlat16.xy + vec2(0.5, 0.5);
                    u_xlat16.xyz = floor(u_xlat16.xyz);
                    u_xlat44 = (-u_xlat16.x) + u_xlat16.z;
                    u_xlat16.x = u_xlat44 * u_xlat16.y + u_xlat16.x;
                    u_xlat30 = (-u_xlat42) * u_xlat28.x + 1.0;
                    u_xlat3.xyz = (-u_xlat16.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat16.xxx;
                    u_xlatb2.xz = lessThan(u_xlat2.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat6.xyz = u_xlat16.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
                    u_xlat28.x = exp2(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
                    u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
                    u_xlat3.xyz = u_xlat28.xxx * u_xlat3.zyy + u_xlat16.xxx;
                    u_xlat16.xyz = (u_xlatb2.z) ? u_xlat6.xyz : u_xlat3.xyz;
                    u_xlat4.xyz = (u_xlatb2.x) ? u_xlat5.xyz : u_xlat16.xyz;
                } else {
                    u_xlat28.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat1.xy = dFdx(u_xlat28.xy);
                    u_xlat28.xy = dFdy(u_xlat28.xy);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat16.x = dot(u_xlat28.xy, u_xlat28.xy);
                    u_xlat2.x = max(u_xlat16.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat16.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = u_xlat1.xy * u_xlat16.xx;
                    u_xlat28.xy = u_xlat28.xy * u_xlat16.xx;
                    u_xlat1.xy = u_xlat1.xy / u_xlat2.xx;
                    u_xlat28.xy = u_xlat28.xy / u_xlat2.xx;
                    u_xlat15.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
                    u_xlat2.x = sqrt(u_xlat15.x);
                    u_xlat16.x = sqrt(u_xlat42);
                    u_xlat15.x = inversesqrt(u_xlat15.x);
                    u_xlat1.x = u_xlat15.x * abs(u_xlat1.x);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x * u_xlat1.x;
                    u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
                    u_xlat28.x = sqrt(u_xlat28.x);
                    u_xlat42 = u_xlat16.x * u_xlat2.x;
                    u_xlat1.x = u_xlat28.x * u_xlat42;
                    u_xlat15.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat43 = fract((-u_xlat15.x));
                    u_xlat15.z = u_xlat43 + 0.5;
                    u_xlat15.xy = fract(u_xlat15.xy);
                    u_xlat15.xy = u_xlat15.xy + vec2(0.5, 0.5);
                    u_xlat15.xyz = floor(u_xlat15.xyz);
                    u_xlat43 = (-u_xlat15.x) + u_xlat15.z;
                    u_xlat15.x = u_xlat43 * u_xlat15.y + u_xlat15.x;
                    u_xlat29 = (-u_xlat42) * u_xlat28.x + 1.0;
                    u_xlat2.xyz = (-u_xlat15.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat29) * u_xlat2.xyz + u_xlat15.xxx;
                    u_xlatb1.xz = lessThan(u_xlat1.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat5.xyz = u_xlat15.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
                    u_xlat28.x = exp2(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
                    u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
                    u_xlat2.xyz = u_xlat28.xxx * u_xlat2.zyy + u_xlat15.xxx;
                    u_xlat15.xyz = (u_xlatb1.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat4.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat15.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat4.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb28.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 100.0, 102.0)).xy;
    u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
    if(u_xlatb28.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb28.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 101.0, 103.0)).xy;
    u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
    if(u_xlatb28.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_28.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_28 = max(u_xlat10_28.x, 0.00100000005);
    u_xlat16_28 = min(u_xlat16_28, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat10_2.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_9.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_50 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
    u_xlat16_50 = sqrt(u_xlat16_50);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_50<_FillNormalGaps);
#else
    u_xlatb0 = u_xlat16_50<_FillNormalGaps;
#endif
    u_xlat16_9.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat16_9.xy;
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.x = vs_TEXCOORD1.w;
    u_xlat3.y = vs_TEXCOORD2.w;
    u_xlat3.z = vs_TEXCOORD3.w;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_50 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_28) + 1.0;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_9.x + u_xlat16_28;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_10.xyz = u_xlat10_28.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_51 = (-u_xlat16_50) + 1.0;
    u_xlat16_52 = u_xlat10_28.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);
#else
    u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_52) * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0 = max(u_xlat16_51, 0.00100000005);
    u_xlat16_51 = u_xlat16_0 * u_xlat16_52;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * -0.5 + 1.0;
    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_9.xyz;
    u_xlat16_53 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat16_12.x = u_xlat16_53 + u_xlat16_53;
    u_xlat16_12.xyz = u_xlat2.xyz * (-u_xlat16_12.xxx) + u_xlat3.xyz;
    u_xlat16_12.xyz = (-u_xlat16_12.xyz);
    u_xlat16_54 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_54 = u_xlat16_0 * u_xlat16_54;
    u_xlat10_1 = textureLod(_ReflectionCube, u_xlat16_12.xyz, u_xlat16_54);
    u_xlat16_54 = u_xlat10_1.w + -1.0;
    u_xlat16_54 = _ReflectionCube_HDR.w * u_xlat16_54 + 1.0;
    u_xlat16_54 = log2(u_xlat16_54);
    u_xlat16_54 = u_xlat16_54 * _ReflectionCube_HDR.y;
    u_xlat16_54 = exp2(u_xlat16_54);
    u_xlat16_54 = u_xlat16_54 * _ReflectionCube_HDR.x;
    u_xlat16_13.xyz = u_xlat10_1.xyz * vec3(u_xlat16_54);
    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_13.xyz;
    u_xlat16_54 = (-u_xlat16_0) + 1.0;
    u_xlat16_13.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz;
    u_xlat16_53 = max(u_xlat16_53, 0.00100000005);
    u_xlat16_12.x = dot(u_xlat2.xyz, u_xlat16_12.xyz);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.00100000005);
    u_xlat16_26 = u_xlat16_53 * -5.55472994 + -6.98316002;
    u_xlat16_26 = u_xlat16_53 * u_xlat16_26;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * vec3(u_xlat16_51) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;
    u_xlat16_51 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_51 = u_xlat16_51 * 0.5;
    u_xlat16_51 = max(u_xlat16_51, 9.99999975e-05);
    u_xlat16_11.x = (-u_xlat16_51) + 1.0;
    u_xlat16_25 = u_xlat16_12.x * u_xlat16_11.x + u_xlat16_51;
    u_xlat16_25 = float(1.0) / u_xlat16_25;
    u_xlat16_51 = u_xlat16_53 * u_xlat16_11.x + u_xlat16_51;
    u_xlat16_51 = float(1.0) / u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_25;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_13.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_51) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_53) * u_xlat16_9.xyz;
    u_xlat16_51 = (-u_xlat16_52) + 1.0;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_51);
    SV_Target1.xyz = u_xlat16_9.xyz * u_xlat16_12.xxx + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_10.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_10.xy;
    SV_Target2.w = u_xlat16_50;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
vec3 u_xlat15;
vec3 u_xlat16;
vec3 u_xlat17;
vec3 u_xlat18;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
vec2 u_xlat28;
mediump float u_xlat16_28;
lowp vec2 u_xlat10_28;
bvec2 u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
float u_xlat32;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
float u_xlat44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_50;
mediump float u_xlat16_51;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
mediump float u_xlat16_54;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat28.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat28.xy + u_xlat0.xy;
    u_xlat28.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat28.xy : u_xlat0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb28.x){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb28.x){
        u_xlat10_1.xyz = texture(_MainTex, u_xlat0.xy).xyz;
        SV_Target0.xyz = u_xlat10_1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb28.x){
        u_xlat28.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat28.x = max(u_xlat28.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(256.0<u_xlat28.x);
#else
        u_xlatb42 = 256.0<u_xlat28.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat28.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb42)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb28.x){
        u_xlat28.xy = vec2(u_xlat0.x * _MainTex_TexelSize.z, u_xlat0.y * _MainTex_TexelSize.w);
        u_xlat1.xy = dFdx(u_xlat28.xy);
        u_xlat28.xy = dFdy(u_xlat28.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat28.x = dot(u_xlat28.xy, u_xlat28.xy);
        u_xlat28.x = max(u_xlat28.x, u_xlat1.x);
        u_xlat28.x = log2(u_xlat28.x);
        u_xlat28.x = u_xlat28.x * 0.5;
        u_xlat28.x = max(u_xlat28.x, 0.0);
        u_xlat28.x = u_xlat28.x + 1.0;
        u_xlat42 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat28.x = u_xlat42 / u_xlat28.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(256.0<u_xlat28.x);
#else
        u_xlatb42 = 256.0<u_xlat28.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat28.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb42)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb28.x){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat28.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb28.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat28.xyxy).xy;
        u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb28.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat28.xy = (u_xlatb28.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat28.xy = u_xlat28.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb28.xy = lessThan(u_xlat28.xyxy, u_xlat4.xyxy).xy;
        u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb28.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb28.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb28.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb28.x){
            u_xlat28.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat4.xy = dFdx(u_xlat28.xy);
            u_xlat28.xy = dFdy(u_xlat28.xy);
            u_xlat32 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat46 = dot(u_xlat28.xy, u_xlat28.xy);
            u_xlat32 = max(u_xlat46, u_xlat32);
            u_xlat32 = log2(u_xlat32);
            u_xlat32 = u_xlat32 * 0.5;
            u_xlat32 = max(u_xlat32, 0.0);
            u_xlat32 = u_xlat32 + 1.0;
            u_xlat46 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat4.xy = vec2(u_xlat46) * u_xlat4.xy;
            u_xlat28.xy = u_xlat28.xy * vec2(u_xlat46);
            u_xlat4.xy = u_xlat4.xy / vec2(u_xlat32);
            u_xlat28.xy = u_xlat28.xy / vec2(u_xlat32);
            u_xlat18.x = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
            u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
            u_xlat32 = sqrt(u_xlat18.x);
            u_xlat46 = sqrt(u_xlat42);
            u_xlat18.x = inversesqrt(u_xlat18.x);
            u_xlat4.x = u_xlat18.x * abs(u_xlat4.x);
            u_xlat42 = inversesqrt(u_xlat42);
            u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
            u_xlat28.x = u_xlat28.x * u_xlat4.x;
            u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
            u_xlat28.x = sqrt(u_xlat28.x);
            u_xlat42 = u_xlat46 * u_xlat32;
            u_xlat4.x = u_xlat28.x * u_xlat42;
            u_xlat18.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat46 = fract((-u_xlat18.x));
            u_xlat18.z = u_xlat46 + 0.5;
            u_xlat18.xy = fract(u_xlat18.xy);
            u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
            u_xlat18.xyz = floor(u_xlat18.xyz);
            u_xlat46 = (-u_xlat18.x) + u_xlat18.z;
            u_xlat18.x = u_xlat46 * u_xlat18.y + u_xlat18.x;
            u_xlat32 = (-u_xlat42) * u_xlat28.x + 1.0;
            u_xlat5.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat32) * u_xlat5.xyz + u_xlat18.xxx;
            u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat7.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
            u_xlat28.x = exp2(u_xlat28.x);
            u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
            u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
            u_xlat5.xyz = u_xlat28.xxx * u_xlat5.zyy + u_xlat18.xxx;
            u_xlat18.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat4.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat18.xyz;
        } else {
            u_xlat28.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb28.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat28.xyxy).xy;
            u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb28.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat28.xy = (u_xlatb28.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat28.xy = u_xlat28.xy * u_xlat1.xy;
            u_xlat5.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb28.xy = lessThan(u_xlat28.xyxy, u_xlat5.xyxy).xy;
            u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb28.x) ? u_xlat3 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb28.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28.x){
                u_xlat28.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat3.xy = dFdx(u_xlat28.xy);
                u_xlat28.xy = dFdy(u_xlat28.xy);
                u_xlat31 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat45 = dot(u_xlat28.xy, u_xlat28.xy);
                u_xlat31 = max(u_xlat45, u_xlat31);
                u_xlat31 = log2(u_xlat31);
                u_xlat31 = u_xlat31 * 0.5;
                u_xlat31 = max(u_xlat31, 0.0);
                u_xlat31 = u_xlat31 + 1.0;
                u_xlat45 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat45) * u_xlat3.xy;
                u_xlat28.xy = u_xlat28.xy * vec2(u_xlat45);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat31);
                u_xlat28.xy = u_xlat28.xy / vec2(u_xlat31);
                u_xlat17.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
                u_xlat31 = sqrt(u_xlat17.x);
                u_xlat45 = sqrt(u_xlat42);
                u_xlat17.x = inversesqrt(u_xlat17.x);
                u_xlat3.x = u_xlat17.x * abs(u_xlat3.x);
                u_xlat42 = inversesqrt(u_xlat42);
                u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
                u_xlat28.x = u_xlat28.x * u_xlat3.x;
                u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
                u_xlat28.x = sqrt(u_xlat28.x);
                u_xlat42 = u_xlat45 * u_xlat31;
                u_xlat3.x = u_xlat28.x * u_xlat42;
                u_xlat17.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat45 = fract((-u_xlat17.x));
                u_xlat17.z = u_xlat45 + 0.5;
                u_xlat17.xy = fract(u_xlat17.xy);
                u_xlat17.xy = u_xlat17.xy + vec2(0.5, 0.5);
                u_xlat17.xyz = floor(u_xlat17.xyz);
                u_xlat45 = (-u_xlat17.x) + u_xlat17.z;
                u_xlat17.x = u_xlat45 * u_xlat17.y + u_xlat17.x;
                u_xlat31 = (-u_xlat42) * u_xlat28.x + 1.0;
                u_xlat5.xyz = (-u_xlat17.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat31) * u_xlat5.xyz + u_xlat17.xxx;
                u_xlatb3.xz = lessThan(u_xlat3.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat17.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
                u_xlat28.x = exp2(u_xlat28.x);
                u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
                u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
                u_xlat5.xyz = u_xlat28.xxx * u_xlat5.zyy + u_xlat17.xxx;
                u_xlat17.xyz = (u_xlatb3.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat4.xyz = (u_xlatb3.x) ? u_xlat6.xyz : u_xlat17.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28.x = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb28.x = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb28.x){
                    u_xlat28.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat2.xy = dFdx(u_xlat28.xy);
                    u_xlat28.xy = dFdy(u_xlat28.xy);
                    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat17.x = dot(u_xlat28.xy, u_xlat28.xy);
                    u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
                    u_xlat3.x = log2(u_xlat3.x);
                    u_xlat3.x = u_xlat3.x * 0.5;
                    u_xlat3.x = max(u_xlat3.x, 0.0);
                    u_xlat3.x = u_xlat3.x + 1.0;
                    u_xlat17.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat2.xy * u_xlat17.xx;
                    u_xlat28.xy = u_xlat28.xy * u_xlat17.xx;
                    u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
                    u_xlat28.xy = u_xlat28.xy / u_xlat3.xx;
                    u_xlat16.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
                    u_xlat3.x = sqrt(u_xlat16.x);
                    u_xlat17.x = sqrt(u_xlat42);
                    u_xlat16.x = inversesqrt(u_xlat16.x);
                    u_xlat2.x = u_xlat16.x * abs(u_xlat2.x);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x * u_xlat2.x;
                    u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
                    u_xlat28.x = sqrt(u_xlat28.x);
                    u_xlat42 = u_xlat17.x * u_xlat3.x;
                    u_xlat2.x = u_xlat28.x * u_xlat42;
                    u_xlat16.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat44 = fract((-u_xlat16.x));
                    u_xlat16.z = u_xlat44 + 0.5;
                    u_xlat16.xy = fract(u_xlat16.xy);
                    u_xlat16.xy = u_xlat16.xy + vec2(0.5, 0.5);
                    u_xlat16.xyz = floor(u_xlat16.xyz);
                    u_xlat44 = (-u_xlat16.x) + u_xlat16.z;
                    u_xlat16.x = u_xlat44 * u_xlat16.y + u_xlat16.x;
                    u_xlat30 = (-u_xlat42) * u_xlat28.x + 1.0;
                    u_xlat3.xyz = (-u_xlat16.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat16.xxx;
                    u_xlatb2.xz = lessThan(u_xlat2.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat6.xyz = u_xlat16.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
                    u_xlat28.x = exp2(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
                    u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
                    u_xlat3.xyz = u_xlat28.xxx * u_xlat3.zyy + u_xlat16.xxx;
                    u_xlat16.xyz = (u_xlatb2.z) ? u_xlat6.xyz : u_xlat3.xyz;
                    u_xlat4.xyz = (u_xlatb2.x) ? u_xlat5.xyz : u_xlat16.xyz;
                } else {
                    u_xlat28.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat1.xy = dFdx(u_xlat28.xy);
                    u_xlat28.xy = dFdy(u_xlat28.xy);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat16.x = dot(u_xlat28.xy, u_xlat28.xy);
                    u_xlat2.x = max(u_xlat16.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat16.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = u_xlat1.xy * u_xlat16.xx;
                    u_xlat28.xy = u_xlat28.xy * u_xlat16.xx;
                    u_xlat1.xy = u_xlat1.xy / u_xlat2.xx;
                    u_xlat28.xy = u_xlat28.xy / u_xlat2.xx;
                    u_xlat15.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
                    u_xlat2.x = sqrt(u_xlat15.x);
                    u_xlat16.x = sqrt(u_xlat42);
                    u_xlat15.x = inversesqrt(u_xlat15.x);
                    u_xlat1.x = u_xlat15.x * abs(u_xlat1.x);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x * u_xlat1.x;
                    u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
                    u_xlat28.x = sqrt(u_xlat28.x);
                    u_xlat42 = u_xlat16.x * u_xlat2.x;
                    u_xlat1.x = u_xlat28.x * u_xlat42;
                    u_xlat15.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat43 = fract((-u_xlat15.x));
                    u_xlat15.z = u_xlat43 + 0.5;
                    u_xlat15.xy = fract(u_xlat15.xy);
                    u_xlat15.xy = u_xlat15.xy + vec2(0.5, 0.5);
                    u_xlat15.xyz = floor(u_xlat15.xyz);
                    u_xlat43 = (-u_xlat15.x) + u_xlat15.z;
                    u_xlat15.x = u_xlat43 * u_xlat15.y + u_xlat15.x;
                    u_xlat29 = (-u_xlat42) * u_xlat28.x + 1.0;
                    u_xlat2.xyz = (-u_xlat15.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat29) * u_xlat2.xyz + u_xlat15.xxx;
                    u_xlatb1.xz = lessThan(u_xlat1.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat5.xyz = u_xlat15.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
                    u_xlat28.x = exp2(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
                    u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
                    u_xlat2.xyz = u_xlat28.xxx * u_xlat2.zyy + u_xlat15.xxx;
                    u_xlat15.xyz = (u_xlatb1.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat4.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat15.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat4.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb28.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 100.0, 102.0)).xy;
    u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
    if(u_xlatb28.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb28.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 101.0, 103.0)).xy;
    u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
    if(u_xlatb28.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_28.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_28 = max(u_xlat10_28.x, 0.00100000005);
    u_xlat16_28 = min(u_xlat16_28, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat10_2.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_9.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_50 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
    u_xlat16_50 = sqrt(u_xlat16_50);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_50<_FillNormalGaps);
#else
    u_xlatb0 = u_xlat16_50<_FillNormalGaps;
#endif
    u_xlat16_9.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat16_9.xy;
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.x = vs_TEXCOORD1.w;
    u_xlat3.y = vs_TEXCOORD2.w;
    u_xlat3.z = vs_TEXCOORD3.w;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_50 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_28) + 1.0;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_9.x + u_xlat16_28;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_10.xyz = u_xlat10_28.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_51 = (-u_xlat16_50) + 1.0;
    u_xlat16_52 = u_xlat10_28.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);
#else
    u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_52) * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0 = max(u_xlat16_51, 0.00100000005);
    u_xlat16_51 = u_xlat16_0 * u_xlat16_52;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * -0.5 + 1.0;
    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_9.xyz;
    u_xlat16_53 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat16_12.x = u_xlat16_53 + u_xlat16_53;
    u_xlat16_12.xyz = u_xlat2.xyz * (-u_xlat16_12.xxx) + u_xlat3.xyz;
    u_xlat16_12.xyz = (-u_xlat16_12.xyz);
    u_xlat16_54 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_54 = u_xlat16_0 * u_xlat16_54;
    u_xlat10_1 = textureLod(_ReflectionCube, u_xlat16_12.xyz, u_xlat16_54);
    u_xlat16_54 = u_xlat10_1.w + -1.0;
    u_xlat16_54 = _ReflectionCube_HDR.w * u_xlat16_54 + 1.0;
    u_xlat16_54 = log2(u_xlat16_54);
    u_xlat16_54 = u_xlat16_54 * _ReflectionCube_HDR.y;
    u_xlat16_54 = exp2(u_xlat16_54);
    u_xlat16_54 = u_xlat16_54 * _ReflectionCube_HDR.x;
    u_xlat16_13.xyz = u_xlat10_1.xyz * vec3(u_xlat16_54);
    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_13.xyz;
    u_xlat16_54 = (-u_xlat16_0) + 1.0;
    u_xlat16_13.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz;
    u_xlat16_53 = max(u_xlat16_53, 0.00100000005);
    u_xlat16_12.x = dot(u_xlat2.xyz, u_xlat16_12.xyz);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.00100000005);
    u_xlat16_26 = u_xlat16_53 * -5.55472994 + -6.98316002;
    u_xlat16_26 = u_xlat16_53 * u_xlat16_26;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * vec3(u_xlat16_51) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;
    u_xlat16_51 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_51 = u_xlat16_51 * 0.5;
    u_xlat16_51 = max(u_xlat16_51, 9.99999975e-05);
    u_xlat16_11.x = (-u_xlat16_51) + 1.0;
    u_xlat16_25 = u_xlat16_12.x * u_xlat16_11.x + u_xlat16_51;
    u_xlat16_25 = float(1.0) / u_xlat16_25;
    u_xlat16_51 = u_xlat16_53 * u_xlat16_11.x + u_xlat16_51;
    u_xlat16_51 = float(1.0) / u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_25;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_13.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_51) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_53) * u_xlat16_9.xyz;
    u_xlat16_51 = (-u_xlat16_52) + 1.0;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_51);
    SV_Target1.xyz = u_xlat16_9.xyz * u_xlat16_12.xxx + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_10.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_10.xy;
    SV_Target2.w = u_xlat16_50;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
vec3 u_xlat15;
vec3 u_xlat16;
vec3 u_xlat17;
vec3 u_xlat18;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
vec2 u_xlat28;
mediump float u_xlat16_28;
lowp vec2 u_xlat10_28;
bvec2 u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
float u_xlat32;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
float u_xlat44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_50;
mediump float u_xlat16_51;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
mediump float u_xlat16_54;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat28.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat28.xy + u_xlat0.xy;
    u_xlat28.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat28.xy : u_xlat0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb28.x){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb28.x){
        u_xlat10_1.xyz = texture(_MainTex, u_xlat0.xy).xyz;
        SV_Target0.xyz = u_xlat10_1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb28.x){
        u_xlat28.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat28.x = max(u_xlat28.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(256.0<u_xlat28.x);
#else
        u_xlatb42 = 256.0<u_xlat28.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat28.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb42)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb28.x){
        u_xlat28.xy = vec2(u_xlat0.x * _MainTex_TexelSize.z, u_xlat0.y * _MainTex_TexelSize.w);
        u_xlat1.xy = dFdx(u_xlat28.xy);
        u_xlat28.xy = dFdy(u_xlat28.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat28.x = dot(u_xlat28.xy, u_xlat28.xy);
        u_xlat28.x = max(u_xlat28.x, u_xlat1.x);
        u_xlat28.x = log2(u_xlat28.x);
        u_xlat28.x = u_xlat28.x * 0.5;
        u_xlat28.x = max(u_xlat28.x, 0.0);
        u_xlat28.x = u_xlat28.x + 1.0;
        u_xlat42 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat28.x = u_xlat42 / u_xlat28.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(256.0<u_xlat28.x);
#else
        u_xlatb42 = 256.0<u_xlat28.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat28.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb42)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb28.x){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat28.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb28.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat28.xyxy).xy;
        u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb28.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat28.xy = (u_xlatb28.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat28.xy = u_xlat28.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb28.xy = lessThan(u_xlat28.xyxy, u_xlat4.xyxy).xy;
        u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb28.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb28.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb28.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb28.x){
            u_xlat28.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat4.xy = dFdx(u_xlat28.xy);
            u_xlat28.xy = dFdy(u_xlat28.xy);
            u_xlat32 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat46 = dot(u_xlat28.xy, u_xlat28.xy);
            u_xlat32 = max(u_xlat46, u_xlat32);
            u_xlat32 = log2(u_xlat32);
            u_xlat32 = u_xlat32 * 0.5;
            u_xlat32 = max(u_xlat32, 0.0);
            u_xlat32 = u_xlat32 + 1.0;
            u_xlat46 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat4.xy = vec2(u_xlat46) * u_xlat4.xy;
            u_xlat28.xy = u_xlat28.xy * vec2(u_xlat46);
            u_xlat4.xy = u_xlat4.xy / vec2(u_xlat32);
            u_xlat28.xy = u_xlat28.xy / vec2(u_xlat32);
            u_xlat18.x = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
            u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
            u_xlat32 = sqrt(u_xlat18.x);
            u_xlat46 = sqrt(u_xlat42);
            u_xlat18.x = inversesqrt(u_xlat18.x);
            u_xlat4.x = u_xlat18.x * abs(u_xlat4.x);
            u_xlat42 = inversesqrt(u_xlat42);
            u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
            u_xlat28.x = u_xlat28.x * u_xlat4.x;
            u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
            u_xlat28.x = sqrt(u_xlat28.x);
            u_xlat42 = u_xlat46 * u_xlat32;
            u_xlat4.x = u_xlat28.x * u_xlat42;
            u_xlat18.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat46 = fract((-u_xlat18.x));
            u_xlat18.z = u_xlat46 + 0.5;
            u_xlat18.xy = fract(u_xlat18.xy);
            u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
            u_xlat18.xyz = floor(u_xlat18.xyz);
            u_xlat46 = (-u_xlat18.x) + u_xlat18.z;
            u_xlat18.x = u_xlat46 * u_xlat18.y + u_xlat18.x;
            u_xlat32 = (-u_xlat42) * u_xlat28.x + 1.0;
            u_xlat5.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat32) * u_xlat5.xyz + u_xlat18.xxx;
            u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat7.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
            u_xlat28.x = exp2(u_xlat28.x);
            u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
            u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
            u_xlat5.xyz = u_xlat28.xxx * u_xlat5.zyy + u_xlat18.xxx;
            u_xlat18.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat4.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat18.xyz;
        } else {
            u_xlat28.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb28.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat28.xyxy).xy;
            u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb28.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat28.xy = (u_xlatb28.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat28.xy = u_xlat28.xy * u_xlat1.xy;
            u_xlat5.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb28.xy = lessThan(u_xlat28.xyxy, u_xlat5.xyxy).xy;
            u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb28.x) ? u_xlat3 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb28.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28.x){
                u_xlat28.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat3.xy = dFdx(u_xlat28.xy);
                u_xlat28.xy = dFdy(u_xlat28.xy);
                u_xlat31 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat45 = dot(u_xlat28.xy, u_xlat28.xy);
                u_xlat31 = max(u_xlat45, u_xlat31);
                u_xlat31 = log2(u_xlat31);
                u_xlat31 = u_xlat31 * 0.5;
                u_xlat31 = max(u_xlat31, 0.0);
                u_xlat31 = u_xlat31 + 1.0;
                u_xlat45 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat45) * u_xlat3.xy;
                u_xlat28.xy = u_xlat28.xy * vec2(u_xlat45);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat31);
                u_xlat28.xy = u_xlat28.xy / vec2(u_xlat31);
                u_xlat17.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
                u_xlat31 = sqrt(u_xlat17.x);
                u_xlat45 = sqrt(u_xlat42);
                u_xlat17.x = inversesqrt(u_xlat17.x);
                u_xlat3.x = u_xlat17.x * abs(u_xlat3.x);
                u_xlat42 = inversesqrt(u_xlat42);
                u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
                u_xlat28.x = u_xlat28.x * u_xlat3.x;
                u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
                u_xlat28.x = sqrt(u_xlat28.x);
                u_xlat42 = u_xlat45 * u_xlat31;
                u_xlat3.x = u_xlat28.x * u_xlat42;
                u_xlat17.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat45 = fract((-u_xlat17.x));
                u_xlat17.z = u_xlat45 + 0.5;
                u_xlat17.xy = fract(u_xlat17.xy);
                u_xlat17.xy = u_xlat17.xy + vec2(0.5, 0.5);
                u_xlat17.xyz = floor(u_xlat17.xyz);
                u_xlat45 = (-u_xlat17.x) + u_xlat17.z;
                u_xlat17.x = u_xlat45 * u_xlat17.y + u_xlat17.x;
                u_xlat31 = (-u_xlat42) * u_xlat28.x + 1.0;
                u_xlat5.xyz = (-u_xlat17.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat31) * u_xlat5.xyz + u_xlat17.xxx;
                u_xlatb3.xz = lessThan(u_xlat3.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat17.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
                u_xlat28.x = exp2(u_xlat28.x);
                u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
                u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
                u_xlat5.xyz = u_xlat28.xxx * u_xlat5.zyy + u_xlat17.xxx;
                u_xlat17.xyz = (u_xlatb3.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat4.xyz = (u_xlatb3.x) ? u_xlat6.xyz : u_xlat17.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28.x = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb28.x = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb28.x){
                    u_xlat28.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat2.xy = dFdx(u_xlat28.xy);
                    u_xlat28.xy = dFdy(u_xlat28.xy);
                    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat17.x = dot(u_xlat28.xy, u_xlat28.xy);
                    u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
                    u_xlat3.x = log2(u_xlat3.x);
                    u_xlat3.x = u_xlat3.x * 0.5;
                    u_xlat3.x = max(u_xlat3.x, 0.0);
                    u_xlat3.x = u_xlat3.x + 1.0;
                    u_xlat17.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat2.xy * u_xlat17.xx;
                    u_xlat28.xy = u_xlat28.xy * u_xlat17.xx;
                    u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
                    u_xlat28.xy = u_xlat28.xy / u_xlat3.xx;
                    u_xlat16.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
                    u_xlat3.x = sqrt(u_xlat16.x);
                    u_xlat17.x = sqrt(u_xlat42);
                    u_xlat16.x = inversesqrt(u_xlat16.x);
                    u_xlat2.x = u_xlat16.x * abs(u_xlat2.x);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x * u_xlat2.x;
                    u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
                    u_xlat28.x = sqrt(u_xlat28.x);
                    u_xlat42 = u_xlat17.x * u_xlat3.x;
                    u_xlat2.x = u_xlat28.x * u_xlat42;
                    u_xlat16.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat44 = fract((-u_xlat16.x));
                    u_xlat16.z = u_xlat44 + 0.5;
                    u_xlat16.xy = fract(u_xlat16.xy);
                    u_xlat16.xy = u_xlat16.xy + vec2(0.5, 0.5);
                    u_xlat16.xyz = floor(u_xlat16.xyz);
                    u_xlat44 = (-u_xlat16.x) + u_xlat16.z;
                    u_xlat16.x = u_xlat44 * u_xlat16.y + u_xlat16.x;
                    u_xlat30 = (-u_xlat42) * u_xlat28.x + 1.0;
                    u_xlat3.xyz = (-u_xlat16.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat16.xxx;
                    u_xlatb2.xz = lessThan(u_xlat2.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat6.xyz = u_xlat16.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
                    u_xlat28.x = exp2(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
                    u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
                    u_xlat3.xyz = u_xlat28.xxx * u_xlat3.zyy + u_xlat16.xxx;
                    u_xlat16.xyz = (u_xlatb2.z) ? u_xlat6.xyz : u_xlat3.xyz;
                    u_xlat4.xyz = (u_xlatb2.x) ? u_xlat5.xyz : u_xlat16.xyz;
                } else {
                    u_xlat28.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat1.xy = dFdx(u_xlat28.xy);
                    u_xlat28.xy = dFdy(u_xlat28.xy);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat16.x = dot(u_xlat28.xy, u_xlat28.xy);
                    u_xlat2.x = max(u_xlat16.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat16.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = u_xlat1.xy * u_xlat16.xx;
                    u_xlat28.xy = u_xlat28.xy * u_xlat16.xx;
                    u_xlat1.xy = u_xlat1.xy / u_xlat2.xx;
                    u_xlat28.xy = u_xlat28.xy / u_xlat2.xx;
                    u_xlat15.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
                    u_xlat2.x = sqrt(u_xlat15.x);
                    u_xlat16.x = sqrt(u_xlat42);
                    u_xlat15.x = inversesqrt(u_xlat15.x);
                    u_xlat1.x = u_xlat15.x * abs(u_xlat1.x);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x * u_xlat1.x;
                    u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
                    u_xlat28.x = sqrt(u_xlat28.x);
                    u_xlat42 = u_xlat16.x * u_xlat2.x;
                    u_xlat1.x = u_xlat28.x * u_xlat42;
                    u_xlat15.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat43 = fract((-u_xlat15.x));
                    u_xlat15.z = u_xlat43 + 0.5;
                    u_xlat15.xy = fract(u_xlat15.xy);
                    u_xlat15.xy = u_xlat15.xy + vec2(0.5, 0.5);
                    u_xlat15.xyz = floor(u_xlat15.xyz);
                    u_xlat43 = (-u_xlat15.x) + u_xlat15.z;
                    u_xlat15.x = u_xlat43 * u_xlat15.y + u_xlat15.x;
                    u_xlat29 = (-u_xlat42) * u_xlat28.x + 1.0;
                    u_xlat2.xyz = (-u_xlat15.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat29) * u_xlat2.xyz + u_xlat15.xxx;
                    u_xlatb1.xz = lessThan(u_xlat1.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat5.xyz = u_xlat15.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
                    u_xlat28.x = exp2(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
                    u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
                    u_xlat2.xyz = u_xlat28.xxx * u_xlat2.zyy + u_xlat15.xxx;
                    u_xlat15.xyz = (u_xlatb1.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat4.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat15.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat4.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb28.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 100.0, 102.0)).xy;
    u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
    if(u_xlatb28.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb28.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 101.0, 103.0)).xy;
    u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
    if(u_xlatb28.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_28.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_28 = max(u_xlat10_28.x, 0.00100000005);
    u_xlat16_28 = min(u_xlat16_28, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat10_2.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_9.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_50 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
    u_xlat16_50 = sqrt(u_xlat16_50);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_50<_FillNormalGaps);
#else
    u_xlatb0 = u_xlat16_50<_FillNormalGaps;
#endif
    u_xlat16_9.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat16_9.xy;
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.x = vs_TEXCOORD1.w;
    u_xlat3.y = vs_TEXCOORD2.w;
    u_xlat3.z = vs_TEXCOORD3.w;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_50 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_28) + 1.0;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_9.x + u_xlat16_28;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_10.xyz = u_xlat10_28.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_51 = (-u_xlat16_50) + 1.0;
    u_xlat16_52 = u_xlat10_28.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);
#else
    u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_52) * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0 = max(u_xlat16_51, 0.00100000005);
    u_xlat16_51 = u_xlat16_0 * u_xlat16_52;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * -0.5 + 1.0;
    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_9.xyz;
    u_xlat16_53 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat16_12.x = u_xlat16_53 + u_xlat16_53;
    u_xlat16_12.xyz = u_xlat2.xyz * (-u_xlat16_12.xxx) + u_xlat3.xyz;
    u_xlat16_12.xyz = (-u_xlat16_12.xyz);
    u_xlat16_54 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_54 = u_xlat16_0 * u_xlat16_54;
    u_xlat10_1 = textureLod(_ReflectionCube, u_xlat16_12.xyz, u_xlat16_54);
    u_xlat16_54 = u_xlat10_1.w + -1.0;
    u_xlat16_54 = _ReflectionCube_HDR.w * u_xlat16_54 + 1.0;
    u_xlat16_54 = log2(u_xlat16_54);
    u_xlat16_54 = u_xlat16_54 * _ReflectionCube_HDR.y;
    u_xlat16_54 = exp2(u_xlat16_54);
    u_xlat16_54 = u_xlat16_54 * _ReflectionCube_HDR.x;
    u_xlat16_13.xyz = u_xlat10_1.xyz * vec3(u_xlat16_54);
    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_13.xyz;
    u_xlat16_54 = (-u_xlat16_0) + 1.0;
    u_xlat16_13.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz;
    u_xlat16_53 = max(u_xlat16_53, 0.00100000005);
    u_xlat16_12.x = dot(u_xlat2.xyz, u_xlat16_12.xyz);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.00100000005);
    u_xlat16_26 = u_xlat16_53 * -5.55472994 + -6.98316002;
    u_xlat16_26 = u_xlat16_53 * u_xlat16_26;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * vec3(u_xlat16_51) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;
    u_xlat16_51 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_51 = u_xlat16_51 * 0.5;
    u_xlat16_51 = max(u_xlat16_51, 9.99999975e-05);
    u_xlat16_11.x = (-u_xlat16_51) + 1.0;
    u_xlat16_25 = u_xlat16_12.x * u_xlat16_11.x + u_xlat16_51;
    u_xlat16_25 = float(1.0) / u_xlat16_25;
    u_xlat16_51 = u_xlat16_53 * u_xlat16_11.x + u_xlat16_51;
    u_xlat16_51 = float(1.0) / u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_25;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_13.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_51) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_53) * u_xlat16_9.xyz;
    u_xlat16_51 = (-u_xlat16_52) + 1.0;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_51);
    SV_Target1.xyz = u_xlat16_9.xyz * u_xlat16_12.xxx + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_10.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_10.xy;
    SV_Target2.w = u_xlat16_50;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _ReflectionCube_HDR;
uniform 	mediump vec4 _ReflectionCube_TexelSize;
uniform 	mediump float _FillNormalGaps;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp samplerCube _ReflectionCube;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
vec3 u_xlat15;
vec3 u_xlat16;
vec3 u_xlat17;
vec3 u_xlat18;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
vec2 u_xlat28;
mediump float u_xlat16_28;
lowp vec2 u_xlat10_28;
bvec2 u_xlatb28;
float u_xlat29;
float u_xlat30;
float u_xlat31;
float u_xlat32;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
float u_xlat44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_50;
mediump float u_xlat16_51;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
mediump float u_xlat16_54;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat28.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat28.xy + u_xlat0.xy;
    u_xlat28.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat28.xy : u_xlat0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb28.x){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb28.x){
        u_xlat10_1.xyz = texture(_MainTex, u_xlat0.xy).xyz;
        SV_Target0.xyz = u_xlat10_1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb28.x){
        u_xlat28.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat28.x = max(u_xlat28.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(256.0<u_xlat28.x);
#else
        u_xlatb42 = 256.0<u_xlat28.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat28.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb42)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb28.x){
        u_xlat28.xy = vec2(u_xlat0.x * _MainTex_TexelSize.z, u_xlat0.y * _MainTex_TexelSize.w);
        u_xlat1.xy = dFdx(u_xlat28.xy);
        u_xlat28.xy = dFdy(u_xlat28.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat28.x = dot(u_xlat28.xy, u_xlat28.xy);
        u_xlat28.x = max(u_xlat28.x, u_xlat1.x);
        u_xlat28.x = log2(u_xlat28.x);
        u_xlat28.x = u_xlat28.x * 0.5;
        u_xlat28.x = max(u_xlat28.x, 0.0);
        u_xlat28.x = u_xlat28.x + 1.0;
        u_xlat42 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat28.x = u_xlat42 / u_xlat28.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(256.0<u_xlat28.x);
#else
        u_xlatb42 = 256.0<u_xlat28.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat28.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb42)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb28.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb28.x){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat28.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb28.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat28.xyxy).xy;
        u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb28.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat28.xy = (u_xlatb28.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat28.xy = u_xlat28.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb28.xy = lessThan(u_xlat28.xyxy, u_xlat4.xyxy).xy;
        u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb28.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb28.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb28.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb28.x){
            u_xlat28.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat4.xy = dFdx(u_xlat28.xy);
            u_xlat28.xy = dFdy(u_xlat28.xy);
            u_xlat32 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat46 = dot(u_xlat28.xy, u_xlat28.xy);
            u_xlat32 = max(u_xlat46, u_xlat32);
            u_xlat32 = log2(u_xlat32);
            u_xlat32 = u_xlat32 * 0.5;
            u_xlat32 = max(u_xlat32, 0.0);
            u_xlat32 = u_xlat32 + 1.0;
            u_xlat46 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat4.xy = vec2(u_xlat46) * u_xlat4.xy;
            u_xlat28.xy = u_xlat28.xy * vec2(u_xlat46);
            u_xlat4.xy = u_xlat4.xy / vec2(u_xlat32);
            u_xlat28.xy = u_xlat28.xy / vec2(u_xlat32);
            u_xlat18.x = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
            u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
            u_xlat32 = sqrt(u_xlat18.x);
            u_xlat46 = sqrt(u_xlat42);
            u_xlat18.x = inversesqrt(u_xlat18.x);
            u_xlat4.x = u_xlat18.x * abs(u_xlat4.x);
            u_xlat42 = inversesqrt(u_xlat42);
            u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
            u_xlat28.x = u_xlat28.x * u_xlat4.x;
            u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
            u_xlat28.x = sqrt(u_xlat28.x);
            u_xlat42 = u_xlat46 * u_xlat32;
            u_xlat4.x = u_xlat28.x * u_xlat42;
            u_xlat18.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat46 = fract((-u_xlat18.x));
            u_xlat18.z = u_xlat46 + 0.5;
            u_xlat18.xy = fract(u_xlat18.xy);
            u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
            u_xlat18.xyz = floor(u_xlat18.xyz);
            u_xlat46 = (-u_xlat18.x) + u_xlat18.z;
            u_xlat18.x = u_xlat46 * u_xlat18.y + u_xlat18.x;
            u_xlat32 = (-u_xlat42) * u_xlat28.x + 1.0;
            u_xlat5.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat32) * u_xlat5.xyz + u_xlat18.xxx;
            u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat7.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
            u_xlat28.x = exp2(u_xlat28.x);
            u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
            u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
            u_xlat5.xyz = u_xlat28.xxx * u_xlat5.zyy + u_xlat18.xxx;
            u_xlat18.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat4.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat18.xyz;
        } else {
            u_xlat28.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb28.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat28.xyxy).xy;
            u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb28.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat28.xy = (u_xlatb28.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat28.xy = u_xlat28.xy * u_xlat1.xy;
            u_xlat5.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb28.xy = lessThan(u_xlat28.xyxy, u_xlat5.xyxy).xy;
            u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb28.x) ? u_xlat3 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb28.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28.x){
                u_xlat28.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat3.xy = dFdx(u_xlat28.xy);
                u_xlat28.xy = dFdy(u_xlat28.xy);
                u_xlat31 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat45 = dot(u_xlat28.xy, u_xlat28.xy);
                u_xlat31 = max(u_xlat45, u_xlat31);
                u_xlat31 = log2(u_xlat31);
                u_xlat31 = u_xlat31 * 0.5;
                u_xlat31 = max(u_xlat31, 0.0);
                u_xlat31 = u_xlat31 + 1.0;
                u_xlat45 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat45) * u_xlat3.xy;
                u_xlat28.xy = u_xlat28.xy * vec2(u_xlat45);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat31);
                u_xlat28.xy = u_xlat28.xy / vec2(u_xlat31);
                u_xlat17.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
                u_xlat31 = sqrt(u_xlat17.x);
                u_xlat45 = sqrt(u_xlat42);
                u_xlat17.x = inversesqrt(u_xlat17.x);
                u_xlat3.x = u_xlat17.x * abs(u_xlat3.x);
                u_xlat42 = inversesqrt(u_xlat42);
                u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
                u_xlat28.x = u_xlat28.x * u_xlat3.x;
                u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
                u_xlat28.x = sqrt(u_xlat28.x);
                u_xlat42 = u_xlat45 * u_xlat31;
                u_xlat3.x = u_xlat28.x * u_xlat42;
                u_xlat17.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat45 = fract((-u_xlat17.x));
                u_xlat17.z = u_xlat45 + 0.5;
                u_xlat17.xy = fract(u_xlat17.xy);
                u_xlat17.xy = u_xlat17.xy + vec2(0.5, 0.5);
                u_xlat17.xyz = floor(u_xlat17.xyz);
                u_xlat45 = (-u_xlat17.x) + u_xlat17.z;
                u_xlat17.x = u_xlat45 * u_xlat17.y + u_xlat17.x;
                u_xlat31 = (-u_xlat42) * u_xlat28.x + 1.0;
                u_xlat5.xyz = (-u_xlat17.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat31) * u_xlat5.xyz + u_xlat17.xxx;
                u_xlatb3.xz = lessThan(u_xlat3.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat17.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
                u_xlat28.x = exp2(u_xlat28.x);
                u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
                u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
                u_xlat5.xyz = u_xlat28.xxx * u_xlat5.zyy + u_xlat17.xxx;
                u_xlat17.xyz = (u_xlatb3.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat4.xyz = (u_xlatb3.x) ? u_xlat6.xyz : u_xlat17.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28.x = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb28.x = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb28.x){
                    u_xlat28.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat2.xy = dFdx(u_xlat28.xy);
                    u_xlat28.xy = dFdy(u_xlat28.xy);
                    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat17.x = dot(u_xlat28.xy, u_xlat28.xy);
                    u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
                    u_xlat3.x = log2(u_xlat3.x);
                    u_xlat3.x = u_xlat3.x * 0.5;
                    u_xlat3.x = max(u_xlat3.x, 0.0);
                    u_xlat3.x = u_xlat3.x + 1.0;
                    u_xlat17.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat2.xy * u_xlat17.xx;
                    u_xlat28.xy = u_xlat28.xy * u_xlat17.xx;
                    u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
                    u_xlat28.xy = u_xlat28.xy / u_xlat3.xx;
                    u_xlat16.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
                    u_xlat3.x = sqrt(u_xlat16.x);
                    u_xlat17.x = sqrt(u_xlat42);
                    u_xlat16.x = inversesqrt(u_xlat16.x);
                    u_xlat2.x = u_xlat16.x * abs(u_xlat2.x);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x * u_xlat2.x;
                    u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
                    u_xlat28.x = sqrt(u_xlat28.x);
                    u_xlat42 = u_xlat17.x * u_xlat3.x;
                    u_xlat2.x = u_xlat28.x * u_xlat42;
                    u_xlat16.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat44 = fract((-u_xlat16.x));
                    u_xlat16.z = u_xlat44 + 0.5;
                    u_xlat16.xy = fract(u_xlat16.xy);
                    u_xlat16.xy = u_xlat16.xy + vec2(0.5, 0.5);
                    u_xlat16.xyz = floor(u_xlat16.xyz);
                    u_xlat44 = (-u_xlat16.x) + u_xlat16.z;
                    u_xlat16.x = u_xlat44 * u_xlat16.y + u_xlat16.x;
                    u_xlat30 = (-u_xlat42) * u_xlat28.x + 1.0;
                    u_xlat3.xyz = (-u_xlat16.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat16.xxx;
                    u_xlatb2.xz = lessThan(u_xlat2.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat6.xyz = u_xlat16.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
                    u_xlat28.x = exp2(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
                    u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
                    u_xlat3.xyz = u_xlat28.xxx * u_xlat3.zyy + u_xlat16.xxx;
                    u_xlat16.xyz = (u_xlatb2.z) ? u_xlat6.xyz : u_xlat3.xyz;
                    u_xlat4.xyz = (u_xlatb2.x) ? u_xlat5.xyz : u_xlat16.xyz;
                } else {
                    u_xlat28.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat1.xy = dFdx(u_xlat28.xy);
                    u_xlat28.xy = dFdy(u_xlat28.xy);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat16.x = dot(u_xlat28.xy, u_xlat28.xy);
                    u_xlat2.x = max(u_xlat16.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat16.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = u_xlat1.xy * u_xlat16.xx;
                    u_xlat28.xy = u_xlat28.xy * u_xlat16.xx;
                    u_xlat1.xy = u_xlat1.xy / u_xlat2.xx;
                    u_xlat28.xy = u_xlat28.xy / u_xlat2.xx;
                    u_xlat15.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat42 = dot(abs(u_xlat28.xy), abs(u_xlat28.xy));
                    u_xlat2.x = sqrt(u_xlat15.x);
                    u_xlat16.x = sqrt(u_xlat42);
                    u_xlat15.x = inversesqrt(u_xlat15.x);
                    u_xlat1.x = u_xlat15.x * abs(u_xlat1.x);
                    u_xlat42 = inversesqrt(u_xlat42);
                    u_xlat28.x = u_xlat42 * abs(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x * u_xlat1.x;
                    u_xlat28.x = (-u_xlat28.x) * u_xlat28.x + 1.0;
                    u_xlat28.x = sqrt(u_xlat28.x);
                    u_xlat42 = u_xlat16.x * u_xlat2.x;
                    u_xlat1.x = u_xlat28.x * u_xlat42;
                    u_xlat15.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat43 = fract((-u_xlat15.x));
                    u_xlat15.z = u_xlat43 + 0.5;
                    u_xlat15.xy = fract(u_xlat15.xy);
                    u_xlat15.xy = u_xlat15.xy + vec2(0.5, 0.5);
                    u_xlat15.xyz = floor(u_xlat15.xyz);
                    u_xlat43 = (-u_xlat15.x) + u_xlat15.z;
                    u_xlat15.x = u_xlat43 * u_xlat15.y + u_xlat15.x;
                    u_xlat29 = (-u_xlat42) * u_xlat28.x + 1.0;
                    u_xlat2.xyz = (-u_xlat15.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat29) * u_xlat2.xyz + u_xlat15.xxx;
                    u_xlatb1.xz = lessThan(u_xlat1.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat5.xyz = u_xlat15.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat28.x = u_xlat42 * u_xlat28.x + -4.0;
                    u_xlat28.x = exp2(u_xlat28.x);
                    u_xlat28.x = u_xlat28.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat28.x = min(max(u_xlat28.x, 0.0), 1.0);
#else
                    u_xlat28.x = clamp(u_xlat28.x, 0.0, 1.0);
#endif
                    u_xlat2.xyz = u_xlat28.xxx * u_xlat2.zyy + u_xlat15.xxx;
                    u_xlat15.xyz = (u_xlatb1.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat4.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat15.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat4.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb28.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 100.0, 102.0)).xy;
    u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
    if(u_xlatb28.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb28.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 101.0, 103.0)).xy;
    u_xlatb28.x = u_xlatb28.y || u_xlatb28.x;
    if(u_xlatb28.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_28.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_28 = max(u_xlat10_28.x, 0.00100000005);
    u_xlat16_28 = min(u_xlat16_28, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat10_2.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_9.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_50 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
    u_xlat16_50 = sqrt(u_xlat16_50);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_50<_FillNormalGaps);
#else
    u_xlatb0 = u_xlat16_50<_FillNormalGaps;
#endif
    u_xlat16_9.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : u_xlat16_9.xy;
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.x = vs_TEXCOORD1.w;
    u_xlat3.y = vs_TEXCOORD2.w;
    u_xlat3.z = vs_TEXCOORD3.w;
    u_xlat3.xyz = (-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_50 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_28) + 1.0;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_9.x + u_xlat16_28;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_10.xyz = u_xlat10_28.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_51 = (-u_xlat16_50) + 1.0;
    u_xlat16_52 = u_xlat10_28.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);
#else
    u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_52) * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0 = max(u_xlat16_51, 0.00100000005);
    u_xlat16_51 = u_xlat16_0 * u_xlat16_52;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * -0.5 + 1.0;
    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_9.xyz;
    u_xlat16_53 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat16_12.x = u_xlat16_53 + u_xlat16_53;
    u_xlat16_12.xyz = u_xlat2.xyz * (-u_xlat16_12.xxx) + u_xlat3.xyz;
    u_xlat16_12.xyz = (-u_xlat16_12.xyz);
    u_xlat16_54 = log2(_ReflectionCube_TexelSize.z);
    u_xlat16_54 = u_xlat16_0 * u_xlat16_54;
    u_xlat10_1 = textureLod(_ReflectionCube, u_xlat16_12.xyz, u_xlat16_54);
    u_xlat16_54 = u_xlat10_1.w + -1.0;
    u_xlat16_54 = _ReflectionCube_HDR.w * u_xlat16_54 + 1.0;
    u_xlat16_54 = log2(u_xlat16_54);
    u_xlat16_54 = u_xlat16_54 * _ReflectionCube_HDR.y;
    u_xlat16_54 = exp2(u_xlat16_54);
    u_xlat16_54 = u_xlat16_54 * _ReflectionCube_HDR.x;
    u_xlat16_13.xyz = u_xlat10_1.xyz * vec3(u_xlat16_54);
    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_13.xyz;
    u_xlat16_54 = (-u_xlat16_0) + 1.0;
    u_xlat16_13.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz;
    u_xlat16_53 = max(u_xlat16_53, 0.00100000005);
    u_xlat16_12.x = dot(u_xlat2.xyz, u_xlat16_12.xyz);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.00100000005);
    u_xlat16_26 = u_xlat16_53 * -5.55472994 + -6.98316002;
    u_xlat16_26 = u_xlat16_53 * u_xlat16_26;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * vec3(u_xlat16_51) + vec3(1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;
    u_xlat16_51 = u_xlat16_0 * u_xlat16_0;
    u_xlat16_51 = u_xlat16_51 * 0.5;
    u_xlat16_51 = max(u_xlat16_51, 9.99999975e-05);
    u_xlat16_11.x = (-u_xlat16_51) + 1.0;
    u_xlat16_25 = u_xlat16_12.x * u_xlat16_11.x + u_xlat16_51;
    u_xlat16_25 = float(1.0) / u_xlat16_25;
    u_xlat16_51 = u_xlat16_53 * u_xlat16_11.x + u_xlat16_51;
    u_xlat16_51 = float(1.0) / u_xlat16_51;
    u_xlat16_51 = u_xlat16_51 * u_xlat16_25;
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_13.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_51) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_53) * u_xlat16_9.xyz;
    u_xlat16_51 = (-u_xlat16_52) + 1.0;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_51);
    SV_Target1.xyz = u_xlat16_9.xyz * u_xlat16_12.xxx + u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_10.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_10.xy;
    SV_Target2.w = u_xlat16_50;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
vec2 u_xlat20;
mediump float u_xlat16_20;
lowp vec2 u_xlat10_20;
bvec2 u_xlatb20;
float u_xlat21;
float u_xlat22;
float u_xlat23;
float u_xlat24;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat20.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat20.xy + u_xlat0.xy;
    u_xlat20.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat20.xy : u_xlat0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb20.x){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb20.x){
        u_xlat10_1.xyz = texture(_MainTex, u_xlat0.xy).xyz;
        SV_Target0.xyz = u_xlat10_1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = max(u_xlat20.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.xy = vec2(u_xlat0.x * _MainTex_TexelSize.z, u_xlat0.y * _MainTex_TexelSize.w);
        u_xlat1.xy = dFdx(u_xlat20.xy);
        u_xlat20.xy = dFdy(u_xlat20.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat20.x = max(u_xlat20.x, u_xlat1.x);
        u_xlat20.x = log2(u_xlat20.x);
        u_xlat20.x = u_xlat20.x * 0.5;
        u_xlat20.x = max(u_xlat20.x, 0.0);
        u_xlat20.x = u_xlat20.x + 1.0;
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = u_xlat30 / u_xlat20.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb20.x){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat20.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat20.xy = u_xlat20.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat4.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb20.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb20.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb20.x){
            u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat4.xy = dFdx(u_xlat20.xy);
            u_xlat20.xy = dFdy(u_xlat20.xy);
            u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat34 = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat24 = max(u_xlat34, u_xlat24);
            u_xlat24 = log2(u_xlat24);
            u_xlat24 = u_xlat24 * 0.5;
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlat24 = u_xlat24 + 1.0;
            u_xlat34 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat4.xy = vec2(u_xlat34) * u_xlat4.xy;
            u_xlat20.xy = u_xlat20.xy * vec2(u_xlat34);
            u_xlat4.xy = u_xlat4.xy / vec2(u_xlat24);
            u_xlat20.xy = u_xlat20.xy / vec2(u_xlat24);
            u_xlat14.x = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
            u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
            u_xlat24 = sqrt(u_xlat14.x);
            u_xlat34 = sqrt(u_xlat30);
            u_xlat14.x = inversesqrt(u_xlat14.x);
            u_xlat4.x = u_xlat14.x * abs(u_xlat4.x);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
            u_xlat20.x = u_xlat20.x * u_xlat4.x;
            u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
            u_xlat20.x = sqrt(u_xlat20.x);
            u_xlat30 = u_xlat34 * u_xlat24;
            u_xlat4.x = u_xlat20.x * u_xlat30;
            u_xlat14.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat34 = fract((-u_xlat14.x));
            u_xlat14.z = u_xlat34 + 0.5;
            u_xlat14.xy = fract(u_xlat14.xy);
            u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
            u_xlat14.xyz = floor(u_xlat14.xyz);
            u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
            u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
            u_xlat24 = (-u_xlat30) * u_xlat20.x + 1.0;
            u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
            u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
            u_xlat20.x = exp2(u_xlat20.x);
            u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
            u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
            u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat14.xxx;
            u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat4.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
        } else {
            u_xlat20.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat20.xy = u_xlat20.xy * u_xlat1.xy;
            u_xlat5.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat5.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat3 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb20.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb20.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb20.x){
                u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat3.xy = dFdx(u_xlat20.xy);
                u_xlat20.xy = dFdy(u_xlat20.xy);
                u_xlat23 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = dot(u_xlat20.xy, u_xlat20.xy);
                u_xlat23 = max(u_xlat33, u_xlat23);
                u_xlat23 = log2(u_xlat23);
                u_xlat23 = u_xlat23 * 0.5;
                u_xlat23 = max(u_xlat23, 0.0);
                u_xlat23 = u_xlat23 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat33) * u_xlat3.xy;
                u_xlat20.xy = u_xlat20.xy * vec2(u_xlat33);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat23);
                u_xlat20.xy = u_xlat20.xy / vec2(u_xlat23);
                u_xlat13.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                u_xlat23 = sqrt(u_xlat13.x);
                u_xlat33 = sqrt(u_xlat30);
                u_xlat13.x = inversesqrt(u_xlat13.x);
                u_xlat3.x = u_xlat13.x * abs(u_xlat3.x);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                u_xlat20.x = u_xlat20.x * u_xlat3.x;
                u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                u_xlat20.x = sqrt(u_xlat20.x);
                u_xlat30 = u_xlat33 * u_xlat23;
                u_xlat3.x = u_xlat20.x * u_xlat30;
                u_xlat13.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat33 = fract((-u_xlat13.x));
                u_xlat13.z = u_xlat33 + 0.5;
                u_xlat13.xy = fract(u_xlat13.xy);
                u_xlat13.xy = u_xlat13.xy + vec2(0.5, 0.5);
                u_xlat13.xyz = floor(u_xlat13.xyz);
                u_xlat33 = (-u_xlat13.x) + u_xlat13.z;
                u_xlat13.x = u_xlat33 * u_xlat13.y + u_xlat13.x;
                u_xlat23 = (-u_xlat30) * u_xlat20.x + 1.0;
                u_xlat5.xyz = (-u_xlat13.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat23) * u_xlat5.xyz + u_xlat13.xxx;
                u_xlatb3.xz = lessThan(u_xlat3.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat13.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                u_xlat20.x = exp2(u_xlat20.x);
                u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat13.xxx;
                u_xlat13.xyz = (u_xlatb3.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat4.xyz = (u_xlatb3.x) ? u_xlat6.xyz : u_xlat13.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb20.x = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb20.x = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb20.x){
                    u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat2.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat13.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                    u_xlat3.x = log2(u_xlat3.x);
                    u_xlat3.x = u_xlat3.x * 0.5;
                    u_xlat3.x = max(u_xlat3.x, 0.0);
                    u_xlat3.x = u_xlat3.x + 1.0;
                    u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat2.xy * u_xlat13.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat13.xx;
                    u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat3.xx;
                    u_xlat12.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat3.x = sqrt(u_xlat12.x);
                    u_xlat13.x = sqrt(u_xlat30);
                    u_xlat12.x = inversesqrt(u_xlat12.x);
                    u_xlat2.x = u_xlat12.x * abs(u_xlat2.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat2.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat13.x * u_xlat3.x;
                    u_xlat2.x = u_xlat20.x * u_xlat30;
                    u_xlat12.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat32 = fract((-u_xlat12.x));
                    u_xlat12.z = u_xlat32 + 0.5;
                    u_xlat12.xy = fract(u_xlat12.xy);
                    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
                    u_xlat12.xyz = floor(u_xlat12.xyz);
                    u_xlat32 = (-u_xlat12.x) + u_xlat12.z;
                    u_xlat12.x = u_xlat32 * u_xlat12.y + u_xlat12.x;
                    u_xlat22 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat3.xyz = (-u_xlat12.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat12.xxx;
                    u_xlatb2.xz = lessThan(u_xlat2.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat6.xyz = u_xlat12.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.zyy + u_xlat12.xxx;
                    u_xlat12.xyz = (u_xlatb2.z) ? u_xlat6.xyz : u_xlat3.xyz;
                    u_xlat4.xyz = (u_xlatb2.x) ? u_xlat5.xyz : u_xlat12.xyz;
                } else {
                    u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat1.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat12.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = u_xlat1.xy * u_xlat12.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat12.xx;
                    u_xlat1.xy = u_xlat1.xy / u_xlat2.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat2.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat2.x = sqrt(u_xlat11.x);
                    u_xlat12.x = sqrt(u_xlat30);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat1.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat12.x * u_xlat2.x;
                    u_xlat1.x = u_xlat20.x * u_xlat30;
                    u_xlat11.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat31 = fract((-u_xlat11.x));
                    u_xlat11.z = u_xlat31 + 0.5;
                    u_xlat11.xy = fract(u_xlat11.xy);
                    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
                    u_xlat11.xyz = floor(u_xlat11.xyz);
                    u_xlat31 = (-u_xlat11.x) + u_xlat11.z;
                    u_xlat11.x = u_xlat31 * u_xlat11.y + u_xlat11.x;
                    u_xlat21 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat2.xyz = (-u_xlat11.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat11.xxx;
                    u_xlatb1.xz = lessThan(u_xlat1.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat5.xyz = u_xlat11.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.zyy + u_xlat11.xxx;
                    u_xlat11.xyz = (u_xlatb1.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat4.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat11.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat4.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 100.0, 102.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 101.0, 103.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_20.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_20 = max(u_xlat10_20.x, 0.00100000005);
    u_xlat16_20 = min(u_xlat16_20, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat10_2.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_9.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_20) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_20;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat10_20.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat10_20.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
vec2 u_xlat20;
mediump float u_xlat16_20;
lowp vec2 u_xlat10_20;
bvec2 u_xlatb20;
float u_xlat21;
float u_xlat22;
float u_xlat23;
float u_xlat24;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat20.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat20.xy + u_xlat0.xy;
    u_xlat20.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat20.xy : u_xlat0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb20.x){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb20.x){
        u_xlat10_1.xyz = texture(_MainTex, u_xlat0.xy).xyz;
        SV_Target0.xyz = u_xlat10_1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = max(u_xlat20.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.xy = vec2(u_xlat0.x * _MainTex_TexelSize.z, u_xlat0.y * _MainTex_TexelSize.w);
        u_xlat1.xy = dFdx(u_xlat20.xy);
        u_xlat20.xy = dFdy(u_xlat20.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat20.x = max(u_xlat20.x, u_xlat1.x);
        u_xlat20.x = log2(u_xlat20.x);
        u_xlat20.x = u_xlat20.x * 0.5;
        u_xlat20.x = max(u_xlat20.x, 0.0);
        u_xlat20.x = u_xlat20.x + 1.0;
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = u_xlat30 / u_xlat20.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb20.x){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat20.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat20.xy = u_xlat20.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat4.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb20.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb20.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb20.x){
            u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat4.xy = dFdx(u_xlat20.xy);
            u_xlat20.xy = dFdy(u_xlat20.xy);
            u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat34 = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat24 = max(u_xlat34, u_xlat24);
            u_xlat24 = log2(u_xlat24);
            u_xlat24 = u_xlat24 * 0.5;
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlat24 = u_xlat24 + 1.0;
            u_xlat34 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat4.xy = vec2(u_xlat34) * u_xlat4.xy;
            u_xlat20.xy = u_xlat20.xy * vec2(u_xlat34);
            u_xlat4.xy = u_xlat4.xy / vec2(u_xlat24);
            u_xlat20.xy = u_xlat20.xy / vec2(u_xlat24);
            u_xlat14.x = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
            u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
            u_xlat24 = sqrt(u_xlat14.x);
            u_xlat34 = sqrt(u_xlat30);
            u_xlat14.x = inversesqrt(u_xlat14.x);
            u_xlat4.x = u_xlat14.x * abs(u_xlat4.x);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
            u_xlat20.x = u_xlat20.x * u_xlat4.x;
            u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
            u_xlat20.x = sqrt(u_xlat20.x);
            u_xlat30 = u_xlat34 * u_xlat24;
            u_xlat4.x = u_xlat20.x * u_xlat30;
            u_xlat14.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat34 = fract((-u_xlat14.x));
            u_xlat14.z = u_xlat34 + 0.5;
            u_xlat14.xy = fract(u_xlat14.xy);
            u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
            u_xlat14.xyz = floor(u_xlat14.xyz);
            u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
            u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
            u_xlat24 = (-u_xlat30) * u_xlat20.x + 1.0;
            u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
            u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
            u_xlat20.x = exp2(u_xlat20.x);
            u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
            u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
            u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat14.xxx;
            u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat4.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
        } else {
            u_xlat20.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat20.xy = u_xlat20.xy * u_xlat1.xy;
            u_xlat5.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat5.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat3 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb20.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb20.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb20.x){
                u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat3.xy = dFdx(u_xlat20.xy);
                u_xlat20.xy = dFdy(u_xlat20.xy);
                u_xlat23 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = dot(u_xlat20.xy, u_xlat20.xy);
                u_xlat23 = max(u_xlat33, u_xlat23);
                u_xlat23 = log2(u_xlat23);
                u_xlat23 = u_xlat23 * 0.5;
                u_xlat23 = max(u_xlat23, 0.0);
                u_xlat23 = u_xlat23 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat33) * u_xlat3.xy;
                u_xlat20.xy = u_xlat20.xy * vec2(u_xlat33);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat23);
                u_xlat20.xy = u_xlat20.xy / vec2(u_xlat23);
                u_xlat13.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                u_xlat23 = sqrt(u_xlat13.x);
                u_xlat33 = sqrt(u_xlat30);
                u_xlat13.x = inversesqrt(u_xlat13.x);
                u_xlat3.x = u_xlat13.x * abs(u_xlat3.x);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                u_xlat20.x = u_xlat20.x * u_xlat3.x;
                u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                u_xlat20.x = sqrt(u_xlat20.x);
                u_xlat30 = u_xlat33 * u_xlat23;
                u_xlat3.x = u_xlat20.x * u_xlat30;
                u_xlat13.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat33 = fract((-u_xlat13.x));
                u_xlat13.z = u_xlat33 + 0.5;
                u_xlat13.xy = fract(u_xlat13.xy);
                u_xlat13.xy = u_xlat13.xy + vec2(0.5, 0.5);
                u_xlat13.xyz = floor(u_xlat13.xyz);
                u_xlat33 = (-u_xlat13.x) + u_xlat13.z;
                u_xlat13.x = u_xlat33 * u_xlat13.y + u_xlat13.x;
                u_xlat23 = (-u_xlat30) * u_xlat20.x + 1.0;
                u_xlat5.xyz = (-u_xlat13.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat23) * u_xlat5.xyz + u_xlat13.xxx;
                u_xlatb3.xz = lessThan(u_xlat3.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat13.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                u_xlat20.x = exp2(u_xlat20.x);
                u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat13.xxx;
                u_xlat13.xyz = (u_xlatb3.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat4.xyz = (u_xlatb3.x) ? u_xlat6.xyz : u_xlat13.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb20.x = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb20.x = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb20.x){
                    u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat2.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat13.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                    u_xlat3.x = log2(u_xlat3.x);
                    u_xlat3.x = u_xlat3.x * 0.5;
                    u_xlat3.x = max(u_xlat3.x, 0.0);
                    u_xlat3.x = u_xlat3.x + 1.0;
                    u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat2.xy * u_xlat13.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat13.xx;
                    u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat3.xx;
                    u_xlat12.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat3.x = sqrt(u_xlat12.x);
                    u_xlat13.x = sqrt(u_xlat30);
                    u_xlat12.x = inversesqrt(u_xlat12.x);
                    u_xlat2.x = u_xlat12.x * abs(u_xlat2.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat2.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat13.x * u_xlat3.x;
                    u_xlat2.x = u_xlat20.x * u_xlat30;
                    u_xlat12.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat32 = fract((-u_xlat12.x));
                    u_xlat12.z = u_xlat32 + 0.5;
                    u_xlat12.xy = fract(u_xlat12.xy);
                    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
                    u_xlat12.xyz = floor(u_xlat12.xyz);
                    u_xlat32 = (-u_xlat12.x) + u_xlat12.z;
                    u_xlat12.x = u_xlat32 * u_xlat12.y + u_xlat12.x;
                    u_xlat22 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat3.xyz = (-u_xlat12.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat12.xxx;
                    u_xlatb2.xz = lessThan(u_xlat2.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat6.xyz = u_xlat12.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.zyy + u_xlat12.xxx;
                    u_xlat12.xyz = (u_xlatb2.z) ? u_xlat6.xyz : u_xlat3.xyz;
                    u_xlat4.xyz = (u_xlatb2.x) ? u_xlat5.xyz : u_xlat12.xyz;
                } else {
                    u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat1.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat12.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = u_xlat1.xy * u_xlat12.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat12.xx;
                    u_xlat1.xy = u_xlat1.xy / u_xlat2.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat2.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat2.x = sqrt(u_xlat11.x);
                    u_xlat12.x = sqrt(u_xlat30);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat1.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat12.x * u_xlat2.x;
                    u_xlat1.x = u_xlat20.x * u_xlat30;
                    u_xlat11.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat31 = fract((-u_xlat11.x));
                    u_xlat11.z = u_xlat31 + 0.5;
                    u_xlat11.xy = fract(u_xlat11.xy);
                    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
                    u_xlat11.xyz = floor(u_xlat11.xyz);
                    u_xlat31 = (-u_xlat11.x) + u_xlat11.z;
                    u_xlat11.x = u_xlat31 * u_xlat11.y + u_xlat11.x;
                    u_xlat21 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat2.xyz = (-u_xlat11.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat11.xxx;
                    u_xlatb1.xz = lessThan(u_xlat1.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat5.xyz = u_xlat11.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.zyy + u_xlat11.xxx;
                    u_xlat11.xyz = (u_xlatb1.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat4.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat11.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat4.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 100.0, 102.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 101.0, 103.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_20.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_20 = max(u_xlat10_20.x, 0.00100000005);
    u_xlat16_20 = min(u_xlat16_20, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat10_2.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_9.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_20) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_20;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat10_20.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat10_20.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
}
}
 Pass {
  Name "HYBRIDDEFERREDLOD"
  Tags { "DebugView" = "On" "EntityUseType" = "Gadget" "LIGHTMODE" = "HYBRIDDEFERRED" "QUEUE" = "Geometry" "RenderType" = "Opaque" "ShaderLod" = "true" }
  Cull Off
  GpuProgramID 75505
Program "vp" {
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat9;
mediump float u_xlat16_10;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat9;
mediump float u_xlat16_10;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat9;
mediump float u_xlat16_10;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat9;
mediump float u_xlat16_10;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD3.xyz, u_xlat16_1.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec2 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_1.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_2.x = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_2.x * u_xlat16_10 + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_1.z;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat8.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat8.xy + u_xlat0.xy;
    u_xlat8.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat8.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
    u_xlat8.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.yyy * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14 = (-u_xlat10_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0 = max(u_xlat10_0.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    SV_Target1.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    SV_Target1.w = 0.0;
    u_xlat16_2.x = (-u_xlat16_0) + 1.0;
    u_xlat16_6 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_6 * u_xlat16_2.x + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat8.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat8.xy + u_xlat0.xy;
    u_xlat8.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat8.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
    u_xlat8.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.yyy * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14 = (-u_xlat10_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0 = max(u_xlat10_0.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    SV_Target1.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    SV_Target1.w = 0.0;
    u_xlat16_2.x = (-u_xlat16_0) + 1.0;
    u_xlat16_6 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_6 * u_xlat16_2.x + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat8.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat8.xy + u_xlat0.xy;
    u_xlat8.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat8.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.yyy * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14 = (-u_xlat10_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0 = max(u_xlat10_0.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    SV_Target1.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    SV_Target1.w = 0.0;
    u_xlat16_2.x = (-u_xlat16_0) + 1.0;
    u_xlat16_6 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_6 * u_xlat16_2.x + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat8.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat8.xy + u_xlat0.xy;
    u_xlat8.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat8.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.yyy * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14 = (-u_xlat10_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0 = max(u_xlat10_0.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    SV_Target1.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    SV_Target1.w = 0.0;
    u_xlat16_2.x = (-u_xlat16_0) + 1.0;
    u_xlat16_6 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_6 * u_xlat16_2.x + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat8.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat8.xy + u_xlat0.xy;
    u_xlat8.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat8.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.yyy * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14 = (-u_xlat10_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0 = max(u_xlat10_0.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    SV_Target1.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    SV_Target1.w = 0.0;
    u_xlat16_2.x = (-u_xlat16_0) + 1.0;
    u_xlat16_6 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_6 * u_xlat16_2.x + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat8.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat8.xy + u_xlat0.xy;
    u_xlat8.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat8.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.yyy * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_14 = (-u_xlat10_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0 = max(u_xlat10_0.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    SV_Target1.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    SV_Target1.w = 0.0;
    u_xlat16_2.x = (-u_xlat16_0) + 1.0;
    u_xlat16_6 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    SV_Target2.w = u_xlat16_6 * u_xlat16_2.x + u_xlat16_0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat14;
vec2 u_xlat21;
vec2 u_xlat22;
vec2 u_xlat23;
float u_xlat24;
vec2 u_xlat25;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb30){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb30){
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb30){
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = max(u_xlat30, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb30){
        u_xlat1.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat21.xy = dFdx(u_xlat1.xy);
        u_xlat1.xy = dFdy(u_xlat1.xy);
        u_xlat30 = dot(u_xlat21.xy, u_xlat21.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat30 = max(u_xlat30, u_xlat1.x);
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * 0.5;
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 + 1.0;
        u_xlat1.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = u_xlat1.x / u_xlat30;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb30){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat2.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat2.xyxx).xy;
        u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat3.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat4.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat3.xy = u_xlat2.xy * u_xlat3.xy;
        u_xlat23.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat23.xyxx).xy;
        u_xlatb30 = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb30 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb30){
            u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat3.zw = dFdx(u_xlat3.xy);
            u_xlat3.xy = dFdy(u_xlat3.xy);
            u_xlat30 = dot(u_xlat3.zw, u_xlat3.zw);
            u_xlat5.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat30 = max(u_xlat30, u_xlat5.x);
            u_xlat30 = log2(u_xlat30);
            u_xlat30 = u_xlat30 * 0.5;
            u_xlat30 = max(u_xlat30, 0.0);
            u_xlat30 = u_xlat30 + 1.0;
            u_xlat5.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat3 = u_xlat3 * u_xlat5.xxxx;
            u_xlat3 = u_xlat3 / vec4(u_xlat30);
            u_xlat30 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
            u_xlat13 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
            u_xlat33 = sqrt(u_xlat30);
            u_xlat5.x = sqrt(u_xlat13);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat30 = u_xlat30 * abs(u_xlat3.z);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat3.x = u_xlat13 * abs(u_xlat3.x);
            u_xlat30 = u_xlat30 * u_xlat3.x;
            u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
            u_xlat30 = sqrt(u_xlat30);
            u_xlat3.x = u_xlat33 * u_xlat5.x;
            u_xlat13 = u_xlat30 * u_xlat3.x;
            u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat5.x = fract((-u_xlat23.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = floor(u_xlat5.x);
            u_xlat23.xy = fract(u_xlat23.xy);
            u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
            u_xlat23.xy = floor(u_xlat23.xy);
            u_xlat5.x = (-u_xlat23.x) + u_xlat5.x;
            u_xlat23.x = u_xlat5.x * u_xlat23.y + u_xlat23.x;
            u_xlat33 = (-u_xlat3.x) * u_xlat30 + 1.0;
            u_xlat5.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat23.xxx;
            u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
            u_xlat7.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat30 = u_xlat3.x * u_xlat30 + -4.0;
            u_xlat30 = exp2(u_xlat30);
            u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
            u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
            u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat23.xxx;
            u_xlat3.xzw = (u_xlatb13.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat3.xyz = (u_xlatb13.x) ? u_xlat6.xyz : u_xlat3.xzw;
        } else {
            u_xlat5.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat5.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat5.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat5.xy = u_xlat1.xy * u_xlat5.xy;
            u_xlat25.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(u_xlat5.xyxx, u_xlat25.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat4.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb30 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb30 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb30){
                u_xlat4.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat4.zw = dFdx(u_xlat4.xy);
                u_xlat4.xy = dFdy(u_xlat4.xy);
                u_xlat30 = dot(u_xlat4.zw, u_xlat4.zw);
                u_xlat33 = dot(u_xlat4.xy, u_xlat4.xy);
                u_xlat30 = max(u_xlat30, u_xlat33);
                u_xlat30 = log2(u_xlat30);
                u_xlat30 = u_xlat30 * 0.5;
                u_xlat30 = max(u_xlat30, 0.0);
                u_xlat30 = u_xlat30 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat4 = vec4(u_xlat33) * u_xlat4;
                u_xlat4 = u_xlat4 / vec4(u_xlat30);
                u_xlat30 = dot(abs(u_xlat4.zw), abs(u_xlat4.zw));
                u_xlat33 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                u_xlat14.x = sqrt(u_xlat30);
                u_xlat34 = sqrt(u_xlat33);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat30 = u_xlat30 * abs(u_xlat4.z);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat4.x);
                u_xlat30 = u_xlat30 * u_xlat33;
                u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                u_xlat30 = sqrt(u_xlat30);
                u_xlat33 = u_xlat34 * u_xlat14.x;
                u_xlat4.x = u_xlat30 * u_xlat33;
                u_xlat14.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat34 = fract((-u_xlat14.x));
                u_xlat14.z = u_xlat34 + 0.5;
                u_xlat14.xy = fract(u_xlat14.xy);
                u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
                u_xlat14.xyz = floor(u_xlat14.xyz);
                u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
                u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
                u_xlat24 = (-u_xlat33) * u_xlat30 + 1.0;
                u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
                u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat30 = u_xlat33 * u_xlat30 + -4.0;
                u_xlat30 = exp2(u_xlat30);
                u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat14.xxx;
                u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat3.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb30 = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb30 = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb30){
                    u_xlat2.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat4.xy = dFdx(u_xlat2.xy);
                    u_xlat2.xy = dFdy(u_xlat2.xy);
                    u_xlat30 = dot(u_xlat4.xy, u_xlat4.xy);
                    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat30 = max(u_xlat30, u_xlat33);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat4.xy = vec2(u_xlat33) * u_xlat4.xy;
                    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat33);
                    u_xlat4.xy = u_xlat4.xy / vec2(u_xlat30);
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                    u_xlat12 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat33 = sqrt(u_xlat30);
                    u_xlat14.x = sqrt(u_xlat12);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat4.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat2.x = u_xlat12 * abs(u_xlat2.x);
                    u_xlat30 = u_xlat30 * u_xlat2.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat2.x = u_xlat33 * u_xlat14.x;
                    u_xlat12 = u_xlat30 * u_xlat2.x;
                    u_xlat22.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat33 = fract((-u_xlat22.x));
                    u_xlat33 = u_xlat33 + 0.5;
                    u_xlat33 = floor(u_xlat33);
                    u_xlat22.xy = fract(u_xlat22.xy);
                    u_xlat22.xy = u_xlat22.xy + vec2(0.5, 0.5);
                    u_xlat22.xy = floor(u_xlat22.xy);
                    u_xlat33 = (-u_xlat22.x) + u_xlat33;
                    u_xlat22.x = u_xlat33 * u_xlat22.y + u_xlat22.x;
                    u_xlat32 = (-u_xlat2.x) * u_xlat30 + 1.0;
                    u_xlat4.xyz = (-u_xlat22.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat32) * u_xlat4.xyz + u_xlat22.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat6.xyz = u_xlat22.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat2.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zyy + u_xlat22.xxx;
                    u_xlat2.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                    u_xlat3.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat2.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat2.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat22.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat30 = max(u_xlat30, u_xlat22.x);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat22.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat22.xx * u_xlat2.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat22.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat11 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat30);
                    u_xlat22.x = sqrt(u_xlat11);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat2.x);
                    u_xlat11 = inversesqrt(u_xlat11);
                    u_xlat1.x = u_xlat11 * abs(u_xlat1.x);
                    u_xlat30 = u_xlat30 * u_xlat1.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat1.x = u_xlat22.x * u_xlat12;
                    u_xlat11 = u_xlat30 * u_xlat1.x;
                    u_xlat21.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat21.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat21.xy = fract(u_xlat21.xy);
                    u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                    u_xlat21.xy = floor(u_xlat21.xy);
                    u_xlat2.x = (-u_xlat21.x) + u_xlat2.x;
                    u_xlat21.x = u_xlat2.x * u_xlat21.y + u_xlat21.x;
                    u_xlat31 = (-u_xlat1.x) * u_xlat30 + 1.0;
                    u_xlat2.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz + u_xlat21.xxx;
                    u_xlatb11.xz = lessThan(vec4(u_xlat11), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat1.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.zyy + u_xlat21.xxx;
                    u_xlat1.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat3.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat3.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_30 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_30 = min(u_xlat16_30, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_30) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_30;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat16_1.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat14;
vec2 u_xlat21;
vec2 u_xlat22;
vec2 u_xlat23;
float u_xlat24;
vec2 u_xlat25;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb30){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb30){
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb30){
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = max(u_xlat30, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb30){
        u_xlat1.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat21.xy = dFdx(u_xlat1.xy);
        u_xlat1.xy = dFdy(u_xlat1.xy);
        u_xlat30 = dot(u_xlat21.xy, u_xlat21.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat30 = max(u_xlat30, u_xlat1.x);
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * 0.5;
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 + 1.0;
        u_xlat1.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = u_xlat1.x / u_xlat30;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb30){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat2.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat2.xyxx).xy;
        u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat3.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat4.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat3.xy = u_xlat2.xy * u_xlat3.xy;
        u_xlat23.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat23.xyxx).xy;
        u_xlatb30 = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb30 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb30){
            u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat3.zw = dFdx(u_xlat3.xy);
            u_xlat3.xy = dFdy(u_xlat3.xy);
            u_xlat30 = dot(u_xlat3.zw, u_xlat3.zw);
            u_xlat5.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat30 = max(u_xlat30, u_xlat5.x);
            u_xlat30 = log2(u_xlat30);
            u_xlat30 = u_xlat30 * 0.5;
            u_xlat30 = max(u_xlat30, 0.0);
            u_xlat30 = u_xlat30 + 1.0;
            u_xlat5.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat3 = u_xlat3 * u_xlat5.xxxx;
            u_xlat3 = u_xlat3 / vec4(u_xlat30);
            u_xlat30 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
            u_xlat13 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
            u_xlat33 = sqrt(u_xlat30);
            u_xlat5.x = sqrt(u_xlat13);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat30 = u_xlat30 * abs(u_xlat3.z);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat3.x = u_xlat13 * abs(u_xlat3.x);
            u_xlat30 = u_xlat30 * u_xlat3.x;
            u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
            u_xlat30 = sqrt(u_xlat30);
            u_xlat3.x = u_xlat33 * u_xlat5.x;
            u_xlat13 = u_xlat30 * u_xlat3.x;
            u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat5.x = fract((-u_xlat23.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = floor(u_xlat5.x);
            u_xlat23.xy = fract(u_xlat23.xy);
            u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
            u_xlat23.xy = floor(u_xlat23.xy);
            u_xlat5.x = (-u_xlat23.x) + u_xlat5.x;
            u_xlat23.x = u_xlat5.x * u_xlat23.y + u_xlat23.x;
            u_xlat33 = (-u_xlat3.x) * u_xlat30 + 1.0;
            u_xlat5.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat23.xxx;
            u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
            u_xlat7.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat30 = u_xlat3.x * u_xlat30 + -4.0;
            u_xlat30 = exp2(u_xlat30);
            u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
            u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
            u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat23.xxx;
            u_xlat3.xzw = (u_xlatb13.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat3.xyz = (u_xlatb13.x) ? u_xlat6.xyz : u_xlat3.xzw;
        } else {
            u_xlat5.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat5.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat5.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat5.xy = u_xlat1.xy * u_xlat5.xy;
            u_xlat25.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(u_xlat5.xyxx, u_xlat25.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat4.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb30 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb30 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb30){
                u_xlat4.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat4.zw = dFdx(u_xlat4.xy);
                u_xlat4.xy = dFdy(u_xlat4.xy);
                u_xlat30 = dot(u_xlat4.zw, u_xlat4.zw);
                u_xlat33 = dot(u_xlat4.xy, u_xlat4.xy);
                u_xlat30 = max(u_xlat30, u_xlat33);
                u_xlat30 = log2(u_xlat30);
                u_xlat30 = u_xlat30 * 0.5;
                u_xlat30 = max(u_xlat30, 0.0);
                u_xlat30 = u_xlat30 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat4 = vec4(u_xlat33) * u_xlat4;
                u_xlat4 = u_xlat4 / vec4(u_xlat30);
                u_xlat30 = dot(abs(u_xlat4.zw), abs(u_xlat4.zw));
                u_xlat33 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                u_xlat14.x = sqrt(u_xlat30);
                u_xlat34 = sqrt(u_xlat33);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat30 = u_xlat30 * abs(u_xlat4.z);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat4.x);
                u_xlat30 = u_xlat30 * u_xlat33;
                u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                u_xlat30 = sqrt(u_xlat30);
                u_xlat33 = u_xlat34 * u_xlat14.x;
                u_xlat4.x = u_xlat30 * u_xlat33;
                u_xlat14.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat34 = fract((-u_xlat14.x));
                u_xlat14.z = u_xlat34 + 0.5;
                u_xlat14.xy = fract(u_xlat14.xy);
                u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
                u_xlat14.xyz = floor(u_xlat14.xyz);
                u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
                u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
                u_xlat24 = (-u_xlat33) * u_xlat30 + 1.0;
                u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
                u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat30 = u_xlat33 * u_xlat30 + -4.0;
                u_xlat30 = exp2(u_xlat30);
                u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat14.xxx;
                u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat3.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb30 = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb30 = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb30){
                    u_xlat2.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat4.xy = dFdx(u_xlat2.xy);
                    u_xlat2.xy = dFdy(u_xlat2.xy);
                    u_xlat30 = dot(u_xlat4.xy, u_xlat4.xy);
                    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat30 = max(u_xlat30, u_xlat33);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat4.xy = vec2(u_xlat33) * u_xlat4.xy;
                    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat33);
                    u_xlat4.xy = u_xlat4.xy / vec2(u_xlat30);
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                    u_xlat12 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat33 = sqrt(u_xlat30);
                    u_xlat14.x = sqrt(u_xlat12);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat4.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat2.x = u_xlat12 * abs(u_xlat2.x);
                    u_xlat30 = u_xlat30 * u_xlat2.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat2.x = u_xlat33 * u_xlat14.x;
                    u_xlat12 = u_xlat30 * u_xlat2.x;
                    u_xlat22.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat33 = fract((-u_xlat22.x));
                    u_xlat33 = u_xlat33 + 0.5;
                    u_xlat33 = floor(u_xlat33);
                    u_xlat22.xy = fract(u_xlat22.xy);
                    u_xlat22.xy = u_xlat22.xy + vec2(0.5, 0.5);
                    u_xlat22.xy = floor(u_xlat22.xy);
                    u_xlat33 = (-u_xlat22.x) + u_xlat33;
                    u_xlat22.x = u_xlat33 * u_xlat22.y + u_xlat22.x;
                    u_xlat32 = (-u_xlat2.x) * u_xlat30 + 1.0;
                    u_xlat4.xyz = (-u_xlat22.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat32) * u_xlat4.xyz + u_xlat22.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat6.xyz = u_xlat22.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat2.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zyy + u_xlat22.xxx;
                    u_xlat2.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                    u_xlat3.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat2.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat2.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat22.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat30 = max(u_xlat30, u_xlat22.x);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat22.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat22.xx * u_xlat2.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat22.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat11 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat30);
                    u_xlat22.x = sqrt(u_xlat11);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat2.x);
                    u_xlat11 = inversesqrt(u_xlat11);
                    u_xlat1.x = u_xlat11 * abs(u_xlat1.x);
                    u_xlat30 = u_xlat30 * u_xlat1.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat1.x = u_xlat22.x * u_xlat12;
                    u_xlat11 = u_xlat30 * u_xlat1.x;
                    u_xlat21.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat21.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat21.xy = fract(u_xlat21.xy);
                    u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                    u_xlat21.xy = floor(u_xlat21.xy);
                    u_xlat2.x = (-u_xlat21.x) + u_xlat2.x;
                    u_xlat21.x = u_xlat2.x * u_xlat21.y + u_xlat21.x;
                    u_xlat31 = (-u_xlat1.x) * u_xlat30 + 1.0;
                    u_xlat2.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz + u_xlat21.xxx;
                    u_xlatb11.xz = lessThan(vec4(u_xlat11), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat1.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.zyy + u_xlat21.xxx;
                    u_xlat1.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat3.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat3.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_30 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_30 = min(u_xlat16_30, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_30) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_30;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat16_1.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat14;
vec2 u_xlat21;
vec2 u_xlat22;
vec2 u_xlat23;
float u_xlat24;
vec2 u_xlat25;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb30){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb30){
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb30){
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = max(u_xlat30, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb30){
        u_xlat1.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat21.xy = dFdx(u_xlat1.xy);
        u_xlat1.xy = dFdy(u_xlat1.xy);
        u_xlat30 = dot(u_xlat21.xy, u_xlat21.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat30 = max(u_xlat30, u_xlat1.x);
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * 0.5;
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 + 1.0;
        u_xlat1.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = u_xlat1.x / u_xlat30;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb30){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat2.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat2.xyxx).xy;
        u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat3.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat4.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat3.xy = u_xlat2.xy * u_xlat3.xy;
        u_xlat23.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat23.xyxx).xy;
        u_xlatb30 = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb30 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb30){
            u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat3.zw = dFdx(u_xlat3.xy);
            u_xlat3.xy = dFdy(u_xlat3.xy);
            u_xlat30 = dot(u_xlat3.zw, u_xlat3.zw);
            u_xlat5.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat30 = max(u_xlat30, u_xlat5.x);
            u_xlat30 = log2(u_xlat30);
            u_xlat30 = u_xlat30 * 0.5;
            u_xlat30 = max(u_xlat30, 0.0);
            u_xlat30 = u_xlat30 + 1.0;
            u_xlat5.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat3 = u_xlat3 * u_xlat5.xxxx;
            u_xlat3 = u_xlat3 / vec4(u_xlat30);
            u_xlat30 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
            u_xlat13 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
            u_xlat33 = sqrt(u_xlat30);
            u_xlat5.x = sqrt(u_xlat13);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat30 = u_xlat30 * abs(u_xlat3.z);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat3.x = u_xlat13 * abs(u_xlat3.x);
            u_xlat30 = u_xlat30 * u_xlat3.x;
            u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
            u_xlat30 = sqrt(u_xlat30);
            u_xlat3.x = u_xlat33 * u_xlat5.x;
            u_xlat13 = u_xlat30 * u_xlat3.x;
            u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat5.x = fract((-u_xlat23.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = floor(u_xlat5.x);
            u_xlat23.xy = fract(u_xlat23.xy);
            u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
            u_xlat23.xy = floor(u_xlat23.xy);
            u_xlat5.x = (-u_xlat23.x) + u_xlat5.x;
            u_xlat23.x = u_xlat5.x * u_xlat23.y + u_xlat23.x;
            u_xlat33 = (-u_xlat3.x) * u_xlat30 + 1.0;
            u_xlat5.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat23.xxx;
            u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
            u_xlat7.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat30 = u_xlat3.x * u_xlat30 + -4.0;
            u_xlat30 = exp2(u_xlat30);
            u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
            u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
            u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat23.xxx;
            u_xlat3.xzw = (u_xlatb13.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat3.xyz = (u_xlatb13.x) ? u_xlat6.xyz : u_xlat3.xzw;
        } else {
            u_xlat5.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat5.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat5.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat5.xy = u_xlat1.xy * u_xlat5.xy;
            u_xlat25.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(u_xlat5.xyxx, u_xlat25.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat4.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb30 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb30 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb30){
                u_xlat4.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat4.zw = dFdx(u_xlat4.xy);
                u_xlat4.xy = dFdy(u_xlat4.xy);
                u_xlat30 = dot(u_xlat4.zw, u_xlat4.zw);
                u_xlat33 = dot(u_xlat4.xy, u_xlat4.xy);
                u_xlat30 = max(u_xlat30, u_xlat33);
                u_xlat30 = log2(u_xlat30);
                u_xlat30 = u_xlat30 * 0.5;
                u_xlat30 = max(u_xlat30, 0.0);
                u_xlat30 = u_xlat30 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat4 = vec4(u_xlat33) * u_xlat4;
                u_xlat4 = u_xlat4 / vec4(u_xlat30);
                u_xlat30 = dot(abs(u_xlat4.zw), abs(u_xlat4.zw));
                u_xlat33 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                u_xlat14.x = sqrt(u_xlat30);
                u_xlat34 = sqrt(u_xlat33);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat30 = u_xlat30 * abs(u_xlat4.z);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat4.x);
                u_xlat30 = u_xlat30 * u_xlat33;
                u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                u_xlat30 = sqrt(u_xlat30);
                u_xlat33 = u_xlat34 * u_xlat14.x;
                u_xlat4.x = u_xlat30 * u_xlat33;
                u_xlat14.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat34 = fract((-u_xlat14.x));
                u_xlat14.z = u_xlat34 + 0.5;
                u_xlat14.xy = fract(u_xlat14.xy);
                u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
                u_xlat14.xyz = floor(u_xlat14.xyz);
                u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
                u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
                u_xlat24 = (-u_xlat33) * u_xlat30 + 1.0;
                u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
                u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat30 = u_xlat33 * u_xlat30 + -4.0;
                u_xlat30 = exp2(u_xlat30);
                u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat14.xxx;
                u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat3.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb30 = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb30 = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb30){
                    u_xlat2.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat4.xy = dFdx(u_xlat2.xy);
                    u_xlat2.xy = dFdy(u_xlat2.xy);
                    u_xlat30 = dot(u_xlat4.xy, u_xlat4.xy);
                    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat30 = max(u_xlat30, u_xlat33);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat4.xy = vec2(u_xlat33) * u_xlat4.xy;
                    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat33);
                    u_xlat4.xy = u_xlat4.xy / vec2(u_xlat30);
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                    u_xlat12 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat33 = sqrt(u_xlat30);
                    u_xlat14.x = sqrt(u_xlat12);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat4.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat2.x = u_xlat12 * abs(u_xlat2.x);
                    u_xlat30 = u_xlat30 * u_xlat2.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat2.x = u_xlat33 * u_xlat14.x;
                    u_xlat12 = u_xlat30 * u_xlat2.x;
                    u_xlat22.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat33 = fract((-u_xlat22.x));
                    u_xlat33 = u_xlat33 + 0.5;
                    u_xlat33 = floor(u_xlat33);
                    u_xlat22.xy = fract(u_xlat22.xy);
                    u_xlat22.xy = u_xlat22.xy + vec2(0.5, 0.5);
                    u_xlat22.xy = floor(u_xlat22.xy);
                    u_xlat33 = (-u_xlat22.x) + u_xlat33;
                    u_xlat22.x = u_xlat33 * u_xlat22.y + u_xlat22.x;
                    u_xlat32 = (-u_xlat2.x) * u_xlat30 + 1.0;
                    u_xlat4.xyz = (-u_xlat22.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat32) * u_xlat4.xyz + u_xlat22.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat6.xyz = u_xlat22.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat2.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zyy + u_xlat22.xxx;
                    u_xlat2.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                    u_xlat3.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat2.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat2.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat22.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat30 = max(u_xlat30, u_xlat22.x);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat22.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat22.xx * u_xlat2.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat22.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat11 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat30);
                    u_xlat22.x = sqrt(u_xlat11);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat2.x);
                    u_xlat11 = inversesqrt(u_xlat11);
                    u_xlat1.x = u_xlat11 * abs(u_xlat1.x);
                    u_xlat30 = u_xlat30 * u_xlat1.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat1.x = u_xlat22.x * u_xlat12;
                    u_xlat11 = u_xlat30 * u_xlat1.x;
                    u_xlat21.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat21.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat21.xy = fract(u_xlat21.xy);
                    u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                    u_xlat21.xy = floor(u_xlat21.xy);
                    u_xlat2.x = (-u_xlat21.x) + u_xlat2.x;
                    u_xlat21.x = u_xlat2.x * u_xlat21.y + u_xlat21.x;
                    u_xlat31 = (-u_xlat1.x) * u_xlat30 + 1.0;
                    u_xlat2.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz + u_xlat21.xxx;
                    u_xlatb11.xz = lessThan(vec4(u_xlat11), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat1.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.zyy + u_xlat21.xxx;
                    u_xlat1.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat3.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat3.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_30 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_30 = min(u_xlat16_30, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_30) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_30;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat16_1.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat14;
vec2 u_xlat21;
vec2 u_xlat22;
vec2 u_xlat23;
float u_xlat24;
vec2 u_xlat25;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb30){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb30){
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb30){
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = max(u_xlat30, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb30){
        u_xlat1.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat21.xy = dFdx(u_xlat1.xy);
        u_xlat1.xy = dFdy(u_xlat1.xy);
        u_xlat30 = dot(u_xlat21.xy, u_xlat21.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat30 = max(u_xlat30, u_xlat1.x);
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * 0.5;
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 + 1.0;
        u_xlat1.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = u_xlat1.x / u_xlat30;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb30){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat2.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat2.xyxx).xy;
        u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat3.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat4.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat3.xy = u_xlat2.xy * u_xlat3.xy;
        u_xlat23.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat23.xyxx).xy;
        u_xlatb30 = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb30 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb30){
            u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat3.zw = dFdx(u_xlat3.xy);
            u_xlat3.xy = dFdy(u_xlat3.xy);
            u_xlat30 = dot(u_xlat3.zw, u_xlat3.zw);
            u_xlat5.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat30 = max(u_xlat30, u_xlat5.x);
            u_xlat30 = log2(u_xlat30);
            u_xlat30 = u_xlat30 * 0.5;
            u_xlat30 = max(u_xlat30, 0.0);
            u_xlat30 = u_xlat30 + 1.0;
            u_xlat5.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat3 = u_xlat3 * u_xlat5.xxxx;
            u_xlat3 = u_xlat3 / vec4(u_xlat30);
            u_xlat30 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
            u_xlat13 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
            u_xlat33 = sqrt(u_xlat30);
            u_xlat5.x = sqrt(u_xlat13);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat30 = u_xlat30 * abs(u_xlat3.z);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat3.x = u_xlat13 * abs(u_xlat3.x);
            u_xlat30 = u_xlat30 * u_xlat3.x;
            u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
            u_xlat30 = sqrt(u_xlat30);
            u_xlat3.x = u_xlat33 * u_xlat5.x;
            u_xlat13 = u_xlat30 * u_xlat3.x;
            u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat5.x = fract((-u_xlat23.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = floor(u_xlat5.x);
            u_xlat23.xy = fract(u_xlat23.xy);
            u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
            u_xlat23.xy = floor(u_xlat23.xy);
            u_xlat5.x = (-u_xlat23.x) + u_xlat5.x;
            u_xlat23.x = u_xlat5.x * u_xlat23.y + u_xlat23.x;
            u_xlat33 = (-u_xlat3.x) * u_xlat30 + 1.0;
            u_xlat5.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat23.xxx;
            u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
            u_xlat7.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat30 = u_xlat3.x * u_xlat30 + -4.0;
            u_xlat30 = exp2(u_xlat30);
            u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
            u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
            u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat23.xxx;
            u_xlat3.xzw = (u_xlatb13.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat3.xyz = (u_xlatb13.x) ? u_xlat6.xyz : u_xlat3.xzw;
        } else {
            u_xlat5.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat5.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat5.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat5.xy = u_xlat1.xy * u_xlat5.xy;
            u_xlat25.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(u_xlat5.xyxx, u_xlat25.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat4.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb30 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb30 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb30){
                u_xlat4.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat4.zw = dFdx(u_xlat4.xy);
                u_xlat4.xy = dFdy(u_xlat4.xy);
                u_xlat30 = dot(u_xlat4.zw, u_xlat4.zw);
                u_xlat33 = dot(u_xlat4.xy, u_xlat4.xy);
                u_xlat30 = max(u_xlat30, u_xlat33);
                u_xlat30 = log2(u_xlat30);
                u_xlat30 = u_xlat30 * 0.5;
                u_xlat30 = max(u_xlat30, 0.0);
                u_xlat30 = u_xlat30 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat4 = vec4(u_xlat33) * u_xlat4;
                u_xlat4 = u_xlat4 / vec4(u_xlat30);
                u_xlat30 = dot(abs(u_xlat4.zw), abs(u_xlat4.zw));
                u_xlat33 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                u_xlat14.x = sqrt(u_xlat30);
                u_xlat34 = sqrt(u_xlat33);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat30 = u_xlat30 * abs(u_xlat4.z);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat4.x);
                u_xlat30 = u_xlat30 * u_xlat33;
                u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                u_xlat30 = sqrt(u_xlat30);
                u_xlat33 = u_xlat34 * u_xlat14.x;
                u_xlat4.x = u_xlat30 * u_xlat33;
                u_xlat14.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat34 = fract((-u_xlat14.x));
                u_xlat14.z = u_xlat34 + 0.5;
                u_xlat14.xy = fract(u_xlat14.xy);
                u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
                u_xlat14.xyz = floor(u_xlat14.xyz);
                u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
                u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
                u_xlat24 = (-u_xlat33) * u_xlat30 + 1.0;
                u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
                u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat30 = u_xlat33 * u_xlat30 + -4.0;
                u_xlat30 = exp2(u_xlat30);
                u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat14.xxx;
                u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat3.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb30 = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb30 = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb30){
                    u_xlat2.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat4.xy = dFdx(u_xlat2.xy);
                    u_xlat2.xy = dFdy(u_xlat2.xy);
                    u_xlat30 = dot(u_xlat4.xy, u_xlat4.xy);
                    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat30 = max(u_xlat30, u_xlat33);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat4.xy = vec2(u_xlat33) * u_xlat4.xy;
                    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat33);
                    u_xlat4.xy = u_xlat4.xy / vec2(u_xlat30);
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                    u_xlat12 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat33 = sqrt(u_xlat30);
                    u_xlat14.x = sqrt(u_xlat12);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat4.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat2.x = u_xlat12 * abs(u_xlat2.x);
                    u_xlat30 = u_xlat30 * u_xlat2.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat2.x = u_xlat33 * u_xlat14.x;
                    u_xlat12 = u_xlat30 * u_xlat2.x;
                    u_xlat22.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat33 = fract((-u_xlat22.x));
                    u_xlat33 = u_xlat33 + 0.5;
                    u_xlat33 = floor(u_xlat33);
                    u_xlat22.xy = fract(u_xlat22.xy);
                    u_xlat22.xy = u_xlat22.xy + vec2(0.5, 0.5);
                    u_xlat22.xy = floor(u_xlat22.xy);
                    u_xlat33 = (-u_xlat22.x) + u_xlat33;
                    u_xlat22.x = u_xlat33 * u_xlat22.y + u_xlat22.x;
                    u_xlat32 = (-u_xlat2.x) * u_xlat30 + 1.0;
                    u_xlat4.xyz = (-u_xlat22.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat32) * u_xlat4.xyz + u_xlat22.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat6.xyz = u_xlat22.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat2.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zyy + u_xlat22.xxx;
                    u_xlat2.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                    u_xlat3.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat2.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat2.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat22.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat30 = max(u_xlat30, u_xlat22.x);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat22.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat22.xx * u_xlat2.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat22.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat11 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat30);
                    u_xlat22.x = sqrt(u_xlat11);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat2.x);
                    u_xlat11 = inversesqrt(u_xlat11);
                    u_xlat1.x = u_xlat11 * abs(u_xlat1.x);
                    u_xlat30 = u_xlat30 * u_xlat1.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat1.x = u_xlat22.x * u_xlat12;
                    u_xlat11 = u_xlat30 * u_xlat1.x;
                    u_xlat21.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat21.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat21.xy = fract(u_xlat21.xy);
                    u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                    u_xlat21.xy = floor(u_xlat21.xy);
                    u_xlat2.x = (-u_xlat21.x) + u_xlat2.x;
                    u_xlat21.x = u_xlat2.x * u_xlat21.y + u_xlat21.x;
                    u_xlat31 = (-u_xlat1.x) * u_xlat30 + 1.0;
                    u_xlat2.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz + u_xlat21.xxx;
                    u_xlatb11.xz = lessThan(vec4(u_xlat11), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat1.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.zyy + u_xlat21.xxx;
                    u_xlat1.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat3.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat3.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_30 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_30 = min(u_xlat16_30, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_30) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_30;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat16_1.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat14;
vec2 u_xlat21;
vec2 u_xlat22;
vec2 u_xlat23;
float u_xlat24;
vec2 u_xlat25;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb30){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb30){
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb30){
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = max(u_xlat30, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb30){
        u_xlat1.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat21.xy = dFdx(u_xlat1.xy);
        u_xlat1.xy = dFdy(u_xlat1.xy);
        u_xlat30 = dot(u_xlat21.xy, u_xlat21.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat30 = max(u_xlat30, u_xlat1.x);
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * 0.5;
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 + 1.0;
        u_xlat1.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = u_xlat1.x / u_xlat30;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb30){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat2.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat2.xyxx).xy;
        u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat3.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat4.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat3.xy = u_xlat2.xy * u_xlat3.xy;
        u_xlat23.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat23.xyxx).xy;
        u_xlatb30 = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb30 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb30){
            u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat3.zw = dFdx(u_xlat3.xy);
            u_xlat3.xy = dFdy(u_xlat3.xy);
            u_xlat30 = dot(u_xlat3.zw, u_xlat3.zw);
            u_xlat5.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat30 = max(u_xlat30, u_xlat5.x);
            u_xlat30 = log2(u_xlat30);
            u_xlat30 = u_xlat30 * 0.5;
            u_xlat30 = max(u_xlat30, 0.0);
            u_xlat30 = u_xlat30 + 1.0;
            u_xlat5.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat3 = u_xlat3 * u_xlat5.xxxx;
            u_xlat3 = u_xlat3 / vec4(u_xlat30);
            u_xlat30 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
            u_xlat13 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
            u_xlat33 = sqrt(u_xlat30);
            u_xlat5.x = sqrt(u_xlat13);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat30 = u_xlat30 * abs(u_xlat3.z);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat3.x = u_xlat13 * abs(u_xlat3.x);
            u_xlat30 = u_xlat30 * u_xlat3.x;
            u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
            u_xlat30 = sqrt(u_xlat30);
            u_xlat3.x = u_xlat33 * u_xlat5.x;
            u_xlat13 = u_xlat30 * u_xlat3.x;
            u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat5.x = fract((-u_xlat23.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = floor(u_xlat5.x);
            u_xlat23.xy = fract(u_xlat23.xy);
            u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
            u_xlat23.xy = floor(u_xlat23.xy);
            u_xlat5.x = (-u_xlat23.x) + u_xlat5.x;
            u_xlat23.x = u_xlat5.x * u_xlat23.y + u_xlat23.x;
            u_xlat33 = (-u_xlat3.x) * u_xlat30 + 1.0;
            u_xlat5.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat23.xxx;
            u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
            u_xlat7.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat30 = u_xlat3.x * u_xlat30 + -4.0;
            u_xlat30 = exp2(u_xlat30);
            u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
            u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
            u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat23.xxx;
            u_xlat3.xzw = (u_xlatb13.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat3.xyz = (u_xlatb13.x) ? u_xlat6.xyz : u_xlat3.xzw;
        } else {
            u_xlat5.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat5.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat5.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat5.xy = u_xlat1.xy * u_xlat5.xy;
            u_xlat25.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(u_xlat5.xyxx, u_xlat25.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat4.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb30 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb30 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb30){
                u_xlat4.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat4.zw = dFdx(u_xlat4.xy);
                u_xlat4.xy = dFdy(u_xlat4.xy);
                u_xlat30 = dot(u_xlat4.zw, u_xlat4.zw);
                u_xlat33 = dot(u_xlat4.xy, u_xlat4.xy);
                u_xlat30 = max(u_xlat30, u_xlat33);
                u_xlat30 = log2(u_xlat30);
                u_xlat30 = u_xlat30 * 0.5;
                u_xlat30 = max(u_xlat30, 0.0);
                u_xlat30 = u_xlat30 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat4 = vec4(u_xlat33) * u_xlat4;
                u_xlat4 = u_xlat4 / vec4(u_xlat30);
                u_xlat30 = dot(abs(u_xlat4.zw), abs(u_xlat4.zw));
                u_xlat33 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                u_xlat14.x = sqrt(u_xlat30);
                u_xlat34 = sqrt(u_xlat33);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat30 = u_xlat30 * abs(u_xlat4.z);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat4.x);
                u_xlat30 = u_xlat30 * u_xlat33;
                u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                u_xlat30 = sqrt(u_xlat30);
                u_xlat33 = u_xlat34 * u_xlat14.x;
                u_xlat4.x = u_xlat30 * u_xlat33;
                u_xlat14.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat34 = fract((-u_xlat14.x));
                u_xlat14.z = u_xlat34 + 0.5;
                u_xlat14.xy = fract(u_xlat14.xy);
                u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
                u_xlat14.xyz = floor(u_xlat14.xyz);
                u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
                u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
                u_xlat24 = (-u_xlat33) * u_xlat30 + 1.0;
                u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
                u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat30 = u_xlat33 * u_xlat30 + -4.0;
                u_xlat30 = exp2(u_xlat30);
                u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat14.xxx;
                u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat3.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb30 = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb30 = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb30){
                    u_xlat2.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat4.xy = dFdx(u_xlat2.xy);
                    u_xlat2.xy = dFdy(u_xlat2.xy);
                    u_xlat30 = dot(u_xlat4.xy, u_xlat4.xy);
                    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat30 = max(u_xlat30, u_xlat33);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat4.xy = vec2(u_xlat33) * u_xlat4.xy;
                    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat33);
                    u_xlat4.xy = u_xlat4.xy / vec2(u_xlat30);
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                    u_xlat12 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat33 = sqrt(u_xlat30);
                    u_xlat14.x = sqrt(u_xlat12);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat4.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat2.x = u_xlat12 * abs(u_xlat2.x);
                    u_xlat30 = u_xlat30 * u_xlat2.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat2.x = u_xlat33 * u_xlat14.x;
                    u_xlat12 = u_xlat30 * u_xlat2.x;
                    u_xlat22.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat33 = fract((-u_xlat22.x));
                    u_xlat33 = u_xlat33 + 0.5;
                    u_xlat33 = floor(u_xlat33);
                    u_xlat22.xy = fract(u_xlat22.xy);
                    u_xlat22.xy = u_xlat22.xy + vec2(0.5, 0.5);
                    u_xlat22.xy = floor(u_xlat22.xy);
                    u_xlat33 = (-u_xlat22.x) + u_xlat33;
                    u_xlat22.x = u_xlat33 * u_xlat22.y + u_xlat22.x;
                    u_xlat32 = (-u_xlat2.x) * u_xlat30 + 1.0;
                    u_xlat4.xyz = (-u_xlat22.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat32) * u_xlat4.xyz + u_xlat22.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat6.xyz = u_xlat22.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat2.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zyy + u_xlat22.xxx;
                    u_xlat2.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                    u_xlat3.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat2.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat2.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat22.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat30 = max(u_xlat30, u_xlat22.x);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat22.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat22.xx * u_xlat2.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat22.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat11 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat30);
                    u_xlat22.x = sqrt(u_xlat11);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat2.x);
                    u_xlat11 = inversesqrt(u_xlat11);
                    u_xlat1.x = u_xlat11 * abs(u_xlat1.x);
                    u_xlat30 = u_xlat30 * u_xlat1.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat1.x = u_xlat22.x * u_xlat12;
                    u_xlat11 = u_xlat30 * u_xlat1.x;
                    u_xlat21.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat21.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat21.xy = fract(u_xlat21.xy);
                    u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                    u_xlat21.xy = floor(u_xlat21.xy);
                    u_xlat2.x = (-u_xlat21.x) + u_xlat2.x;
                    u_xlat21.x = u_xlat2.x * u_xlat21.y + u_xlat21.x;
                    u_xlat31 = (-u_xlat1.x) * u_xlat30 + 1.0;
                    u_xlat2.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz + u_xlat21.xxx;
                    u_xlatb11.xz = lessThan(vec4(u_xlat11), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat1.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.zyy + u_xlat21.xxx;
                    u_xlat1.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat3.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat3.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_30 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_30 = min(u_xlat16_30, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_30) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_30;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat16_1.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
bvec3 u_xlatb12;
float u_xlat13;
bvec3 u_xlatb13;
vec3 u_xlat14;
vec2 u_xlat21;
vec2 u_xlat22;
vec2 u_xlat23;
float u_xlat24;
vec2 u_xlat25;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb30){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb30){
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb30){
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = max(u_xlat30, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb30){
        u_xlat1.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat21.xy = dFdx(u_xlat1.xy);
        u_xlat1.xy = dFdy(u_xlat1.xy);
        u_xlat30 = dot(u_xlat21.xy, u_xlat21.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat30 = max(u_xlat30, u_xlat1.x);
        u_xlat30 = log2(u_xlat30);
        u_xlat30 = u_xlat30 * 0.5;
        u_xlat30 = max(u_xlat30, 0.0);
        u_xlat30 = u_xlat30 + 1.0;
        u_xlat1.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat30 = u_xlat1.x / u_xlat30;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(256.0<u_xlat30);
#else
        u_xlatb1.x = 256.0<u_xlat30;
#endif
        u_xlatb11.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), vec4(u_xlat30)).xy;
        u_xlat2 = (u_xlatb11.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat2 = (u_xlatb11.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? u_xlat2 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb30 = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb30){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat2.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat2.xyxx).xy;
        u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat3.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat4.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat3.xy = u_xlat2.xy * u_xlat3.xy;
        u_xlat23.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb3.xy = lessThan(u_xlat3.xyxx, u_xlat23.xyxx).xy;
        u_xlatb30 = u_xlatb3.y || u_xlatb3.x;
        u_xlat4.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb30 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb30){
            u_xlat3.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat3.zw = dFdx(u_xlat3.xy);
            u_xlat3.xy = dFdy(u_xlat3.xy);
            u_xlat30 = dot(u_xlat3.zw, u_xlat3.zw);
            u_xlat5.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat30 = max(u_xlat30, u_xlat5.x);
            u_xlat30 = log2(u_xlat30);
            u_xlat30 = u_xlat30 * 0.5;
            u_xlat30 = max(u_xlat30, 0.0);
            u_xlat30 = u_xlat30 + 1.0;
            u_xlat5.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat3 = u_xlat3 * u_xlat5.xxxx;
            u_xlat3 = u_xlat3 / vec4(u_xlat30);
            u_xlat30 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
            u_xlat13 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
            u_xlat33 = sqrt(u_xlat30);
            u_xlat5.x = sqrt(u_xlat13);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat30 = u_xlat30 * abs(u_xlat3.z);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat3.x = u_xlat13 * abs(u_xlat3.x);
            u_xlat30 = u_xlat30 * u_xlat3.x;
            u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
            u_xlat30 = sqrt(u_xlat30);
            u_xlat3.x = u_xlat33 * u_xlat5.x;
            u_xlat13 = u_xlat30 * u_xlat3.x;
            u_xlat23.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat5.x = fract((-u_xlat23.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = floor(u_xlat5.x);
            u_xlat23.xy = fract(u_xlat23.xy);
            u_xlat23.xy = u_xlat23.xy + vec2(0.5, 0.5);
            u_xlat23.xy = floor(u_xlat23.xy);
            u_xlat5.x = (-u_xlat23.x) + u_xlat5.x;
            u_xlat23.x = u_xlat5.x * u_xlat23.y + u_xlat23.x;
            u_xlat33 = (-u_xlat3.x) * u_xlat30 + 1.0;
            u_xlat5.xyz = (-u_xlat23.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat23.xxx;
            u_xlatb13.xz = lessThan(vec4(u_xlat13), vec4(1.0, 0.0, 2.0, 2.0)).xz;
            u_xlat7.xyz = u_xlat23.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat30 = u_xlat3.x * u_xlat30 + -4.0;
            u_xlat30 = exp2(u_xlat30);
            u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
            u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
            u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat23.xxx;
            u_xlat3.xzw = (u_xlatb13.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat3.xyz = (u_xlatb13.x) ? u_xlat6.xyz : u_xlat3.xzw;
        } else {
            u_xlat5.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat5.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat5.xy = (bool(u_xlatb30)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat5.xy = u_xlat1.xy * u_xlat5.xy;
            u_xlat25.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb5.xy = lessThan(u_xlat5.xyxx, u_xlat25.xyxx).xy;
            u_xlatb30 = u_xlatb5.y || u_xlatb5.x;
            u_xlat4.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (bool(u_xlatb30)) ? u_xlat4 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb30 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb30 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb30){
                u_xlat4.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat4.zw = dFdx(u_xlat4.xy);
                u_xlat4.xy = dFdy(u_xlat4.xy);
                u_xlat30 = dot(u_xlat4.zw, u_xlat4.zw);
                u_xlat33 = dot(u_xlat4.xy, u_xlat4.xy);
                u_xlat30 = max(u_xlat30, u_xlat33);
                u_xlat30 = log2(u_xlat30);
                u_xlat30 = u_xlat30 * 0.5;
                u_xlat30 = max(u_xlat30, 0.0);
                u_xlat30 = u_xlat30 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat4 = vec4(u_xlat33) * u_xlat4;
                u_xlat4 = u_xlat4 / vec4(u_xlat30);
                u_xlat30 = dot(abs(u_xlat4.zw), abs(u_xlat4.zw));
                u_xlat33 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                u_xlat14.x = sqrt(u_xlat30);
                u_xlat34 = sqrt(u_xlat33);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat30 = u_xlat30 * abs(u_xlat4.z);
                u_xlat33 = inversesqrt(u_xlat33);
                u_xlat33 = u_xlat33 * abs(u_xlat4.x);
                u_xlat30 = u_xlat30 * u_xlat33;
                u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                u_xlat30 = sqrt(u_xlat30);
                u_xlat33 = u_xlat34 * u_xlat14.x;
                u_xlat4.x = u_xlat30 * u_xlat33;
                u_xlat14.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat34 = fract((-u_xlat14.x));
                u_xlat14.z = u_xlat34 + 0.5;
                u_xlat14.xy = fract(u_xlat14.xy);
                u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
                u_xlat14.xyz = floor(u_xlat14.xyz);
                u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
                u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
                u_xlat24 = (-u_xlat33) * u_xlat30 + 1.0;
                u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
                u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat30 = u_xlat33 * u_xlat30 + -4.0;
                u_xlat30 = exp2(u_xlat30);
                u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat5.zyy + u_xlat14.xxx;
                u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat3.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb30 = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb30 = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb30){
                    u_xlat2.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat4.xy = dFdx(u_xlat2.xy);
                    u_xlat2.xy = dFdy(u_xlat2.xy);
                    u_xlat30 = dot(u_xlat4.xy, u_xlat4.xy);
                    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat30 = max(u_xlat30, u_xlat33);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat4.xy = vec2(u_xlat33) * u_xlat4.xy;
                    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat33);
                    u_xlat4.xy = u_xlat4.xy / vec2(u_xlat30);
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
                    u_xlat12 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat33 = sqrt(u_xlat30);
                    u_xlat14.x = sqrt(u_xlat12);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat4.x);
                    u_xlat12 = inversesqrt(u_xlat12);
                    u_xlat2.x = u_xlat12 * abs(u_xlat2.x);
                    u_xlat30 = u_xlat30 * u_xlat2.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat2.x = u_xlat33 * u_xlat14.x;
                    u_xlat12 = u_xlat30 * u_xlat2.x;
                    u_xlat22.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat33 = fract((-u_xlat22.x));
                    u_xlat33 = u_xlat33 + 0.5;
                    u_xlat33 = floor(u_xlat33);
                    u_xlat22.xy = fract(u_xlat22.xy);
                    u_xlat22.xy = u_xlat22.xy + vec2(0.5, 0.5);
                    u_xlat22.xy = floor(u_xlat22.xy);
                    u_xlat33 = (-u_xlat22.x) + u_xlat33;
                    u_xlat22.x = u_xlat33 * u_xlat22.y + u_xlat22.x;
                    u_xlat32 = (-u_xlat2.x) * u_xlat30 + 1.0;
                    u_xlat4.xyz = (-u_xlat22.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat32) * u_xlat4.xyz + u_xlat22.xxx;
                    u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat6.xyz = u_xlat22.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat2.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zyy + u_xlat22.xxx;
                    u_xlat2.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                    u_xlat3.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat2.xzw;
                } else {
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat2.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat22.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat30 = max(u_xlat30, u_xlat22.x);
                    u_xlat30 = log2(u_xlat30);
                    u_xlat30 = u_xlat30 * 0.5;
                    u_xlat30 = max(u_xlat30, 0.0);
                    u_xlat30 = u_xlat30 + 1.0;
                    u_xlat22.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat22.xx * u_xlat2.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat22.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat30);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat30);
                    u_xlat30 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat11 = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat30);
                    u_xlat22.x = sqrt(u_xlat11);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat30 = u_xlat30 * abs(u_xlat2.x);
                    u_xlat11 = inversesqrt(u_xlat11);
                    u_xlat1.x = u_xlat11 * abs(u_xlat1.x);
                    u_xlat30 = u_xlat30 * u_xlat1.x;
                    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
                    u_xlat30 = sqrt(u_xlat30);
                    u_xlat1.x = u_xlat22.x * u_xlat12;
                    u_xlat11 = u_xlat30 * u_xlat1.x;
                    u_xlat21.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat21.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat21.xy = fract(u_xlat21.xy);
                    u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                    u_xlat21.xy = floor(u_xlat21.xy);
                    u_xlat2.x = (-u_xlat21.x) + u_xlat2.x;
                    u_xlat21.x = u_xlat2.x * u_xlat21.y + u_xlat21.x;
                    u_xlat31 = (-u_xlat1.x) * u_xlat30 + 1.0;
                    u_xlat2.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz + u_xlat21.xxx;
                    u_xlatb11.xz = lessThan(vec4(u_xlat11), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                    u_xlat5.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat30 = u_xlat1.x * u_xlat30 + -4.0;
                    u_xlat30 = exp2(u_xlat30);
                    u_xlat30 = u_xlat30 + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
                    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.zyy + u_xlat21.xxx;
                    u_xlat1.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat3.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat1.xzw;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat3.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb1.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb30 = u_xlatb1.y || u_xlatb1.x;
    if(u_xlatb30){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_30 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_30 = min(u_xlat16_30, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_30) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_30;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat16_1.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
vec2 u_xlat18;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat21;
vec2 u_xlat22;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
mediump float u_xlat16_34;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat19.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat1 = (u_xlatb1.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb2 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb2){
            u_xlat2.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat2.zw = dFdx(u_xlat2.xy);
            u_xlat2.xy = dFdy(u_xlat2.xy);
            u_xlat4.x = dot(u_xlat2.zw, u_xlat2.zw);
            u_xlat13.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat4.x = max(u_xlat13.x, u_xlat4.x);
            u_xlat4.x = log2(u_xlat4.x);
            u_xlat4.x = u_xlat4.x * 0.5;
            u_xlat4.x = max(u_xlat4.x, 0.0);
            u_xlat4.x = u_xlat4.x + 1.0;
            u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat2 = u_xlat2 * u_xlat13.xxxx;
            u_xlat2 = u_xlat2 / u_xlat4.xxxx;
            u_xlat11.z = dot(abs(u_xlat2.zw), abs(u_xlat2.zw));
            u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
            u_xlat4.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat2.xz = u_xlat11.xz * abs(u_xlat2.xz);
            u_xlat2.x = u_xlat2.x * u_xlat2.z;
            u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat11.x = u_xlat4.y * u_xlat4.x;
            u_xlat20 = u_xlat2.x * u_xlat11.x;
            u_xlat4.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat29 = fract((-u_xlat4.x));
            u_xlat29 = u_xlat29 + 0.5;
            u_xlat29 = floor(u_xlat29);
            u_xlat4.xy = fract(u_xlat4.xy);
            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
            u_xlat4.xy = floor(u_xlat4.xy);
            u_xlat29 = u_xlat29 + (-u_xlat4.x);
            u_xlat29 = u_xlat29 * u_xlat4.y + u_xlat4.x;
            u_xlat4.x = (-u_xlat11.x) * u_xlat2.x + 1.0;
            u_xlat13.xyz = (-vec3(u_xlat29)) + vec3(0.5, 0.0, 1.0);
            u_xlat5.xyz = u_xlat4.xxx * u_xlat13.xyz + vec3(u_xlat29);
            u_xlatb4.xy = lessThan(vec4(u_xlat20), vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat6.xyz = vec3(u_xlat29) * vec3(0.0, 1.0, 0.0);
            u_xlat2.x = u_xlat11.x * u_xlat2.x + -4.0;
            u_xlat2.x = exp2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
            u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
            u_xlat2.xyz = u_xlat2.xxx * u_xlat13.zyy + vec3(u_xlat29);
            u_xlat2.xyz = (u_xlatb4.y) ? u_xlat6.xyz : u_xlat2.xyz;
            u_xlat2.xyz = (u_xlatb4.x) ? u_xlat5.xyz : u_xlat2.xyz;
        } else {
            u_xlat4.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat4.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat4.xy = (bool(u_xlatb29)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat4.xy = u_xlat0.xy * u_xlat4.xy;
            u_xlat22.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(u_xlat4.xyxx, u_xlat22.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat3 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb29 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb29 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb29){
                u_xlat3.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat29 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat29 = max(u_xlat29, u_xlat4.x);
                u_xlat29 = log2(u_xlat29);
                u_xlat29 = u_xlat29 * 0.5;
                u_xlat29 = max(u_xlat29, 0.0);
                u_xlat29 = u_xlat29 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat29);
                u_xlat29 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat12 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = sqrt(u_xlat29);
                u_xlat4.x = sqrt(u_xlat12);
                u_xlat29 = inversesqrt(u_xlat29);
                u_xlat29 = u_xlat29 * abs(u_xlat3.z);
                u_xlat12 = inversesqrt(u_xlat12);
                u_xlat3.x = u_xlat12 * abs(u_xlat3.x);
                u_xlat29 = u_xlat29 * u_xlat3.x;
                u_xlat29 = (-u_xlat29) * u_xlat29 + 1.0;
                u_xlat29 = sqrt(u_xlat29);
                u_xlat3.x = u_xlat30 * u_xlat4.x;
                u_xlat12 = u_xlat29 * u_xlat3.x;
                u_xlat21.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat4.x = fract((-u_xlat21.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat21.xy = fract(u_xlat21.xy);
                u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                u_xlat21.xy = floor(u_xlat21.xy);
                u_xlat4.x = (-u_xlat21.x) + u_xlat4.x;
                u_xlat21.x = u_xlat4.x * u_xlat21.y + u_xlat21.x;
                u_xlat30 = (-u_xlat3.x) * u_xlat29 + 1.0;
                u_xlat4.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat21.xxx;
                u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat29 = u_xlat3.x * u_xlat29 + -4.0;
                u_xlat29 = exp2(u_xlat29);
                u_xlat29 = u_xlat29 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
                u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.zyy + u_xlat21.xxx;
                u_xlat3.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat2.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb29 = !!(u_xlat1.x>=u_xlat0.x);
#else
                u_xlatb29 = u_xlat1.x>=u_xlat0.x;
#endif
                if(u_xlatb29){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat29 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat29 = max(u_xlat29, u_xlat21.x);
                    u_xlat29 = log2(u_xlat29);
                    u_xlat29 = u_xlat29 * 0.5;
                    u_xlat29 = max(u_xlat29, 0.0);
                    u_xlat29 = u_xlat29 + 1.0;
                    u_xlat21.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat21.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat21.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat29);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat29);
                    u_xlat29 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat29);
                    u_xlat21.x = sqrt(u_xlat10.x);
                    u_xlat29 = inversesqrt(u_xlat29);
                    u_xlat29 = u_xlat29 * abs(u_xlat3.x);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x * u_xlat29;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat10.x = u_xlat21.x * u_xlat12;
                    u_xlat29 = u_xlat1.x * u_xlat10.x;
                    u_xlat19.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat19.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat19.xy = fract(u_xlat19.xy);
                    u_xlat19.xy = u_xlat19.xy + vec2(0.5, 0.5);
                    u_xlat19.xy = floor(u_xlat19.xy);
                    u_xlat3.x = (-u_xlat19.x) + u_xlat3.x;
                    u_xlat19.x = u_xlat3.x * u_xlat19.y + u_xlat19.x;
                    u_xlat28 = (-u_xlat10.x) * u_xlat1.x + 1.0;
                    u_xlat3.xyz = (-u_xlat19.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat19.xxx;
                    u_xlatb3.xw = lessThan(vec4(u_xlat29), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat5.xyz = u_xlat19.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.zyy + u_xlat19.xxx;
                    u_xlat1.xyz = (u_xlatb3.w) ? u_xlat5.xyz : u_xlat1.xyz;
                    u_xlat2.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat28 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat19.x = max(u_xlat28, u_xlat19.x);
                    u_xlat19.x = log2(u_xlat19.x);
                    u_xlat19.x = u_xlat19.x * 0.5;
                    u_xlat19.x = max(u_xlat19.x, 0.0);
                    u_xlat19.x = u_xlat19.x + 1.0;
                    u_xlat28 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat28) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat28);
                    u_xlat1.xy = u_xlat1.xy / u_xlat19.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat19.xx;
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat19.x = sqrt(u_xlat10.x);
                    u_xlat28 = sqrt(u_xlat9);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat28 * u_xlat19.x;
                    u_xlat1.x = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat10.x = fract((-u_xlat18.x));
                    u_xlat10.x = u_xlat10.x + 0.5;
                    u_xlat10.x = floor(u_xlat10.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat10.x = (-u_xlat18.x) + u_xlat10.x;
                    u_xlat18.x = u_xlat10.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat10.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat18.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat2.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat2.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_27 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_27 = min(u_xlat16_27, 0.999000013);
    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat16_34 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat16_27) + 1.0;
    SV_Target2.w = u_xlat16_34 * u_xlat16_8.x + u_xlat16_27;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.yyy * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_34 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : u_xlat16_8.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_8.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
vec2 u_xlat18;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat21;
vec2 u_xlat22;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
mediump float u_xlat16_34;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat19.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat1 = (u_xlatb1.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb2 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb2){
            u_xlat2.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat2.zw = dFdx(u_xlat2.xy);
            u_xlat2.xy = dFdy(u_xlat2.xy);
            u_xlat4.x = dot(u_xlat2.zw, u_xlat2.zw);
            u_xlat13.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat4.x = max(u_xlat13.x, u_xlat4.x);
            u_xlat4.x = log2(u_xlat4.x);
            u_xlat4.x = u_xlat4.x * 0.5;
            u_xlat4.x = max(u_xlat4.x, 0.0);
            u_xlat4.x = u_xlat4.x + 1.0;
            u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat2 = u_xlat2 * u_xlat13.xxxx;
            u_xlat2 = u_xlat2 / u_xlat4.xxxx;
            u_xlat11.z = dot(abs(u_xlat2.zw), abs(u_xlat2.zw));
            u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
            u_xlat4.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat2.xz = u_xlat11.xz * abs(u_xlat2.xz);
            u_xlat2.x = u_xlat2.x * u_xlat2.z;
            u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat11.x = u_xlat4.y * u_xlat4.x;
            u_xlat20 = u_xlat2.x * u_xlat11.x;
            u_xlat4.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat29 = fract((-u_xlat4.x));
            u_xlat29 = u_xlat29 + 0.5;
            u_xlat29 = floor(u_xlat29);
            u_xlat4.xy = fract(u_xlat4.xy);
            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
            u_xlat4.xy = floor(u_xlat4.xy);
            u_xlat29 = u_xlat29 + (-u_xlat4.x);
            u_xlat29 = u_xlat29 * u_xlat4.y + u_xlat4.x;
            u_xlat4.x = (-u_xlat11.x) * u_xlat2.x + 1.0;
            u_xlat13.xyz = (-vec3(u_xlat29)) + vec3(0.5, 0.0, 1.0);
            u_xlat5.xyz = u_xlat4.xxx * u_xlat13.xyz + vec3(u_xlat29);
            u_xlatb4.xy = lessThan(vec4(u_xlat20), vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat6.xyz = vec3(u_xlat29) * vec3(0.0, 1.0, 0.0);
            u_xlat2.x = u_xlat11.x * u_xlat2.x + -4.0;
            u_xlat2.x = exp2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
            u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
            u_xlat2.xyz = u_xlat2.xxx * u_xlat13.zyy + vec3(u_xlat29);
            u_xlat2.xyz = (u_xlatb4.y) ? u_xlat6.xyz : u_xlat2.xyz;
            u_xlat2.xyz = (u_xlatb4.x) ? u_xlat5.xyz : u_xlat2.xyz;
        } else {
            u_xlat4.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat4.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat4.xy = (bool(u_xlatb29)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat4.xy = u_xlat0.xy * u_xlat4.xy;
            u_xlat22.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(u_xlat4.xyxx, u_xlat22.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat3 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb29 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb29 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb29){
                u_xlat3.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat29 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat29 = max(u_xlat29, u_xlat4.x);
                u_xlat29 = log2(u_xlat29);
                u_xlat29 = u_xlat29 * 0.5;
                u_xlat29 = max(u_xlat29, 0.0);
                u_xlat29 = u_xlat29 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat29);
                u_xlat29 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat12 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = sqrt(u_xlat29);
                u_xlat4.x = sqrt(u_xlat12);
                u_xlat29 = inversesqrt(u_xlat29);
                u_xlat29 = u_xlat29 * abs(u_xlat3.z);
                u_xlat12 = inversesqrt(u_xlat12);
                u_xlat3.x = u_xlat12 * abs(u_xlat3.x);
                u_xlat29 = u_xlat29 * u_xlat3.x;
                u_xlat29 = (-u_xlat29) * u_xlat29 + 1.0;
                u_xlat29 = sqrt(u_xlat29);
                u_xlat3.x = u_xlat30 * u_xlat4.x;
                u_xlat12 = u_xlat29 * u_xlat3.x;
                u_xlat21.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat4.x = fract((-u_xlat21.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat21.xy = fract(u_xlat21.xy);
                u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                u_xlat21.xy = floor(u_xlat21.xy);
                u_xlat4.x = (-u_xlat21.x) + u_xlat4.x;
                u_xlat21.x = u_xlat4.x * u_xlat21.y + u_xlat21.x;
                u_xlat30 = (-u_xlat3.x) * u_xlat29 + 1.0;
                u_xlat4.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat21.xxx;
                u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat29 = u_xlat3.x * u_xlat29 + -4.0;
                u_xlat29 = exp2(u_xlat29);
                u_xlat29 = u_xlat29 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
                u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.zyy + u_xlat21.xxx;
                u_xlat3.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat2.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb29 = !!(u_xlat1.x>=u_xlat0.x);
#else
                u_xlatb29 = u_xlat1.x>=u_xlat0.x;
#endif
                if(u_xlatb29){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat29 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat29 = max(u_xlat29, u_xlat21.x);
                    u_xlat29 = log2(u_xlat29);
                    u_xlat29 = u_xlat29 * 0.5;
                    u_xlat29 = max(u_xlat29, 0.0);
                    u_xlat29 = u_xlat29 + 1.0;
                    u_xlat21.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat21.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat21.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat29);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat29);
                    u_xlat29 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat29);
                    u_xlat21.x = sqrt(u_xlat10.x);
                    u_xlat29 = inversesqrt(u_xlat29);
                    u_xlat29 = u_xlat29 * abs(u_xlat3.x);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x * u_xlat29;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat10.x = u_xlat21.x * u_xlat12;
                    u_xlat29 = u_xlat1.x * u_xlat10.x;
                    u_xlat19.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat19.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat19.xy = fract(u_xlat19.xy);
                    u_xlat19.xy = u_xlat19.xy + vec2(0.5, 0.5);
                    u_xlat19.xy = floor(u_xlat19.xy);
                    u_xlat3.x = (-u_xlat19.x) + u_xlat3.x;
                    u_xlat19.x = u_xlat3.x * u_xlat19.y + u_xlat19.x;
                    u_xlat28 = (-u_xlat10.x) * u_xlat1.x + 1.0;
                    u_xlat3.xyz = (-u_xlat19.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat19.xxx;
                    u_xlatb3.xw = lessThan(vec4(u_xlat29), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat5.xyz = u_xlat19.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.zyy + u_xlat19.xxx;
                    u_xlat1.xyz = (u_xlatb3.w) ? u_xlat5.xyz : u_xlat1.xyz;
                    u_xlat2.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat28 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat19.x = max(u_xlat28, u_xlat19.x);
                    u_xlat19.x = log2(u_xlat19.x);
                    u_xlat19.x = u_xlat19.x * 0.5;
                    u_xlat19.x = max(u_xlat19.x, 0.0);
                    u_xlat19.x = u_xlat19.x + 1.0;
                    u_xlat28 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat28) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat28);
                    u_xlat1.xy = u_xlat1.xy / u_xlat19.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat19.xx;
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat19.x = sqrt(u_xlat10.x);
                    u_xlat28 = sqrt(u_xlat9);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat28 * u_xlat19.x;
                    u_xlat1.x = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat10.x = fract((-u_xlat18.x));
                    u_xlat10.x = u_xlat10.x + 0.5;
                    u_xlat10.x = floor(u_xlat10.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat10.x = (-u_xlat18.x) + u_xlat10.x;
                    u_xlat18.x = u_xlat10.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat10.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat18.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat2.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat2.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_27 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_27 = min(u_xlat16_27, 0.999000013);
    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_1.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat16_34 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat16_27) + 1.0;
    SV_Target2.w = u_xlat16_34 * u_xlat16_8.x + u_xlat16_27;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.yyy * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_34 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : u_xlat16_8.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_8.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
vec2 u_xlat18;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat21;
vec2 u_xlat22;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
mediump float u_xlat16_34;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat19.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat1 = (u_xlatb1.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb2 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb2){
            u_xlat2.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat2.zw = dFdx(u_xlat2.xy);
            u_xlat2.xy = dFdy(u_xlat2.xy);
            u_xlat4.x = dot(u_xlat2.zw, u_xlat2.zw);
            u_xlat13.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat4.x = max(u_xlat13.x, u_xlat4.x);
            u_xlat4.x = log2(u_xlat4.x);
            u_xlat4.x = u_xlat4.x * 0.5;
            u_xlat4.x = max(u_xlat4.x, 0.0);
            u_xlat4.x = u_xlat4.x + 1.0;
            u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat2 = u_xlat2 * u_xlat13.xxxx;
            u_xlat2 = u_xlat2 / u_xlat4.xxxx;
            u_xlat11.z = dot(abs(u_xlat2.zw), abs(u_xlat2.zw));
            u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
            u_xlat4.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat2.xz = u_xlat11.xz * abs(u_xlat2.xz);
            u_xlat2.x = u_xlat2.x * u_xlat2.z;
            u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat11.x = u_xlat4.y * u_xlat4.x;
            u_xlat20 = u_xlat2.x * u_xlat11.x;
            u_xlat4.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat29 = fract((-u_xlat4.x));
            u_xlat29 = u_xlat29 + 0.5;
            u_xlat29 = floor(u_xlat29);
            u_xlat4.xy = fract(u_xlat4.xy);
            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
            u_xlat4.xy = floor(u_xlat4.xy);
            u_xlat29 = u_xlat29 + (-u_xlat4.x);
            u_xlat29 = u_xlat29 * u_xlat4.y + u_xlat4.x;
            u_xlat4.x = (-u_xlat11.x) * u_xlat2.x + 1.0;
            u_xlat13.xyz = (-vec3(u_xlat29)) + vec3(0.5, 0.0, 1.0);
            u_xlat5.xyz = u_xlat4.xxx * u_xlat13.xyz + vec3(u_xlat29);
            u_xlatb4.xy = lessThan(vec4(u_xlat20), vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat6.xyz = vec3(u_xlat29) * vec3(0.0, 1.0, 0.0);
            u_xlat2.x = u_xlat11.x * u_xlat2.x + -4.0;
            u_xlat2.x = exp2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
            u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
            u_xlat2.xyz = u_xlat2.xxx * u_xlat13.zyy + vec3(u_xlat29);
            u_xlat2.xyz = (u_xlatb4.y) ? u_xlat6.xyz : u_xlat2.xyz;
            u_xlat2.xyz = (u_xlatb4.x) ? u_xlat5.xyz : u_xlat2.xyz;
        } else {
            u_xlat4.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat4.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat4.xy = (bool(u_xlatb29)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat4.xy = u_xlat0.xy * u_xlat4.xy;
            u_xlat22.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(u_xlat4.xyxx, u_xlat22.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat3 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb29 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb29 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb29){
                u_xlat3.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat29 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat29 = max(u_xlat29, u_xlat4.x);
                u_xlat29 = log2(u_xlat29);
                u_xlat29 = u_xlat29 * 0.5;
                u_xlat29 = max(u_xlat29, 0.0);
                u_xlat29 = u_xlat29 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat29);
                u_xlat29 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat12 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = sqrt(u_xlat29);
                u_xlat4.x = sqrt(u_xlat12);
                u_xlat29 = inversesqrt(u_xlat29);
                u_xlat29 = u_xlat29 * abs(u_xlat3.z);
                u_xlat12 = inversesqrt(u_xlat12);
                u_xlat3.x = u_xlat12 * abs(u_xlat3.x);
                u_xlat29 = u_xlat29 * u_xlat3.x;
                u_xlat29 = (-u_xlat29) * u_xlat29 + 1.0;
                u_xlat29 = sqrt(u_xlat29);
                u_xlat3.x = u_xlat30 * u_xlat4.x;
                u_xlat12 = u_xlat29 * u_xlat3.x;
                u_xlat21.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat4.x = fract((-u_xlat21.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat21.xy = fract(u_xlat21.xy);
                u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                u_xlat21.xy = floor(u_xlat21.xy);
                u_xlat4.x = (-u_xlat21.x) + u_xlat4.x;
                u_xlat21.x = u_xlat4.x * u_xlat21.y + u_xlat21.x;
                u_xlat30 = (-u_xlat3.x) * u_xlat29 + 1.0;
                u_xlat4.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat21.xxx;
                u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat29 = u_xlat3.x * u_xlat29 + -4.0;
                u_xlat29 = exp2(u_xlat29);
                u_xlat29 = u_xlat29 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
                u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.zyy + u_xlat21.xxx;
                u_xlat3.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat2.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb29 = !!(u_xlat1.x>=u_xlat0.x);
#else
                u_xlatb29 = u_xlat1.x>=u_xlat0.x;
#endif
                if(u_xlatb29){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat29 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat29 = max(u_xlat29, u_xlat21.x);
                    u_xlat29 = log2(u_xlat29);
                    u_xlat29 = u_xlat29 * 0.5;
                    u_xlat29 = max(u_xlat29, 0.0);
                    u_xlat29 = u_xlat29 + 1.0;
                    u_xlat21.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat21.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat21.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat29);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat29);
                    u_xlat29 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat29);
                    u_xlat21.x = sqrt(u_xlat10.x);
                    u_xlat29 = inversesqrt(u_xlat29);
                    u_xlat29 = u_xlat29 * abs(u_xlat3.x);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x * u_xlat29;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat10.x = u_xlat21.x * u_xlat12;
                    u_xlat29 = u_xlat1.x * u_xlat10.x;
                    u_xlat19.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat19.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat19.xy = fract(u_xlat19.xy);
                    u_xlat19.xy = u_xlat19.xy + vec2(0.5, 0.5);
                    u_xlat19.xy = floor(u_xlat19.xy);
                    u_xlat3.x = (-u_xlat19.x) + u_xlat3.x;
                    u_xlat19.x = u_xlat3.x * u_xlat19.y + u_xlat19.x;
                    u_xlat28 = (-u_xlat10.x) * u_xlat1.x + 1.0;
                    u_xlat3.xyz = (-u_xlat19.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat19.xxx;
                    u_xlatb3.xw = lessThan(vec4(u_xlat29), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat5.xyz = u_xlat19.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.zyy + u_xlat19.xxx;
                    u_xlat1.xyz = (u_xlatb3.w) ? u_xlat5.xyz : u_xlat1.xyz;
                    u_xlat2.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat28 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat19.x = max(u_xlat28, u_xlat19.x);
                    u_xlat19.x = log2(u_xlat19.x);
                    u_xlat19.x = u_xlat19.x * 0.5;
                    u_xlat19.x = max(u_xlat19.x, 0.0);
                    u_xlat19.x = u_xlat19.x + 1.0;
                    u_xlat28 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat28) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat28);
                    u_xlat1.xy = u_xlat1.xy / u_xlat19.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat19.xx;
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat19.x = sqrt(u_xlat10.x);
                    u_xlat28 = sqrt(u_xlat9);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat28 * u_xlat19.x;
                    u_xlat1.x = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat10.x = fract((-u_xlat18.x));
                    u_xlat10.x = u_xlat10.x + 0.5;
                    u_xlat10.x = floor(u_xlat10.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat10.x = (-u_xlat18.x) + u_xlat10.x;
                    u_xlat18.x = u_xlat10.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat10.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat18.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat2.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat2.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_27 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_27 = min(u_xlat16_27, 0.999000013);
    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat16_34 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat16_27) + 1.0;
    SV_Target2.w = u_xlat16_34 * u_xlat16_8.x + u_xlat16_27;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.yyy * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_34 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : u_xlat16_8.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_8.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
vec2 u_xlat18;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat21;
vec2 u_xlat22;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
mediump float u_xlat16_34;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat19.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat1 = (u_xlatb1.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb2 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb2){
            u_xlat2.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat2.zw = dFdx(u_xlat2.xy);
            u_xlat2.xy = dFdy(u_xlat2.xy);
            u_xlat4.x = dot(u_xlat2.zw, u_xlat2.zw);
            u_xlat13.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat4.x = max(u_xlat13.x, u_xlat4.x);
            u_xlat4.x = log2(u_xlat4.x);
            u_xlat4.x = u_xlat4.x * 0.5;
            u_xlat4.x = max(u_xlat4.x, 0.0);
            u_xlat4.x = u_xlat4.x + 1.0;
            u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat2 = u_xlat2 * u_xlat13.xxxx;
            u_xlat2 = u_xlat2 / u_xlat4.xxxx;
            u_xlat11.z = dot(abs(u_xlat2.zw), abs(u_xlat2.zw));
            u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
            u_xlat4.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat2.xz = u_xlat11.xz * abs(u_xlat2.xz);
            u_xlat2.x = u_xlat2.x * u_xlat2.z;
            u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat11.x = u_xlat4.y * u_xlat4.x;
            u_xlat20 = u_xlat2.x * u_xlat11.x;
            u_xlat4.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat29 = fract((-u_xlat4.x));
            u_xlat29 = u_xlat29 + 0.5;
            u_xlat29 = floor(u_xlat29);
            u_xlat4.xy = fract(u_xlat4.xy);
            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
            u_xlat4.xy = floor(u_xlat4.xy);
            u_xlat29 = u_xlat29 + (-u_xlat4.x);
            u_xlat29 = u_xlat29 * u_xlat4.y + u_xlat4.x;
            u_xlat4.x = (-u_xlat11.x) * u_xlat2.x + 1.0;
            u_xlat13.xyz = (-vec3(u_xlat29)) + vec3(0.5, 0.0, 1.0);
            u_xlat5.xyz = u_xlat4.xxx * u_xlat13.xyz + vec3(u_xlat29);
            u_xlatb4.xy = lessThan(vec4(u_xlat20), vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat6.xyz = vec3(u_xlat29) * vec3(0.0, 1.0, 0.0);
            u_xlat2.x = u_xlat11.x * u_xlat2.x + -4.0;
            u_xlat2.x = exp2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
            u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
            u_xlat2.xyz = u_xlat2.xxx * u_xlat13.zyy + vec3(u_xlat29);
            u_xlat2.xyz = (u_xlatb4.y) ? u_xlat6.xyz : u_xlat2.xyz;
            u_xlat2.xyz = (u_xlatb4.x) ? u_xlat5.xyz : u_xlat2.xyz;
        } else {
            u_xlat4.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat4.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat4.xy = (bool(u_xlatb29)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat4.xy = u_xlat0.xy * u_xlat4.xy;
            u_xlat22.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(u_xlat4.xyxx, u_xlat22.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat3 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb29 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb29 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb29){
                u_xlat3.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat29 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat29 = max(u_xlat29, u_xlat4.x);
                u_xlat29 = log2(u_xlat29);
                u_xlat29 = u_xlat29 * 0.5;
                u_xlat29 = max(u_xlat29, 0.0);
                u_xlat29 = u_xlat29 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat29);
                u_xlat29 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat12 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = sqrt(u_xlat29);
                u_xlat4.x = sqrt(u_xlat12);
                u_xlat29 = inversesqrt(u_xlat29);
                u_xlat29 = u_xlat29 * abs(u_xlat3.z);
                u_xlat12 = inversesqrt(u_xlat12);
                u_xlat3.x = u_xlat12 * abs(u_xlat3.x);
                u_xlat29 = u_xlat29 * u_xlat3.x;
                u_xlat29 = (-u_xlat29) * u_xlat29 + 1.0;
                u_xlat29 = sqrt(u_xlat29);
                u_xlat3.x = u_xlat30 * u_xlat4.x;
                u_xlat12 = u_xlat29 * u_xlat3.x;
                u_xlat21.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat4.x = fract((-u_xlat21.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat21.xy = fract(u_xlat21.xy);
                u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                u_xlat21.xy = floor(u_xlat21.xy);
                u_xlat4.x = (-u_xlat21.x) + u_xlat4.x;
                u_xlat21.x = u_xlat4.x * u_xlat21.y + u_xlat21.x;
                u_xlat30 = (-u_xlat3.x) * u_xlat29 + 1.0;
                u_xlat4.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat21.xxx;
                u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat29 = u_xlat3.x * u_xlat29 + -4.0;
                u_xlat29 = exp2(u_xlat29);
                u_xlat29 = u_xlat29 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
                u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.zyy + u_xlat21.xxx;
                u_xlat3.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat2.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb29 = !!(u_xlat1.x>=u_xlat0.x);
#else
                u_xlatb29 = u_xlat1.x>=u_xlat0.x;
#endif
                if(u_xlatb29){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat29 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat29 = max(u_xlat29, u_xlat21.x);
                    u_xlat29 = log2(u_xlat29);
                    u_xlat29 = u_xlat29 * 0.5;
                    u_xlat29 = max(u_xlat29, 0.0);
                    u_xlat29 = u_xlat29 + 1.0;
                    u_xlat21.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat21.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat21.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat29);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat29);
                    u_xlat29 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat29);
                    u_xlat21.x = sqrt(u_xlat10.x);
                    u_xlat29 = inversesqrt(u_xlat29);
                    u_xlat29 = u_xlat29 * abs(u_xlat3.x);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x * u_xlat29;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat10.x = u_xlat21.x * u_xlat12;
                    u_xlat29 = u_xlat1.x * u_xlat10.x;
                    u_xlat19.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat19.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat19.xy = fract(u_xlat19.xy);
                    u_xlat19.xy = u_xlat19.xy + vec2(0.5, 0.5);
                    u_xlat19.xy = floor(u_xlat19.xy);
                    u_xlat3.x = (-u_xlat19.x) + u_xlat3.x;
                    u_xlat19.x = u_xlat3.x * u_xlat19.y + u_xlat19.x;
                    u_xlat28 = (-u_xlat10.x) * u_xlat1.x + 1.0;
                    u_xlat3.xyz = (-u_xlat19.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat19.xxx;
                    u_xlatb3.xw = lessThan(vec4(u_xlat29), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat5.xyz = u_xlat19.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.zyy + u_xlat19.xxx;
                    u_xlat1.xyz = (u_xlatb3.w) ? u_xlat5.xyz : u_xlat1.xyz;
                    u_xlat2.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat28 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat19.x = max(u_xlat28, u_xlat19.x);
                    u_xlat19.x = log2(u_xlat19.x);
                    u_xlat19.x = u_xlat19.x * 0.5;
                    u_xlat19.x = max(u_xlat19.x, 0.0);
                    u_xlat19.x = u_xlat19.x + 1.0;
                    u_xlat28 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat28) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat28);
                    u_xlat1.xy = u_xlat1.xy / u_xlat19.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat19.xx;
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat19.x = sqrt(u_xlat10.x);
                    u_xlat28 = sqrt(u_xlat9);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat28 * u_xlat19.x;
                    u_xlat1.x = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat10.x = fract((-u_xlat18.x));
                    u_xlat10.x = u_xlat10.x + 0.5;
                    u_xlat10.x = floor(u_xlat10.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat10.x = (-u_xlat18.x) + u_xlat10.x;
                    u_xlat18.x = u_xlat10.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat10.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat18.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat2.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat2.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_27 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_27 = min(u_xlat16_27, 0.999000013);
    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat16_34 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat16_27) + 1.0;
    SV_Target2.w = u_xlat16_34 * u_xlat16_8.x + u_xlat16_27;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.yyy * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_34 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : u_xlat16_8.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_8.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
vec2 u_xlat18;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat21;
vec2 u_xlat22;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
mediump float u_xlat16_34;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat19.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat1 = (u_xlatb1.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb2 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb2){
            u_xlat2.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat2.zw = dFdx(u_xlat2.xy);
            u_xlat2.xy = dFdy(u_xlat2.xy);
            u_xlat4.x = dot(u_xlat2.zw, u_xlat2.zw);
            u_xlat13.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat4.x = max(u_xlat13.x, u_xlat4.x);
            u_xlat4.x = log2(u_xlat4.x);
            u_xlat4.x = u_xlat4.x * 0.5;
            u_xlat4.x = max(u_xlat4.x, 0.0);
            u_xlat4.x = u_xlat4.x + 1.0;
            u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat2 = u_xlat2 * u_xlat13.xxxx;
            u_xlat2 = u_xlat2 / u_xlat4.xxxx;
            u_xlat11.z = dot(abs(u_xlat2.zw), abs(u_xlat2.zw));
            u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
            u_xlat4.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat2.xz = u_xlat11.xz * abs(u_xlat2.xz);
            u_xlat2.x = u_xlat2.x * u_xlat2.z;
            u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat11.x = u_xlat4.y * u_xlat4.x;
            u_xlat20 = u_xlat2.x * u_xlat11.x;
            u_xlat4.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat29 = fract((-u_xlat4.x));
            u_xlat29 = u_xlat29 + 0.5;
            u_xlat29 = floor(u_xlat29);
            u_xlat4.xy = fract(u_xlat4.xy);
            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
            u_xlat4.xy = floor(u_xlat4.xy);
            u_xlat29 = u_xlat29 + (-u_xlat4.x);
            u_xlat29 = u_xlat29 * u_xlat4.y + u_xlat4.x;
            u_xlat4.x = (-u_xlat11.x) * u_xlat2.x + 1.0;
            u_xlat13.xyz = (-vec3(u_xlat29)) + vec3(0.5, 0.0, 1.0);
            u_xlat5.xyz = u_xlat4.xxx * u_xlat13.xyz + vec3(u_xlat29);
            u_xlatb4.xy = lessThan(vec4(u_xlat20), vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat6.xyz = vec3(u_xlat29) * vec3(0.0, 1.0, 0.0);
            u_xlat2.x = u_xlat11.x * u_xlat2.x + -4.0;
            u_xlat2.x = exp2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
            u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
            u_xlat2.xyz = u_xlat2.xxx * u_xlat13.zyy + vec3(u_xlat29);
            u_xlat2.xyz = (u_xlatb4.y) ? u_xlat6.xyz : u_xlat2.xyz;
            u_xlat2.xyz = (u_xlatb4.x) ? u_xlat5.xyz : u_xlat2.xyz;
        } else {
            u_xlat4.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat4.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat4.xy = (bool(u_xlatb29)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat4.xy = u_xlat0.xy * u_xlat4.xy;
            u_xlat22.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(u_xlat4.xyxx, u_xlat22.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat3 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb29 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb29 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb29){
                u_xlat3.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat29 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat29 = max(u_xlat29, u_xlat4.x);
                u_xlat29 = log2(u_xlat29);
                u_xlat29 = u_xlat29 * 0.5;
                u_xlat29 = max(u_xlat29, 0.0);
                u_xlat29 = u_xlat29 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat29);
                u_xlat29 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat12 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = sqrt(u_xlat29);
                u_xlat4.x = sqrt(u_xlat12);
                u_xlat29 = inversesqrt(u_xlat29);
                u_xlat29 = u_xlat29 * abs(u_xlat3.z);
                u_xlat12 = inversesqrt(u_xlat12);
                u_xlat3.x = u_xlat12 * abs(u_xlat3.x);
                u_xlat29 = u_xlat29 * u_xlat3.x;
                u_xlat29 = (-u_xlat29) * u_xlat29 + 1.0;
                u_xlat29 = sqrt(u_xlat29);
                u_xlat3.x = u_xlat30 * u_xlat4.x;
                u_xlat12 = u_xlat29 * u_xlat3.x;
                u_xlat21.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat4.x = fract((-u_xlat21.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat21.xy = fract(u_xlat21.xy);
                u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                u_xlat21.xy = floor(u_xlat21.xy);
                u_xlat4.x = (-u_xlat21.x) + u_xlat4.x;
                u_xlat21.x = u_xlat4.x * u_xlat21.y + u_xlat21.x;
                u_xlat30 = (-u_xlat3.x) * u_xlat29 + 1.0;
                u_xlat4.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat21.xxx;
                u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat29 = u_xlat3.x * u_xlat29 + -4.0;
                u_xlat29 = exp2(u_xlat29);
                u_xlat29 = u_xlat29 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
                u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.zyy + u_xlat21.xxx;
                u_xlat3.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat2.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb29 = !!(u_xlat1.x>=u_xlat0.x);
#else
                u_xlatb29 = u_xlat1.x>=u_xlat0.x;
#endif
                if(u_xlatb29){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat29 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat29 = max(u_xlat29, u_xlat21.x);
                    u_xlat29 = log2(u_xlat29);
                    u_xlat29 = u_xlat29 * 0.5;
                    u_xlat29 = max(u_xlat29, 0.0);
                    u_xlat29 = u_xlat29 + 1.0;
                    u_xlat21.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat21.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat21.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat29);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat29);
                    u_xlat29 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat29);
                    u_xlat21.x = sqrt(u_xlat10.x);
                    u_xlat29 = inversesqrt(u_xlat29);
                    u_xlat29 = u_xlat29 * abs(u_xlat3.x);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x * u_xlat29;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat10.x = u_xlat21.x * u_xlat12;
                    u_xlat29 = u_xlat1.x * u_xlat10.x;
                    u_xlat19.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat19.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat19.xy = fract(u_xlat19.xy);
                    u_xlat19.xy = u_xlat19.xy + vec2(0.5, 0.5);
                    u_xlat19.xy = floor(u_xlat19.xy);
                    u_xlat3.x = (-u_xlat19.x) + u_xlat3.x;
                    u_xlat19.x = u_xlat3.x * u_xlat19.y + u_xlat19.x;
                    u_xlat28 = (-u_xlat10.x) * u_xlat1.x + 1.0;
                    u_xlat3.xyz = (-u_xlat19.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat19.xxx;
                    u_xlatb3.xw = lessThan(vec4(u_xlat29), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat5.xyz = u_xlat19.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.zyy + u_xlat19.xxx;
                    u_xlat1.xyz = (u_xlatb3.w) ? u_xlat5.xyz : u_xlat1.xyz;
                    u_xlat2.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat28 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat19.x = max(u_xlat28, u_xlat19.x);
                    u_xlat19.x = log2(u_xlat19.x);
                    u_xlat19.x = u_xlat19.x * 0.5;
                    u_xlat19.x = max(u_xlat19.x, 0.0);
                    u_xlat19.x = u_xlat19.x + 1.0;
                    u_xlat28 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat28) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat28);
                    u_xlat1.xy = u_xlat1.xy / u_xlat19.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat19.xx;
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat19.x = sqrt(u_xlat10.x);
                    u_xlat28 = sqrt(u_xlat9);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat28 * u_xlat19.x;
                    u_xlat1.x = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat10.x = fract((-u_xlat18.x));
                    u_xlat10.x = u_xlat10.x + 0.5;
                    u_xlat10.x = floor(u_xlat10.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat10.x = (-u_xlat18.x) + u_xlat10.x;
                    u_xlat18.x = u_xlat10.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat10.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat18.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat2.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat2.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_27 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_27 = min(u_xlat16_27, 0.999000013);
    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat16_34 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat16_27) + 1.0;
    SV_Target2.w = u_xlat16_34 * u_xlat16_8.x + u_xlat16_27;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.yyy * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_34 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : u_xlat16_8.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_8.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat13;
vec2 u_xlat18;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat21;
vec2 u_xlat22;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
mediump float u_xlat16_34;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat19.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat1 = (u_xlatb1.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb2 = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb2){
            u_xlat2.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
            u_xlat2.zw = dFdx(u_xlat2.xy);
            u_xlat2.xy = dFdy(u_xlat2.xy);
            u_xlat4.x = dot(u_xlat2.zw, u_xlat2.zw);
            u_xlat13.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat4.x = max(u_xlat13.x, u_xlat4.x);
            u_xlat4.x = log2(u_xlat4.x);
            u_xlat4.x = u_xlat4.x * 0.5;
            u_xlat4.x = max(u_xlat4.x, 0.0);
            u_xlat4.x = u_xlat4.x + 1.0;
            u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat2 = u_xlat2 * u_xlat13.xxxx;
            u_xlat2 = u_xlat2 / u_xlat4.xxxx;
            u_xlat11.z = dot(abs(u_xlat2.zw), abs(u_xlat2.zw));
            u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
            u_xlat4.xy = sqrt(u_xlat11.zx);
            u_xlat11.z = inversesqrt(u_xlat11.z);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat2.xz = u_xlat11.xz * abs(u_xlat2.xz);
            u_xlat2.x = u_xlat2.x * u_xlat2.z;
            u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat11.x = u_xlat4.y * u_xlat4.x;
            u_xlat20 = u_xlat2.x * u_xlat11.x;
            u_xlat4.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
            u_xlat29 = fract((-u_xlat4.x));
            u_xlat29 = u_xlat29 + 0.5;
            u_xlat29 = floor(u_xlat29);
            u_xlat4.xy = fract(u_xlat4.xy);
            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
            u_xlat4.xy = floor(u_xlat4.xy);
            u_xlat29 = u_xlat29 + (-u_xlat4.x);
            u_xlat29 = u_xlat29 * u_xlat4.y + u_xlat4.x;
            u_xlat4.x = (-u_xlat11.x) * u_xlat2.x + 1.0;
            u_xlat13.xyz = (-vec3(u_xlat29)) + vec3(0.5, 0.0, 1.0);
            u_xlat5.xyz = u_xlat4.xxx * u_xlat13.xyz + vec3(u_xlat29);
            u_xlatb4.xy = lessThan(vec4(u_xlat20), vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat6.xyz = vec3(u_xlat29) * vec3(0.0, 1.0, 0.0);
            u_xlat2.x = u_xlat11.x * u_xlat2.x + -4.0;
            u_xlat2.x = exp2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
            u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
            u_xlat2.xyz = u_xlat2.xxx * u_xlat13.zyy + vec3(u_xlat29);
            u_xlat2.xyz = (u_xlatb4.y) ? u_xlat6.xyz : u_xlat2.xyz;
            u_xlat2.xyz = (u_xlatb4.x) ? u_xlat5.xyz : u_xlat2.xyz;
        } else {
            u_xlat4.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat4.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat4.xy = (bool(u_xlatb29)) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat4.xy = u_xlat0.xy * u_xlat4.xy;
            u_xlat22.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb4.xy = lessThan(u_xlat4.xyxx, u_xlat22.xyxx).xy;
            u_xlatb29 = u_xlatb4.y || u_xlatb4.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb29)) ? u_xlat3 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb29 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb29 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb29){
                u_xlat3.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat3.zw = dFdx(u_xlat3.xy);
                u_xlat3.xy = dFdy(u_xlat3.xy);
                u_xlat29 = dot(u_xlat3.zw, u_xlat3.zw);
                u_xlat4.x = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat29 = max(u_xlat29, u_xlat4.x);
                u_xlat29 = log2(u_xlat29);
                u_xlat29 = u_xlat29 * 0.5;
                u_xlat29 = max(u_xlat29, 0.0);
                u_xlat29 = u_xlat29 + 1.0;
                u_xlat4.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3 = u_xlat3 * u_xlat4.xxxx;
                u_xlat3 = u_xlat3 / vec4(u_xlat29);
                u_xlat29 = dot(abs(u_xlat3.zw), abs(u_xlat3.zw));
                u_xlat12 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = sqrt(u_xlat29);
                u_xlat4.x = sqrt(u_xlat12);
                u_xlat29 = inversesqrt(u_xlat29);
                u_xlat29 = u_xlat29 * abs(u_xlat3.z);
                u_xlat12 = inversesqrt(u_xlat12);
                u_xlat3.x = u_xlat12 * abs(u_xlat3.x);
                u_xlat29 = u_xlat29 * u_xlat3.x;
                u_xlat29 = (-u_xlat29) * u_xlat29 + 1.0;
                u_xlat29 = sqrt(u_xlat29);
                u_xlat3.x = u_xlat30 * u_xlat4.x;
                u_xlat12 = u_xlat29 * u_xlat3.x;
                u_xlat21.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat4.x = fract((-u_xlat21.x));
                u_xlat4.x = u_xlat4.x + 0.5;
                u_xlat4.x = floor(u_xlat4.x);
                u_xlat21.xy = fract(u_xlat21.xy);
                u_xlat21.xy = u_xlat21.xy + vec2(0.5, 0.5);
                u_xlat21.xy = floor(u_xlat21.xy);
                u_xlat4.x = (-u_xlat21.x) + u_xlat4.x;
                u_xlat21.x = u_xlat4.x * u_xlat21.y + u_xlat21.x;
                u_xlat30 = (-u_xlat3.x) * u_xlat29 + 1.0;
                u_xlat4.xyz = (-u_xlat21.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat5.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat21.xxx;
                u_xlatb12.xz = lessThan(vec4(u_xlat12), vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat6.xyz = u_xlat21.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat29 = u_xlat3.x * u_xlat29 + -4.0;
                u_xlat29 = exp2(u_xlat29);
                u_xlat29 = u_xlat29 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
                u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.zyy + u_xlat21.xxx;
                u_xlat3.xzw = (u_xlatb12.z) ? u_xlat6.xyz : u_xlat4.xyz;
                u_xlat2.xyz = (u_xlatb12.x) ? u_xlat5.xyz : u_xlat3.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb29 = !!(u_xlat1.x>=u_xlat0.x);
#else
                u_xlatb29 = u_xlat1.x>=u_xlat0.x;
#endif
                if(u_xlatb29){
                    u_xlat1.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat3.xy = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat29 = dot(u_xlat3.xy, u_xlat3.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat29 = max(u_xlat29, u_xlat21.x);
                    u_xlat29 = log2(u_xlat29);
                    u_xlat29 = u_xlat29 * 0.5;
                    u_xlat29 = max(u_xlat29, 0.0);
                    u_xlat29 = u_xlat29 + 1.0;
                    u_xlat21.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat3.xy = u_xlat21.xx * u_xlat3.xy;
                    u_xlat1.xy = u_xlat1.xy * u_xlat21.xx;
                    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat29);
                    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat29);
                    u_xlat29 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat12 = sqrt(u_xlat29);
                    u_xlat21.x = sqrt(u_xlat10.x);
                    u_xlat29 = inversesqrt(u_xlat29);
                    u_xlat29 = u_xlat29 * abs(u_xlat3.x);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x * u_xlat29;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat10.x = u_xlat21.x * u_xlat12;
                    u_xlat29 = u_xlat1.x * u_xlat10.x;
                    u_xlat19.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat3.x = fract((-u_xlat19.x));
                    u_xlat3.x = u_xlat3.x + 0.5;
                    u_xlat3.x = floor(u_xlat3.x);
                    u_xlat19.xy = fract(u_xlat19.xy);
                    u_xlat19.xy = u_xlat19.xy + vec2(0.5, 0.5);
                    u_xlat19.xy = floor(u_xlat19.xy);
                    u_xlat3.x = (-u_xlat19.x) + u_xlat3.x;
                    u_xlat19.x = u_xlat3.x * u_xlat19.y + u_xlat19.x;
                    u_xlat28 = (-u_xlat10.x) * u_xlat1.x + 1.0;
                    u_xlat3.xyz = (-u_xlat19.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat4.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat19.xxx;
                    u_xlatb3.xw = lessThan(vec4(u_xlat29), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat5.xyz = u_xlat19.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.zyy + u_xlat19.xxx;
                    u_xlat1.xyz = (u_xlatb3.w) ? u_xlat5.xyz : u_xlat1.xyz;
                    u_xlat2.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat28 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat19.x = max(u_xlat28, u_xlat19.x);
                    u_xlat19.x = log2(u_xlat19.x);
                    u_xlat19.x = u_xlat19.x * 0.5;
                    u_xlat19.x = max(u_xlat19.x, 0.0);
                    u_xlat19.x = u_xlat19.x + 1.0;
                    u_xlat28 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat28) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat28);
                    u_xlat1.xy = u_xlat1.xy / u_xlat19.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat19.xx;
                    u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat19.x = sqrt(u_xlat10.x);
                    u_xlat28 = sqrt(u_xlat9);
                    u_xlat10.x = inversesqrt(u_xlat10.x);
                    u_xlat1.x = u_xlat10.x * abs(u_xlat1.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat28 * u_xlat19.x;
                    u_xlat1.x = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat10.x = fract((-u_xlat18.x));
                    u_xlat10.x = u_xlat10.x + 0.5;
                    u_xlat10.x = floor(u_xlat10.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat10.x = (-u_xlat18.x) + u_xlat10.x;
                    u_xlat18.x = u_xlat10.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat10.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat10.xyz + u_xlat18.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat2.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat2.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xy = texture(_DetailMask, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_1.xy = u_xlat10_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
#else
    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
#endif
    u_xlat16_27 = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_27 = min(u_xlat16_27, 0.999000013);
    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xzw = u_xlat1.xxx * vs_TEXCOORD1.xyz;
    u_xlat16_34 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat16_27) + 1.0;
    SV_Target2.w = u_xlat16_34 * u_xlat16_8.x + u_xlat16_27;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.yyy * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_34 = (-u_xlat16_1.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat1.xzw * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0.x) ? 0.0 : u_xlat16_8.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_8.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
vec2 u_xlat20;
mediump float u_xlat16_20;
lowp vec2 u_xlat10_20;
bvec2 u_xlatb20;
float u_xlat21;
float u_xlat22;
float u_xlat23;
float u_xlat24;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat20.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat20.xy + u_xlat0.xy;
    u_xlat20.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat20.xy : u_xlat0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb20.x){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb20.x){
        u_xlat10_1.xyz = texture(_MainTex, u_xlat0.xy).xyz;
        SV_Target0.xyz = u_xlat10_1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = max(u_xlat20.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.xy = vec2(u_xlat0.x * _MainTex_TexelSize.z, u_xlat0.y * _MainTex_TexelSize.w);
        u_xlat1.xy = dFdx(u_xlat20.xy);
        u_xlat20.xy = dFdy(u_xlat20.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat20.x = max(u_xlat20.x, u_xlat1.x);
        u_xlat20.x = log2(u_xlat20.x);
        u_xlat20.x = u_xlat20.x * 0.5;
        u_xlat20.x = max(u_xlat20.x, 0.0);
        u_xlat20.x = u_xlat20.x + 1.0;
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = u_xlat30 / u_xlat20.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb20.x){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat20.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat20.xy = u_xlat20.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat4.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb20.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb20.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb20.x){
            u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat4.xy = dFdx(u_xlat20.xy);
            u_xlat20.xy = dFdy(u_xlat20.xy);
            u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat34 = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat24 = max(u_xlat34, u_xlat24);
            u_xlat24 = log2(u_xlat24);
            u_xlat24 = u_xlat24 * 0.5;
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlat24 = u_xlat24 + 1.0;
            u_xlat34 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat4.xy = vec2(u_xlat34) * u_xlat4.xy;
            u_xlat20.xy = u_xlat20.xy * vec2(u_xlat34);
            u_xlat4.xy = u_xlat4.xy / vec2(u_xlat24);
            u_xlat20.xy = u_xlat20.xy / vec2(u_xlat24);
            u_xlat14.x = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
            u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
            u_xlat24 = sqrt(u_xlat14.x);
            u_xlat34 = sqrt(u_xlat30);
            u_xlat14.x = inversesqrt(u_xlat14.x);
            u_xlat4.x = u_xlat14.x * abs(u_xlat4.x);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
            u_xlat20.x = u_xlat20.x * u_xlat4.x;
            u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
            u_xlat20.x = sqrt(u_xlat20.x);
            u_xlat30 = u_xlat34 * u_xlat24;
            u_xlat4.x = u_xlat20.x * u_xlat30;
            u_xlat14.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat34 = fract((-u_xlat14.x));
            u_xlat14.z = u_xlat34 + 0.5;
            u_xlat14.xy = fract(u_xlat14.xy);
            u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
            u_xlat14.xyz = floor(u_xlat14.xyz);
            u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
            u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
            u_xlat24 = (-u_xlat30) * u_xlat20.x + 1.0;
            u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
            u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
            u_xlat20.x = exp2(u_xlat20.x);
            u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
            u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
            u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat14.xxx;
            u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat4.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
        } else {
            u_xlat20.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat20.xy = u_xlat20.xy * u_xlat1.xy;
            u_xlat5.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat5.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat3 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb20.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb20.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb20.x){
                u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat3.xy = dFdx(u_xlat20.xy);
                u_xlat20.xy = dFdy(u_xlat20.xy);
                u_xlat23 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = dot(u_xlat20.xy, u_xlat20.xy);
                u_xlat23 = max(u_xlat33, u_xlat23);
                u_xlat23 = log2(u_xlat23);
                u_xlat23 = u_xlat23 * 0.5;
                u_xlat23 = max(u_xlat23, 0.0);
                u_xlat23 = u_xlat23 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat33) * u_xlat3.xy;
                u_xlat20.xy = u_xlat20.xy * vec2(u_xlat33);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat23);
                u_xlat20.xy = u_xlat20.xy / vec2(u_xlat23);
                u_xlat13.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                u_xlat23 = sqrt(u_xlat13.x);
                u_xlat33 = sqrt(u_xlat30);
                u_xlat13.x = inversesqrt(u_xlat13.x);
                u_xlat3.x = u_xlat13.x * abs(u_xlat3.x);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                u_xlat20.x = u_xlat20.x * u_xlat3.x;
                u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                u_xlat20.x = sqrt(u_xlat20.x);
                u_xlat30 = u_xlat33 * u_xlat23;
                u_xlat3.x = u_xlat20.x * u_xlat30;
                u_xlat13.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat33 = fract((-u_xlat13.x));
                u_xlat13.z = u_xlat33 + 0.5;
                u_xlat13.xy = fract(u_xlat13.xy);
                u_xlat13.xy = u_xlat13.xy + vec2(0.5, 0.5);
                u_xlat13.xyz = floor(u_xlat13.xyz);
                u_xlat33 = (-u_xlat13.x) + u_xlat13.z;
                u_xlat13.x = u_xlat33 * u_xlat13.y + u_xlat13.x;
                u_xlat23 = (-u_xlat30) * u_xlat20.x + 1.0;
                u_xlat5.xyz = (-u_xlat13.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat23) * u_xlat5.xyz + u_xlat13.xxx;
                u_xlatb3.xz = lessThan(u_xlat3.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat13.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                u_xlat20.x = exp2(u_xlat20.x);
                u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat13.xxx;
                u_xlat13.xyz = (u_xlatb3.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat4.xyz = (u_xlatb3.x) ? u_xlat6.xyz : u_xlat13.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb20.x = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb20.x = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb20.x){
                    u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat2.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat13.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                    u_xlat3.x = log2(u_xlat3.x);
                    u_xlat3.x = u_xlat3.x * 0.5;
                    u_xlat3.x = max(u_xlat3.x, 0.0);
                    u_xlat3.x = u_xlat3.x + 1.0;
                    u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat2.xy * u_xlat13.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat13.xx;
                    u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat3.xx;
                    u_xlat12.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat3.x = sqrt(u_xlat12.x);
                    u_xlat13.x = sqrt(u_xlat30);
                    u_xlat12.x = inversesqrt(u_xlat12.x);
                    u_xlat2.x = u_xlat12.x * abs(u_xlat2.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat2.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat13.x * u_xlat3.x;
                    u_xlat2.x = u_xlat20.x * u_xlat30;
                    u_xlat12.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat32 = fract((-u_xlat12.x));
                    u_xlat12.z = u_xlat32 + 0.5;
                    u_xlat12.xy = fract(u_xlat12.xy);
                    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
                    u_xlat12.xyz = floor(u_xlat12.xyz);
                    u_xlat32 = (-u_xlat12.x) + u_xlat12.z;
                    u_xlat12.x = u_xlat32 * u_xlat12.y + u_xlat12.x;
                    u_xlat22 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat3.xyz = (-u_xlat12.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat12.xxx;
                    u_xlatb2.xz = lessThan(u_xlat2.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat6.xyz = u_xlat12.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.zyy + u_xlat12.xxx;
                    u_xlat12.xyz = (u_xlatb2.z) ? u_xlat6.xyz : u_xlat3.xyz;
                    u_xlat4.xyz = (u_xlatb2.x) ? u_xlat5.xyz : u_xlat12.xyz;
                } else {
                    u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat1.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat12.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = u_xlat1.xy * u_xlat12.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat12.xx;
                    u_xlat1.xy = u_xlat1.xy / u_xlat2.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat2.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat2.x = sqrt(u_xlat11.x);
                    u_xlat12.x = sqrt(u_xlat30);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat1.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat12.x * u_xlat2.x;
                    u_xlat1.x = u_xlat20.x * u_xlat30;
                    u_xlat11.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat31 = fract((-u_xlat11.x));
                    u_xlat11.z = u_xlat31 + 0.5;
                    u_xlat11.xy = fract(u_xlat11.xy);
                    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
                    u_xlat11.xyz = floor(u_xlat11.xyz);
                    u_xlat31 = (-u_xlat11.x) + u_xlat11.z;
                    u_xlat11.x = u_xlat31 * u_xlat11.y + u_xlat11.x;
                    u_xlat21 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat2.xyz = (-u_xlat11.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat11.xxx;
                    u_xlatb1.xz = lessThan(u_xlat1.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat5.xyz = u_xlat11.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.zyy + u_xlat11.xxx;
                    u_xlat11.xyz = (u_xlatb1.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat4.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat11.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat4.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 100.0, 102.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 101.0, 103.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_20.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_20 = max(u_xlat10_20.x, 0.00100000005);
    u_xlat16_20 = min(u_xlat16_20, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat10_2.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_9.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_20) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_20;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat10_20.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat10_20.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
vec2 u_xlat20;
mediump float u_xlat16_20;
lowp vec2 u_xlat10_20;
bvec2 u_xlatb20;
float u_xlat21;
float u_xlat22;
float u_xlat23;
float u_xlat24;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat20.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat20.xy + u_xlat0.xy;
    u_xlat20.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat20.xy : u_xlat0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb20.x){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb20.x){
        u_xlat10_1.xyz = texture(_MainTex, u_xlat0.xy).xyz;
        SV_Target0.xyz = u_xlat10_1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = max(u_xlat20.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.xy = vec2(u_xlat0.x * _MainTex_TexelSize.z, u_xlat0.y * _MainTex_TexelSize.w);
        u_xlat1.xy = dFdx(u_xlat20.xy);
        u_xlat20.xy = dFdy(u_xlat20.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat20.x = max(u_xlat20.x, u_xlat1.x);
        u_xlat20.x = log2(u_xlat20.x);
        u_xlat20.x = u_xlat20.x * 0.5;
        u_xlat20.x = max(u_xlat20.x, 0.0);
        u_xlat20.x = u_xlat20.x + 1.0;
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = u_xlat30 / u_xlat20.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb20.x){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat20.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat20.xy = u_xlat20.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat4.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb20.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb20.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb20.x){
            u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat4.xy = dFdx(u_xlat20.xy);
            u_xlat20.xy = dFdy(u_xlat20.xy);
            u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat34 = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat24 = max(u_xlat34, u_xlat24);
            u_xlat24 = log2(u_xlat24);
            u_xlat24 = u_xlat24 * 0.5;
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlat24 = u_xlat24 + 1.0;
            u_xlat34 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat4.xy = vec2(u_xlat34) * u_xlat4.xy;
            u_xlat20.xy = u_xlat20.xy * vec2(u_xlat34);
            u_xlat4.xy = u_xlat4.xy / vec2(u_xlat24);
            u_xlat20.xy = u_xlat20.xy / vec2(u_xlat24);
            u_xlat14.x = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
            u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
            u_xlat24 = sqrt(u_xlat14.x);
            u_xlat34 = sqrt(u_xlat30);
            u_xlat14.x = inversesqrt(u_xlat14.x);
            u_xlat4.x = u_xlat14.x * abs(u_xlat4.x);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
            u_xlat20.x = u_xlat20.x * u_xlat4.x;
            u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
            u_xlat20.x = sqrt(u_xlat20.x);
            u_xlat30 = u_xlat34 * u_xlat24;
            u_xlat4.x = u_xlat20.x * u_xlat30;
            u_xlat14.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat34 = fract((-u_xlat14.x));
            u_xlat14.z = u_xlat34 + 0.5;
            u_xlat14.xy = fract(u_xlat14.xy);
            u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
            u_xlat14.xyz = floor(u_xlat14.xyz);
            u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
            u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
            u_xlat24 = (-u_xlat30) * u_xlat20.x + 1.0;
            u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
            u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
            u_xlat20.x = exp2(u_xlat20.x);
            u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
            u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
            u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat14.xxx;
            u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat4.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
        } else {
            u_xlat20.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat20.xy = u_xlat20.xy * u_xlat1.xy;
            u_xlat5.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat5.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat3 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb20.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb20.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb20.x){
                u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat3.xy = dFdx(u_xlat20.xy);
                u_xlat20.xy = dFdy(u_xlat20.xy);
                u_xlat23 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = dot(u_xlat20.xy, u_xlat20.xy);
                u_xlat23 = max(u_xlat33, u_xlat23);
                u_xlat23 = log2(u_xlat23);
                u_xlat23 = u_xlat23 * 0.5;
                u_xlat23 = max(u_xlat23, 0.0);
                u_xlat23 = u_xlat23 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat33) * u_xlat3.xy;
                u_xlat20.xy = u_xlat20.xy * vec2(u_xlat33);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat23);
                u_xlat20.xy = u_xlat20.xy / vec2(u_xlat23);
                u_xlat13.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                u_xlat23 = sqrt(u_xlat13.x);
                u_xlat33 = sqrt(u_xlat30);
                u_xlat13.x = inversesqrt(u_xlat13.x);
                u_xlat3.x = u_xlat13.x * abs(u_xlat3.x);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                u_xlat20.x = u_xlat20.x * u_xlat3.x;
                u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                u_xlat20.x = sqrt(u_xlat20.x);
                u_xlat30 = u_xlat33 * u_xlat23;
                u_xlat3.x = u_xlat20.x * u_xlat30;
                u_xlat13.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat33 = fract((-u_xlat13.x));
                u_xlat13.z = u_xlat33 + 0.5;
                u_xlat13.xy = fract(u_xlat13.xy);
                u_xlat13.xy = u_xlat13.xy + vec2(0.5, 0.5);
                u_xlat13.xyz = floor(u_xlat13.xyz);
                u_xlat33 = (-u_xlat13.x) + u_xlat13.z;
                u_xlat13.x = u_xlat33 * u_xlat13.y + u_xlat13.x;
                u_xlat23 = (-u_xlat30) * u_xlat20.x + 1.0;
                u_xlat5.xyz = (-u_xlat13.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat23) * u_xlat5.xyz + u_xlat13.xxx;
                u_xlatb3.xz = lessThan(u_xlat3.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat13.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                u_xlat20.x = exp2(u_xlat20.x);
                u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat13.xxx;
                u_xlat13.xyz = (u_xlatb3.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat4.xyz = (u_xlatb3.x) ? u_xlat6.xyz : u_xlat13.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb20.x = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb20.x = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb20.x){
                    u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat2.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat13.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                    u_xlat3.x = log2(u_xlat3.x);
                    u_xlat3.x = u_xlat3.x * 0.5;
                    u_xlat3.x = max(u_xlat3.x, 0.0);
                    u_xlat3.x = u_xlat3.x + 1.0;
                    u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat2.xy * u_xlat13.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat13.xx;
                    u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat3.xx;
                    u_xlat12.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat3.x = sqrt(u_xlat12.x);
                    u_xlat13.x = sqrt(u_xlat30);
                    u_xlat12.x = inversesqrt(u_xlat12.x);
                    u_xlat2.x = u_xlat12.x * abs(u_xlat2.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat2.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat13.x * u_xlat3.x;
                    u_xlat2.x = u_xlat20.x * u_xlat30;
                    u_xlat12.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat32 = fract((-u_xlat12.x));
                    u_xlat12.z = u_xlat32 + 0.5;
                    u_xlat12.xy = fract(u_xlat12.xy);
                    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
                    u_xlat12.xyz = floor(u_xlat12.xyz);
                    u_xlat32 = (-u_xlat12.x) + u_xlat12.z;
                    u_xlat12.x = u_xlat32 * u_xlat12.y + u_xlat12.x;
                    u_xlat22 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat3.xyz = (-u_xlat12.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat12.xxx;
                    u_xlatb2.xz = lessThan(u_xlat2.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat6.xyz = u_xlat12.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.zyy + u_xlat12.xxx;
                    u_xlat12.xyz = (u_xlatb2.z) ? u_xlat6.xyz : u_xlat3.xyz;
                    u_xlat4.xyz = (u_xlatb2.x) ? u_xlat5.xyz : u_xlat12.xyz;
                } else {
                    u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat1.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat12.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = u_xlat1.xy * u_xlat12.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat12.xx;
                    u_xlat1.xy = u_xlat1.xy / u_xlat2.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat2.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat2.x = sqrt(u_xlat11.x);
                    u_xlat12.x = sqrt(u_xlat30);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat1.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat12.x * u_xlat2.x;
                    u_xlat1.x = u_xlat20.x * u_xlat30;
                    u_xlat11.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat31 = fract((-u_xlat11.x));
                    u_xlat11.z = u_xlat31 + 0.5;
                    u_xlat11.xy = fract(u_xlat11.xy);
                    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
                    u_xlat11.xyz = floor(u_xlat11.xyz);
                    u_xlat31 = (-u_xlat11.x) + u_xlat11.z;
                    u_xlat11.x = u_xlat31 * u_xlat11.y + u_xlat11.x;
                    u_xlat21 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat2.xyz = (-u_xlat11.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat11.xxx;
                    u_xlatb1.xz = lessThan(u_xlat1.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat5.xyz = u_xlat11.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.zyy + u_xlat11.xxx;
                    u_xlat11.xyz = (u_xlatb1.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat4.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat11.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat4.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 100.0, 102.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 101.0, 103.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_20.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_20 = max(u_xlat10_20.x, 0.00100000005);
    u_xlat16_20 = min(u_xlat16_20, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat10_2.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_9.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
    u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
    u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_20) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_20;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat10_20.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat10_20.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
vec2 u_xlat20;
bvec2 u_xlatb20;
float u_xlat21;
float u_xlat22;
float u_xlat23;
float u_xlat24;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat20.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat20.xy + u_xlat0.xy;
    u_xlat20.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat20.xy : u_xlat0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb20.x){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb20.x){
        u_xlat10_1.xyz = texture(_MainTex, u_xlat0.xy).xyz;
        SV_Target0.xyz = u_xlat10_1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = max(u_xlat20.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.xy = vec2(u_xlat0.x * _MainTex_TexelSize.z, u_xlat0.y * _MainTex_TexelSize.w);
        u_xlat1.xy = dFdx(u_xlat20.xy);
        u_xlat20.xy = dFdy(u_xlat20.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat20.x = max(u_xlat20.x, u_xlat1.x);
        u_xlat20.x = log2(u_xlat20.x);
        u_xlat20.x = u_xlat20.x * 0.5;
        u_xlat20.x = max(u_xlat20.x, 0.0);
        u_xlat20.x = u_xlat20.x + 1.0;
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = u_xlat30 / u_xlat20.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb20.x){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat20.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat20.xy = u_xlat20.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat4.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb20.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb20.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb20.x){
            u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat4.xy = dFdx(u_xlat20.xy);
            u_xlat20.xy = dFdy(u_xlat20.xy);
            u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat34 = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat24 = max(u_xlat34, u_xlat24);
            u_xlat24 = log2(u_xlat24);
            u_xlat24 = u_xlat24 * 0.5;
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlat24 = u_xlat24 + 1.0;
            u_xlat34 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat4.xy = vec2(u_xlat34) * u_xlat4.xy;
            u_xlat20.xy = u_xlat20.xy * vec2(u_xlat34);
            u_xlat4.xy = u_xlat4.xy / vec2(u_xlat24);
            u_xlat20.xy = u_xlat20.xy / vec2(u_xlat24);
            u_xlat14.x = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
            u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
            u_xlat24 = sqrt(u_xlat14.x);
            u_xlat34 = sqrt(u_xlat30);
            u_xlat14.x = inversesqrt(u_xlat14.x);
            u_xlat4.x = u_xlat14.x * abs(u_xlat4.x);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
            u_xlat20.x = u_xlat20.x * u_xlat4.x;
            u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
            u_xlat20.x = sqrt(u_xlat20.x);
            u_xlat30 = u_xlat34 * u_xlat24;
            u_xlat4.x = u_xlat20.x * u_xlat30;
            u_xlat14.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat34 = fract((-u_xlat14.x));
            u_xlat14.z = u_xlat34 + 0.5;
            u_xlat14.xy = fract(u_xlat14.xy);
            u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
            u_xlat14.xyz = floor(u_xlat14.xyz);
            u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
            u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
            u_xlat24 = (-u_xlat30) * u_xlat20.x + 1.0;
            u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
            u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
            u_xlat20.x = exp2(u_xlat20.x);
            u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
            u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
            u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat14.xxx;
            u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat4.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
        } else {
            u_xlat20.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat20.xy = u_xlat20.xy * u_xlat1.xy;
            u_xlat5.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat5.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat3 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb20.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb20.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb20.x){
                u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat3.xy = dFdx(u_xlat20.xy);
                u_xlat20.xy = dFdy(u_xlat20.xy);
                u_xlat23 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = dot(u_xlat20.xy, u_xlat20.xy);
                u_xlat23 = max(u_xlat33, u_xlat23);
                u_xlat23 = log2(u_xlat23);
                u_xlat23 = u_xlat23 * 0.5;
                u_xlat23 = max(u_xlat23, 0.0);
                u_xlat23 = u_xlat23 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat33) * u_xlat3.xy;
                u_xlat20.xy = u_xlat20.xy * vec2(u_xlat33);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat23);
                u_xlat20.xy = u_xlat20.xy / vec2(u_xlat23);
                u_xlat13.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                u_xlat23 = sqrt(u_xlat13.x);
                u_xlat33 = sqrt(u_xlat30);
                u_xlat13.x = inversesqrt(u_xlat13.x);
                u_xlat3.x = u_xlat13.x * abs(u_xlat3.x);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                u_xlat20.x = u_xlat20.x * u_xlat3.x;
                u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                u_xlat20.x = sqrt(u_xlat20.x);
                u_xlat30 = u_xlat33 * u_xlat23;
                u_xlat3.x = u_xlat20.x * u_xlat30;
                u_xlat13.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat33 = fract((-u_xlat13.x));
                u_xlat13.z = u_xlat33 + 0.5;
                u_xlat13.xy = fract(u_xlat13.xy);
                u_xlat13.xy = u_xlat13.xy + vec2(0.5, 0.5);
                u_xlat13.xyz = floor(u_xlat13.xyz);
                u_xlat33 = (-u_xlat13.x) + u_xlat13.z;
                u_xlat13.x = u_xlat33 * u_xlat13.y + u_xlat13.x;
                u_xlat23 = (-u_xlat30) * u_xlat20.x + 1.0;
                u_xlat5.xyz = (-u_xlat13.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat23) * u_xlat5.xyz + u_xlat13.xxx;
                u_xlatb3.xz = lessThan(u_xlat3.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat13.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                u_xlat20.x = exp2(u_xlat20.x);
                u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat13.xxx;
                u_xlat13.xyz = (u_xlatb3.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat4.xyz = (u_xlatb3.x) ? u_xlat6.xyz : u_xlat13.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb20.x = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb20.x = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb20.x){
                    u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat2.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat13.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                    u_xlat3.x = log2(u_xlat3.x);
                    u_xlat3.x = u_xlat3.x * 0.5;
                    u_xlat3.x = max(u_xlat3.x, 0.0);
                    u_xlat3.x = u_xlat3.x + 1.0;
                    u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat2.xy * u_xlat13.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat13.xx;
                    u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat3.xx;
                    u_xlat12.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat3.x = sqrt(u_xlat12.x);
                    u_xlat13.x = sqrt(u_xlat30);
                    u_xlat12.x = inversesqrt(u_xlat12.x);
                    u_xlat2.x = u_xlat12.x * abs(u_xlat2.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat2.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat13.x * u_xlat3.x;
                    u_xlat2.x = u_xlat20.x * u_xlat30;
                    u_xlat12.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat32 = fract((-u_xlat12.x));
                    u_xlat12.z = u_xlat32 + 0.5;
                    u_xlat12.xy = fract(u_xlat12.xy);
                    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
                    u_xlat12.xyz = floor(u_xlat12.xyz);
                    u_xlat32 = (-u_xlat12.x) + u_xlat12.z;
                    u_xlat12.x = u_xlat32 * u_xlat12.y + u_xlat12.x;
                    u_xlat22 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat3.xyz = (-u_xlat12.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat12.xxx;
                    u_xlatb2.xz = lessThan(u_xlat2.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat6.xyz = u_xlat12.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.zyy + u_xlat12.xxx;
                    u_xlat12.xyz = (u_xlatb2.z) ? u_xlat6.xyz : u_xlat3.xyz;
                    u_xlat4.xyz = (u_xlatb2.x) ? u_xlat5.xyz : u_xlat12.xyz;
                } else {
                    u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat1.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat12.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = u_xlat1.xy * u_xlat12.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat12.xx;
                    u_xlat1.xy = u_xlat1.xy / u_xlat2.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat2.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat2.x = sqrt(u_xlat11.x);
                    u_xlat12.x = sqrt(u_xlat30);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat1.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat12.x * u_xlat2.x;
                    u_xlat1.x = u_xlat20.x * u_xlat30;
                    u_xlat11.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat31 = fract((-u_xlat11.x));
                    u_xlat11.z = u_xlat31 + 0.5;
                    u_xlat11.xy = fract(u_xlat11.xy);
                    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
                    u_xlat11.xyz = floor(u_xlat11.xyz);
                    u_xlat31 = (-u_xlat11.x) + u_xlat11.z;
                    u_xlat11.x = u_xlat31 * u_xlat11.y + u_xlat11.x;
                    u_xlat21 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat2.xyz = (-u_xlat11.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat11.xxx;
                    u_xlatb1.xz = lessThan(u_xlat1.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat5.xyz = u_xlat11.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.zyy + u_xlat11.xxx;
                    u_xlat11.xyz = (u_xlatb1.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat4.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat11.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat4.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 100.0, 102.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 101.0, 103.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_0 = max(u_xlat10_0.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat20.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * vs_TEXCOORD1.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_0) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_0;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat10_0.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat10_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
vec2 u_xlat20;
bvec2 u_xlatb20;
float u_xlat21;
float u_xlat22;
float u_xlat23;
float u_xlat24;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat20.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat20.xy + u_xlat0.xy;
    u_xlat20.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat20.xy : u_xlat0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb20.x){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb20.x){
        u_xlat10_1.xyz = texture(_MainTex, u_xlat0.xy).xyz;
        SV_Target0.xyz = u_xlat10_1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = max(u_xlat20.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.xy = vec2(u_xlat0.x * _MainTex_TexelSize.z, u_xlat0.y * _MainTex_TexelSize.w);
        u_xlat1.xy = dFdx(u_xlat20.xy);
        u_xlat20.xy = dFdy(u_xlat20.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat20.x = max(u_xlat20.x, u_xlat1.x);
        u_xlat20.x = log2(u_xlat20.x);
        u_xlat20.x = u_xlat20.x * 0.5;
        u_xlat20.x = max(u_xlat20.x, 0.0);
        u_xlat20.x = u_xlat20.x + 1.0;
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = u_xlat30 / u_xlat20.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb20.x){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat20.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat20.xy = u_xlat20.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat4.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb20.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb20.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb20.x){
            u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat4.xy = dFdx(u_xlat20.xy);
            u_xlat20.xy = dFdy(u_xlat20.xy);
            u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat34 = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat24 = max(u_xlat34, u_xlat24);
            u_xlat24 = log2(u_xlat24);
            u_xlat24 = u_xlat24 * 0.5;
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlat24 = u_xlat24 + 1.0;
            u_xlat34 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat4.xy = vec2(u_xlat34) * u_xlat4.xy;
            u_xlat20.xy = u_xlat20.xy * vec2(u_xlat34);
            u_xlat4.xy = u_xlat4.xy / vec2(u_xlat24);
            u_xlat20.xy = u_xlat20.xy / vec2(u_xlat24);
            u_xlat14.x = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
            u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
            u_xlat24 = sqrt(u_xlat14.x);
            u_xlat34 = sqrt(u_xlat30);
            u_xlat14.x = inversesqrt(u_xlat14.x);
            u_xlat4.x = u_xlat14.x * abs(u_xlat4.x);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
            u_xlat20.x = u_xlat20.x * u_xlat4.x;
            u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
            u_xlat20.x = sqrt(u_xlat20.x);
            u_xlat30 = u_xlat34 * u_xlat24;
            u_xlat4.x = u_xlat20.x * u_xlat30;
            u_xlat14.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat34 = fract((-u_xlat14.x));
            u_xlat14.z = u_xlat34 + 0.5;
            u_xlat14.xy = fract(u_xlat14.xy);
            u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
            u_xlat14.xyz = floor(u_xlat14.xyz);
            u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
            u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
            u_xlat24 = (-u_xlat30) * u_xlat20.x + 1.0;
            u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
            u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
            u_xlat20.x = exp2(u_xlat20.x);
            u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
            u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
            u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat14.xxx;
            u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat4.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
        } else {
            u_xlat20.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat20.xy = u_xlat20.xy * u_xlat1.xy;
            u_xlat5.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat5.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat3 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb20.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb20.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb20.x){
                u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat3.xy = dFdx(u_xlat20.xy);
                u_xlat20.xy = dFdy(u_xlat20.xy);
                u_xlat23 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = dot(u_xlat20.xy, u_xlat20.xy);
                u_xlat23 = max(u_xlat33, u_xlat23);
                u_xlat23 = log2(u_xlat23);
                u_xlat23 = u_xlat23 * 0.5;
                u_xlat23 = max(u_xlat23, 0.0);
                u_xlat23 = u_xlat23 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat33) * u_xlat3.xy;
                u_xlat20.xy = u_xlat20.xy * vec2(u_xlat33);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat23);
                u_xlat20.xy = u_xlat20.xy / vec2(u_xlat23);
                u_xlat13.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                u_xlat23 = sqrt(u_xlat13.x);
                u_xlat33 = sqrt(u_xlat30);
                u_xlat13.x = inversesqrt(u_xlat13.x);
                u_xlat3.x = u_xlat13.x * abs(u_xlat3.x);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                u_xlat20.x = u_xlat20.x * u_xlat3.x;
                u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                u_xlat20.x = sqrt(u_xlat20.x);
                u_xlat30 = u_xlat33 * u_xlat23;
                u_xlat3.x = u_xlat20.x * u_xlat30;
                u_xlat13.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat33 = fract((-u_xlat13.x));
                u_xlat13.z = u_xlat33 + 0.5;
                u_xlat13.xy = fract(u_xlat13.xy);
                u_xlat13.xy = u_xlat13.xy + vec2(0.5, 0.5);
                u_xlat13.xyz = floor(u_xlat13.xyz);
                u_xlat33 = (-u_xlat13.x) + u_xlat13.z;
                u_xlat13.x = u_xlat33 * u_xlat13.y + u_xlat13.x;
                u_xlat23 = (-u_xlat30) * u_xlat20.x + 1.0;
                u_xlat5.xyz = (-u_xlat13.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat23) * u_xlat5.xyz + u_xlat13.xxx;
                u_xlatb3.xz = lessThan(u_xlat3.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat13.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                u_xlat20.x = exp2(u_xlat20.x);
                u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat13.xxx;
                u_xlat13.xyz = (u_xlatb3.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat4.xyz = (u_xlatb3.x) ? u_xlat6.xyz : u_xlat13.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb20.x = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb20.x = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb20.x){
                    u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat2.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat13.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                    u_xlat3.x = log2(u_xlat3.x);
                    u_xlat3.x = u_xlat3.x * 0.5;
                    u_xlat3.x = max(u_xlat3.x, 0.0);
                    u_xlat3.x = u_xlat3.x + 1.0;
                    u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat2.xy * u_xlat13.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat13.xx;
                    u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat3.xx;
                    u_xlat12.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat3.x = sqrt(u_xlat12.x);
                    u_xlat13.x = sqrt(u_xlat30);
                    u_xlat12.x = inversesqrt(u_xlat12.x);
                    u_xlat2.x = u_xlat12.x * abs(u_xlat2.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat2.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat13.x * u_xlat3.x;
                    u_xlat2.x = u_xlat20.x * u_xlat30;
                    u_xlat12.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat32 = fract((-u_xlat12.x));
                    u_xlat12.z = u_xlat32 + 0.5;
                    u_xlat12.xy = fract(u_xlat12.xy);
                    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
                    u_xlat12.xyz = floor(u_xlat12.xyz);
                    u_xlat32 = (-u_xlat12.x) + u_xlat12.z;
                    u_xlat12.x = u_xlat32 * u_xlat12.y + u_xlat12.x;
                    u_xlat22 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat3.xyz = (-u_xlat12.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat12.xxx;
                    u_xlatb2.xz = lessThan(u_xlat2.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat6.xyz = u_xlat12.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.zyy + u_xlat12.xxx;
                    u_xlat12.xyz = (u_xlatb2.z) ? u_xlat6.xyz : u_xlat3.xyz;
                    u_xlat4.xyz = (u_xlatb2.x) ? u_xlat5.xyz : u_xlat12.xyz;
                } else {
                    u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat1.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat12.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = u_xlat1.xy * u_xlat12.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat12.xx;
                    u_xlat1.xy = u_xlat1.xy / u_xlat2.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat2.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat2.x = sqrt(u_xlat11.x);
                    u_xlat12.x = sqrt(u_xlat30);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat1.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat12.x * u_xlat2.x;
                    u_xlat1.x = u_xlat20.x * u_xlat30;
                    u_xlat11.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat31 = fract((-u_xlat11.x));
                    u_xlat11.z = u_xlat31 + 0.5;
                    u_xlat11.xy = fract(u_xlat11.xy);
                    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
                    u_xlat11.xyz = floor(u_xlat11.xyz);
                    u_xlat31 = (-u_xlat11.x) + u_xlat11.z;
                    u_xlat11.x = u_xlat31 * u_xlat11.y + u_xlat11.x;
                    u_xlat21 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat2.xyz = (-u_xlat11.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat11.xxx;
                    u_xlatb1.xz = lessThan(u_xlat1.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat5.xyz = u_xlat11.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.zyy + u_xlat11.xxx;
                    u_xlat11.xyz = (u_xlatb1.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat4.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat11.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat4.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 100.0, 102.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 101.0, 103.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_0 = max(u_xlat10_0.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat20.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * vs_TEXCOORD1.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_0) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_0;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat10_0.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat10_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
vec2 u_xlat20;
bvec2 u_xlatb20;
float u_xlat21;
float u_xlat22;
float u_xlat23;
float u_xlat24;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat20.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat20.xy + u_xlat0.xy;
    u_xlat20.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat20.xy : u_xlat0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb20.x){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb20.x){
        u_xlat10_1.xyz = texture(_MainTex, u_xlat0.xy).xyz;
        SV_Target0.xyz = u_xlat10_1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = max(u_xlat20.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.xy = vec2(u_xlat0.x * _MainTex_TexelSize.z, u_xlat0.y * _MainTex_TexelSize.w);
        u_xlat1.xy = dFdx(u_xlat20.xy);
        u_xlat20.xy = dFdy(u_xlat20.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat20.x = max(u_xlat20.x, u_xlat1.x);
        u_xlat20.x = log2(u_xlat20.x);
        u_xlat20.x = u_xlat20.x * 0.5;
        u_xlat20.x = max(u_xlat20.x, 0.0);
        u_xlat20.x = u_xlat20.x + 1.0;
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = u_xlat30 / u_xlat20.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb20.x){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat20.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat20.xy = u_xlat20.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat4.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb20.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb20.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb20.x){
            u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat4.xy = dFdx(u_xlat20.xy);
            u_xlat20.xy = dFdy(u_xlat20.xy);
            u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat34 = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat24 = max(u_xlat34, u_xlat24);
            u_xlat24 = log2(u_xlat24);
            u_xlat24 = u_xlat24 * 0.5;
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlat24 = u_xlat24 + 1.0;
            u_xlat34 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat4.xy = vec2(u_xlat34) * u_xlat4.xy;
            u_xlat20.xy = u_xlat20.xy * vec2(u_xlat34);
            u_xlat4.xy = u_xlat4.xy / vec2(u_xlat24);
            u_xlat20.xy = u_xlat20.xy / vec2(u_xlat24);
            u_xlat14.x = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
            u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
            u_xlat24 = sqrt(u_xlat14.x);
            u_xlat34 = sqrt(u_xlat30);
            u_xlat14.x = inversesqrt(u_xlat14.x);
            u_xlat4.x = u_xlat14.x * abs(u_xlat4.x);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
            u_xlat20.x = u_xlat20.x * u_xlat4.x;
            u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
            u_xlat20.x = sqrt(u_xlat20.x);
            u_xlat30 = u_xlat34 * u_xlat24;
            u_xlat4.x = u_xlat20.x * u_xlat30;
            u_xlat14.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat34 = fract((-u_xlat14.x));
            u_xlat14.z = u_xlat34 + 0.5;
            u_xlat14.xy = fract(u_xlat14.xy);
            u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
            u_xlat14.xyz = floor(u_xlat14.xyz);
            u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
            u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
            u_xlat24 = (-u_xlat30) * u_xlat20.x + 1.0;
            u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
            u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
            u_xlat20.x = exp2(u_xlat20.x);
            u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
            u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
            u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat14.xxx;
            u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat4.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
        } else {
            u_xlat20.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat20.xy = u_xlat20.xy * u_xlat1.xy;
            u_xlat5.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat5.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat3 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb20.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb20.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb20.x){
                u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat3.xy = dFdx(u_xlat20.xy);
                u_xlat20.xy = dFdy(u_xlat20.xy);
                u_xlat23 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = dot(u_xlat20.xy, u_xlat20.xy);
                u_xlat23 = max(u_xlat33, u_xlat23);
                u_xlat23 = log2(u_xlat23);
                u_xlat23 = u_xlat23 * 0.5;
                u_xlat23 = max(u_xlat23, 0.0);
                u_xlat23 = u_xlat23 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat33) * u_xlat3.xy;
                u_xlat20.xy = u_xlat20.xy * vec2(u_xlat33);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat23);
                u_xlat20.xy = u_xlat20.xy / vec2(u_xlat23);
                u_xlat13.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                u_xlat23 = sqrt(u_xlat13.x);
                u_xlat33 = sqrt(u_xlat30);
                u_xlat13.x = inversesqrt(u_xlat13.x);
                u_xlat3.x = u_xlat13.x * abs(u_xlat3.x);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                u_xlat20.x = u_xlat20.x * u_xlat3.x;
                u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                u_xlat20.x = sqrt(u_xlat20.x);
                u_xlat30 = u_xlat33 * u_xlat23;
                u_xlat3.x = u_xlat20.x * u_xlat30;
                u_xlat13.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat33 = fract((-u_xlat13.x));
                u_xlat13.z = u_xlat33 + 0.5;
                u_xlat13.xy = fract(u_xlat13.xy);
                u_xlat13.xy = u_xlat13.xy + vec2(0.5, 0.5);
                u_xlat13.xyz = floor(u_xlat13.xyz);
                u_xlat33 = (-u_xlat13.x) + u_xlat13.z;
                u_xlat13.x = u_xlat33 * u_xlat13.y + u_xlat13.x;
                u_xlat23 = (-u_xlat30) * u_xlat20.x + 1.0;
                u_xlat5.xyz = (-u_xlat13.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat23) * u_xlat5.xyz + u_xlat13.xxx;
                u_xlatb3.xz = lessThan(u_xlat3.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat13.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                u_xlat20.x = exp2(u_xlat20.x);
                u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat13.xxx;
                u_xlat13.xyz = (u_xlatb3.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat4.xyz = (u_xlatb3.x) ? u_xlat6.xyz : u_xlat13.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb20.x = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb20.x = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb20.x){
                    u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat2.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat13.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                    u_xlat3.x = log2(u_xlat3.x);
                    u_xlat3.x = u_xlat3.x * 0.5;
                    u_xlat3.x = max(u_xlat3.x, 0.0);
                    u_xlat3.x = u_xlat3.x + 1.0;
                    u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat2.xy * u_xlat13.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat13.xx;
                    u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat3.xx;
                    u_xlat12.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat3.x = sqrt(u_xlat12.x);
                    u_xlat13.x = sqrt(u_xlat30);
                    u_xlat12.x = inversesqrt(u_xlat12.x);
                    u_xlat2.x = u_xlat12.x * abs(u_xlat2.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat2.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat13.x * u_xlat3.x;
                    u_xlat2.x = u_xlat20.x * u_xlat30;
                    u_xlat12.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat32 = fract((-u_xlat12.x));
                    u_xlat12.z = u_xlat32 + 0.5;
                    u_xlat12.xy = fract(u_xlat12.xy);
                    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
                    u_xlat12.xyz = floor(u_xlat12.xyz);
                    u_xlat32 = (-u_xlat12.x) + u_xlat12.z;
                    u_xlat12.x = u_xlat32 * u_xlat12.y + u_xlat12.x;
                    u_xlat22 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat3.xyz = (-u_xlat12.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat12.xxx;
                    u_xlatb2.xz = lessThan(u_xlat2.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat6.xyz = u_xlat12.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.zyy + u_xlat12.xxx;
                    u_xlat12.xyz = (u_xlatb2.z) ? u_xlat6.xyz : u_xlat3.xyz;
                    u_xlat4.xyz = (u_xlatb2.x) ? u_xlat5.xyz : u_xlat12.xyz;
                } else {
                    u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat1.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat12.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = u_xlat1.xy * u_xlat12.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat12.xx;
                    u_xlat1.xy = u_xlat1.xy / u_xlat2.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat2.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat2.x = sqrt(u_xlat11.x);
                    u_xlat12.x = sqrt(u_xlat30);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat1.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat12.x * u_xlat2.x;
                    u_xlat1.x = u_xlat20.x * u_xlat30;
                    u_xlat11.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat31 = fract((-u_xlat11.x));
                    u_xlat11.z = u_xlat31 + 0.5;
                    u_xlat11.xy = fract(u_xlat11.xy);
                    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
                    u_xlat11.xyz = floor(u_xlat11.xyz);
                    u_xlat31 = (-u_xlat11.x) + u_xlat11.z;
                    u_xlat11.x = u_xlat31 * u_xlat11.y + u_xlat11.x;
                    u_xlat21 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat2.xyz = (-u_xlat11.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat11.xxx;
                    u_xlatb1.xz = lessThan(u_xlat1.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat5.xyz = u_xlat11.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.zyy + u_xlat11.xxx;
                    u_xlat11.xyz = (u_xlatb1.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat4.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat11.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat4.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 100.0, 102.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 101.0, 103.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_0 = max(u_xlat10_0.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat20.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * vs_TEXCOORD1.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_0) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_0;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat10_0.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat10_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	mediump vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump float _RainIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
vec2 u_xlat20;
bvec2 u_xlatb20;
float u_xlat21;
float u_xlat22;
float u_xlat23;
float u_xlat24;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_38;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat20.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat20.xy + u_xlat0.xy;
    u_xlat20.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat20.xy : u_xlat0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb20.x){
        u_xlatb1.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat2 = (u_xlatb1.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (u_xlatb1.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat2;
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb20.x){
        u_xlat10_1.xyz = texture(_MainTex, u_xlat0.xy).xyz;
        SV_Target0.xyz = u_xlat10_1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = max(u_xlat20.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb20.x){
        u_xlat20.xy = vec2(u_xlat0.x * _MainTex_TexelSize.z, u_xlat0.y * _MainTex_TexelSize.w);
        u_xlat1.xy = dFdx(u_xlat20.xy);
        u_xlat20.xy = dFdy(u_xlat20.xy);
        u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat20.x = max(u_xlat20.x, u_xlat1.x);
        u_xlat20.x = log2(u_xlat20.x);
        u_xlat20.x = u_xlat20.x * 0.5;
        u_xlat20.x = max(u_xlat20.x, 0.0);
        u_xlat20.x = u_xlat20.x + 1.0;
        u_xlat30 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat20.x = u_xlat30 / u_xlat20.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(256.0<u_xlat20.x);
#else
        u_xlatb30 = 256.0<u_xlat20.x;
#endif
        u_xlatb1.xy = greaterThanEqual(vec4(512.0, 1024.0, 0.0, 0.0), u_xlat20.xxxx).xy;
        u_xlat2 = (u_xlatb1.y) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb1.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat2;
        u_xlat1 = (bool(u_xlatb30)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat1;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb20.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb20.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb20.x){
        u_xlat1.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat20.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat1.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.z + (-_SecondaryTex_ST.z), vs_TEXCOORD0.w + (-_SecondaryTex_ST.w));
        u_xlat20.xy = u_xlat20.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat4.xyxy).xy;
        u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb20.x) ? u_xlat3 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb20.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb20.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb20.x){
            u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat4.xy = dFdx(u_xlat20.xy);
            u_xlat20.xy = dFdy(u_xlat20.xy);
            u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat34 = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat24 = max(u_xlat34, u_xlat24);
            u_xlat24 = log2(u_xlat24);
            u_xlat24 = u_xlat24 * 0.5;
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlat24 = u_xlat24 + 1.0;
            u_xlat34 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat4.xy = vec2(u_xlat34) * u_xlat4.xy;
            u_xlat20.xy = u_xlat20.xy * vec2(u_xlat34);
            u_xlat4.xy = u_xlat4.xy / vec2(u_xlat24);
            u_xlat20.xy = u_xlat20.xy / vec2(u_xlat24);
            u_xlat14.x = dot(abs(u_xlat4.xy), abs(u_xlat4.xy));
            u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
            u_xlat24 = sqrt(u_xlat14.x);
            u_xlat34 = sqrt(u_xlat30);
            u_xlat14.x = inversesqrt(u_xlat14.x);
            u_xlat4.x = u_xlat14.x * abs(u_xlat4.x);
            u_xlat30 = inversesqrt(u_xlat30);
            u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
            u_xlat20.x = u_xlat20.x * u_xlat4.x;
            u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
            u_xlat20.x = sqrt(u_xlat20.x);
            u_xlat30 = u_xlat34 * u_xlat24;
            u_xlat4.x = u_xlat20.x * u_xlat30;
            u_xlat14.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat34 = fract((-u_xlat14.x));
            u_xlat14.z = u_xlat34 + 0.5;
            u_xlat14.xy = fract(u_xlat14.xy);
            u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
            u_xlat14.xyz = floor(u_xlat14.xyz);
            u_xlat34 = (-u_xlat14.x) + u_xlat14.z;
            u_xlat14.x = u_xlat34 * u_xlat14.y + u_xlat14.x;
            u_xlat24 = (-u_xlat30) * u_xlat20.x + 1.0;
            u_xlat5.xyz = (-u_xlat14.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz + u_xlat14.xxx;
            u_xlatb4.xz = lessThan(u_xlat4.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat7.xyz = u_xlat14.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
            u_xlat20.x = exp2(u_xlat20.x);
            u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
            u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
            u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat14.xxx;
            u_xlat14.xyz = (u_xlatb4.z) ? u_xlat7.xyz : u_xlat5.xyz;
            u_xlat4.xyz = (u_xlatb4.x) ? u_xlat6.xyz : u_xlat14.xyz;
        } else {
            u_xlat20.xy = vec2(_MainTex_ST.x * _BumpMap_TexelSize.z, _MainTex_ST.y * _BumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat20.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat1.xy = _BumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat1 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat20.xy = (u_xlatb20.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat20.xy = u_xlat20.xy * u_xlat1.xy;
            u_xlat5.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb20.xy = lessThan(u_xlat20.xyxy, u_xlat5.xyxy).xy;
            u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat1 = (u_xlatb20.x) ? u_xlat3 : u_xlat1;
#ifdef UNITY_ADRENO_ES3
            u_xlatb20.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb20.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb20.x){
                u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                u_xlat3.xy = dFdx(u_xlat20.xy);
                u_xlat20.xy = dFdy(u_xlat20.xy);
                u_xlat23 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat33 = dot(u_xlat20.xy, u_xlat20.xy);
                u_xlat23 = max(u_xlat33, u_xlat23);
                u_xlat23 = log2(u_xlat23);
                u_xlat23 = u_xlat23 * 0.5;
                u_xlat23 = max(u_xlat23, 0.0);
                u_xlat23 = u_xlat23 + 1.0;
                u_xlat33 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat33) * u_xlat3.xy;
                u_xlat20.xy = u_xlat20.xy * vec2(u_xlat33);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat23);
                u_xlat20.xy = u_xlat20.xy / vec2(u_xlat23);
                u_xlat13.x = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                u_xlat23 = sqrt(u_xlat13.x);
                u_xlat33 = sqrt(u_xlat30);
                u_xlat13.x = inversesqrt(u_xlat13.x);
                u_xlat3.x = u_xlat13.x * abs(u_xlat3.x);
                u_xlat30 = inversesqrt(u_xlat30);
                u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                u_xlat20.x = u_xlat20.x * u_xlat3.x;
                u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                u_xlat20.x = sqrt(u_xlat20.x);
                u_xlat30 = u_xlat33 * u_xlat23;
                u_xlat3.x = u_xlat20.x * u_xlat30;
                u_xlat13.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                u_xlat33 = fract((-u_xlat13.x));
                u_xlat13.z = u_xlat33 + 0.5;
                u_xlat13.xy = fract(u_xlat13.xy);
                u_xlat13.xy = u_xlat13.xy + vec2(0.5, 0.5);
                u_xlat13.xyz = floor(u_xlat13.xyz);
                u_xlat33 = (-u_xlat13.x) + u_xlat13.z;
                u_xlat13.x = u_xlat33 * u_xlat13.y + u_xlat13.x;
                u_xlat23 = (-u_xlat30) * u_xlat20.x + 1.0;
                u_xlat5.xyz = (-u_xlat13.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat6.xyz = vec3(u_xlat23) * u_xlat5.xyz + u_xlat13.xxx;
                u_xlatb3.xz = lessThan(u_xlat3.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                u_xlat7.xyz = u_xlat13.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                u_xlat20.x = exp2(u_xlat20.x);
                u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                u_xlat5.xyz = u_xlat20.xxx * u_xlat5.zyy + u_xlat13.xxx;
                u_xlat13.xyz = (u_xlatb3.z) ? u_xlat7.xyz : u_xlat5.xyz;
                u_xlat4.xyz = (u_xlatb3.x) ? u_xlat6.xyz : u_xlat13.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb20.x = !!(u_xlat2.x>=u_xlat1.x);
#else
                u_xlatb20.x = u_xlat2.x>=u_xlat1.x;
#endif
                if(u_xlatb20.x){
                    u_xlat20.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat2.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat13.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                    u_xlat3.x = log2(u_xlat3.x);
                    u_xlat3.x = u_xlat3.x * 0.5;
                    u_xlat3.x = max(u_xlat3.x, 0.0);
                    u_xlat3.x = u_xlat3.x + 1.0;
                    u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat2.xy * u_xlat13.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat13.xx;
                    u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat3.xx;
                    u_xlat12.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat3.x = sqrt(u_xlat12.x);
                    u_xlat13.x = sqrt(u_xlat30);
                    u_xlat12.x = inversesqrt(u_xlat12.x);
                    u_xlat2.x = u_xlat12.x * abs(u_xlat2.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat2.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat13.x * u_xlat3.x;
                    u_xlat2.x = u_xlat20.x * u_xlat30;
                    u_xlat12.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat32 = fract((-u_xlat12.x));
                    u_xlat12.z = u_xlat32 + 0.5;
                    u_xlat12.xy = fract(u_xlat12.xy);
                    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
                    u_xlat12.xyz = floor(u_xlat12.xyz);
                    u_xlat32 = (-u_xlat12.x) + u_xlat12.z;
                    u_xlat12.x = u_xlat32 * u_xlat12.y + u_xlat12.x;
                    u_xlat22 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat3.xyz = (-u_xlat12.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat5.xyz = vec3(u_xlat22) * u_xlat3.xyz + u_xlat12.xxx;
                    u_xlatb2.xz = lessThan(u_xlat2.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat6.xyz = u_xlat12.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.zyy + u_xlat12.xxx;
                    u_xlat12.xyz = (u_xlatb2.z) ? u_xlat6.xyz : u_xlat3.xyz;
                    u_xlat4.xyz = (u_xlatb2.x) ? u_xlat5.xyz : u_xlat12.xyz;
                } else {
                    u_xlat20.xy = vec2(u_xlat1.x * u_xlat1.z, u_xlat1.y * u_xlat1.w);
                    u_xlat1.xy = dFdx(u_xlat20.xy);
                    u_xlat20.xy = dFdy(u_xlat20.xy);
                    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat12.x = dot(u_xlat20.xy, u_xlat20.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = u_xlat1.xy * u_xlat12.xx;
                    u_xlat20.xy = u_xlat20.xy * u_xlat12.xx;
                    u_xlat1.xy = u_xlat1.xy / u_xlat2.xx;
                    u_xlat20.xy = u_xlat20.xy / u_xlat2.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat30 = dot(abs(u_xlat20.xy), abs(u_xlat20.xy));
                    u_xlat2.x = sqrt(u_xlat11.x);
                    u_xlat12.x = sqrt(u_xlat30);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat30 = inversesqrt(u_xlat30);
                    u_xlat20.x = u_xlat30 * abs(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x * u_xlat1.x;
                    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
                    u_xlat20.x = sqrt(u_xlat20.x);
                    u_xlat30 = u_xlat12.x * u_xlat2.x;
                    u_xlat1.x = u_xlat20.x * u_xlat30;
                    u_xlat11.xy = vec2(u_xlat1.z * float(3.0), u_xlat1.w * float(3.0));
                    u_xlat31 = fract((-u_xlat11.x));
                    u_xlat11.z = u_xlat31 + 0.5;
                    u_xlat11.xy = fract(u_xlat11.xy);
                    u_xlat11.xy = u_xlat11.xy + vec2(0.5, 0.5);
                    u_xlat11.xyz = floor(u_xlat11.xyz);
                    u_xlat31 = (-u_xlat11.x) + u_xlat11.z;
                    u_xlat11.x = u_xlat31 * u_xlat11.y + u_xlat11.x;
                    u_xlat21 = (-u_xlat30) * u_xlat20.x + 1.0;
                    u_xlat2.xyz = (-u_xlat11.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat11.xxx;
                    u_xlatb1.xz = lessThan(u_xlat1.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
                    u_xlat5.xyz = u_xlat11.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat20.x = u_xlat30 * u_xlat20.x + -4.0;
                    u_xlat20.x = exp2(u_xlat20.x);
                    u_xlat20.x = u_xlat20.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
                    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
                    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.zyy + u_xlat11.xxx;
                    u_xlat11.xyz = (u_xlatb1.z) ? u_xlat5.xyz : u_xlat2.xyz;
                    u_xlat4.xyz = (u_xlatb1.x) ? u_xlat3.xyz : u_xlat11.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat4.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 100.0, 102.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb20.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 101.0, 103.0)).xy;
    u_xlatb20.x = u_xlatb20.y || u_xlatb20.x;
    if(u_xlatb20.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_DetailMask, u_xlat0.xy, 0.0).xy;
    u_xlat16_0 = max(u_xlat10_0.x, 0.00100000005);
    u_xlat16_0 = min(u_xlat16_0, 0.999000013);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat20.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * vs_TEXCOORD1.xyz;
    u_xlat16_38 = _mhyRainNoiseParam1.z * _RainIntensity;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_9.x = (-u_xlat16_0) + 1.0;
    SV_Target2.w = u_xlat16_38 * u_xlat16_9.x + u_xlat16_0;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_9.xyz = u_xlat10_0.yyy * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_38 = (-u_xlat10_0.y) * 0.959999979 + 0.959999979;
    SV_Target1.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz;
    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_9.z;
    SV_Target0.w = 0.0;
    SV_Target1.w = 0.0;
    SV_Target2.xy = u_xlat16_9.xy;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "LINE_INTERPOLATION" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" "EMISSION_TYPE_NONE" }
""
}
}
}
 Pass {
  Name "DEPTHONLY"
  Tags { "LIGHTMODE" = "DepthOnly" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 190374
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = vec2(0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "ENABLE_ALPHA_TEST_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _CutOff;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
float u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat0 = u_xlat10_0 + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ENABLE_ALPHA_TEST_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _CutOff;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
float u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat0 = u_xlat10_0 + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = vec2(0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "ENABLE_ALPHA_TEST_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _CutOff;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
float u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).w;
    u_xlat0 = u_xlat10_0 + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "ENABLE_ALPHA_TEST_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _CutOff;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
float u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).w;
    u_xlat0 = u_xlat10_0 + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "ENABLE_ALPHA_TEST_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ENABLE_ALPHA_TEST_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "ENABLE_ALPHA_TEST_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "ENABLE_ALPHA_TEST_ON" }
""
}
}
}
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Geometry" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  Cull Off
  GpuProgramID 211709
Program "vp" {
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_15;
float u_xlat24;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 + (-u_xlat1.x);
    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat1.x;
    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_1.x = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_2.x = u_xlat24 + u_xlat10_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = vec3(u_xlat16_26) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_26 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_27 * u_xlat16_27;
    u_xlat16_8.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_8.x = u_xlat16_8.x + u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26) + u_xlat16_4.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_1.xyz = u_xlat1.xyz * vec3(u_xlat16_26);
    u_xlat16_7.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_7.x * u_xlat16_0.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_15 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_7.xyz / u_xlat16_0.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_26 = u_xlat16_1.y * u_xlat16_1.y;
    u_xlat16_26 = u_xlat16_1.x * u_xlat16_1.x + (-u_xlat16_26);
    u_xlat16_0 = u_xlat16_1.yzzx * u_xlat16_1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_1);
    u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_15;
float u_xlat24;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 + (-u_xlat1.x);
    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat1.x;
    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_1.x = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_2.x = u_xlat24 + u_xlat10_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = vec3(u_xlat16_26) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_26 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_27 * u_xlat16_27;
    u_xlat16_8.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_8.x = u_xlat16_8.x + u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26) + u_xlat16_4.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_1.xyz = u_xlat1.xyz * vec3(u_xlat16_26);
    u_xlat16_7.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_7.x * u_xlat16_0.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_15 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_7.xyz / u_xlat16_0.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_26 = u_xlat16_1.y * u_xlat16_1.y;
    u_xlat16_26 = u_xlat16_1.x * u_xlat16_1.x + (-u_xlat16_26);
    u_xlat16_0 = u_xlat16_1.yzzx * u_xlat16_1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_1);
    u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_0.x = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat16_3.xyz = u_xlat10_0.xxx * _LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_0.x = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat16_3.xyz = u_xlat10_0.xxx * _LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_15;
float u_xlat24;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 + (-u_xlat1.x);
    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat1.x;
    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_1.x = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_2.x = u_xlat24 + u_xlat10_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = vec3(u_xlat16_26) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_26 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_27 * u_xlat16_27;
    u_xlat16_8.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_8.x = u_xlat16_8.x + u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26) + u_xlat16_4.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_1.xyz = u_xlat1.xyz * vec3(u_xlat16_26);
    u_xlat16_7.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_7.x * u_xlat16_0.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_15 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_7.xyz / u_xlat16_0.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_26 = u_xlat16_1.y * u_xlat16_1.y;
    u_xlat16_26 = u_xlat16_1.x * u_xlat16_1.x + (-u_xlat16_26);
    u_xlat16_0 = u_xlat16_1.yzzx * u_xlat16_1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_1);
    u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_15;
float u_xlat24;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 + (-u_xlat1.x);
    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat1.x;
    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_1.x = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_2.x = u_xlat24 + u_xlat10_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = vec3(u_xlat16_26) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_26 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_27 * u_xlat16_27;
    u_xlat16_8.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_8.x = u_xlat16_8.x + u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26) + u_xlat16_4.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_1.xyz = u_xlat1.xyz * vec3(u_xlat16_26);
    u_xlat16_7.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_7.x * u_xlat16_0.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_15 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_7.xyz / u_xlat16_0.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_26 = u_xlat16_1.y * u_xlat16_1.y;
    u_xlat16_26 = u_xlat16_1.x * u_xlat16_1.x + (-u_xlat16_26);
    u_xlat16_0 = u_xlat16_1.yzzx * u_xlat16_1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_1);
    u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat13;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD1.w = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat4.y;
    vs_TEXCOORD3.w = u_xlat4.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat13;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD1.w = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat4.y;
    vs_TEXCOORD3.w = u_xlat4.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat13;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD1.w = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat4.y;
    vs_TEXCOORD3.w = u_xlat4.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat13;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD1.w = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat4.y;
    vs_TEXCOORD3.w = u_xlat4.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_15;
float u_xlat24;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 + (-u_xlat1.x);
    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat1.x;
    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_1.x = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_2.x = u_xlat24 + u_xlat10_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = vec3(u_xlat16_26) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_26 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_27 * u_xlat16_27;
    u_xlat16_8.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_8.x = u_xlat16_8.x + u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26) + u_xlat16_4.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_1.xyz = u_xlat1.xyz * vec3(u_xlat16_26);
    u_xlat16_7.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_7.x * u_xlat16_0.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_15 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_7.xyz / u_xlat16_0.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_26 = u_xlat16_1.y * u_xlat16_1.y;
    u_xlat16_26 = u_xlat16_1.x * u_xlat16_1.x + (-u_xlat16_26);
    u_xlat16_0 = u_xlat16_1.yzzx * u_xlat16_1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_1);
    u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_15;
float u_xlat24;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 + (-u_xlat1.x);
    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat1.x;
    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_1.x = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_2.x = u_xlat24 + u_xlat10_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = vec3(u_xlat16_26) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_26 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_27 * u_xlat16_27;
    u_xlat16_8.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_8.x = u_xlat16_8.x + u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26) + u_xlat16_4.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_1.xyz = u_xlat1.xyz * vec3(u_xlat16_26);
    u_xlat16_7.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_7.x * u_xlat16_0.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_15 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_7.xyz / u_xlat16_0.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_26 = u_xlat16_1.y * u_xlat16_1.y;
    u_xlat16_26 = u_xlat16_1.x * u_xlat16_1.x + (-u_xlat16_26);
    u_xlat16_0 = u_xlat16_1.yzzx * u_xlat16_1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_1);
    u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_0.x = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat16_3.xyz = u_xlat10_0.xxx * _LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_0.x = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat16_3.xyz = u_xlat10_0.xxx * _LightColor0.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat13;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD1.w = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat4.y;
    vs_TEXCOORD3.w = u_xlat4.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat13;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat0) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD1.w = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat4.y;
    vs_TEXCOORD3.w = u_xlat4.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_13;
float u_xlat21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat16_22 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat16_22 = u_xlat16_0.x * u_xlat16_22;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_0.yyy * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat16_4.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_22 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_23 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_7.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat10_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
    u_xlat16_22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * u_xlat4.xyz;
    u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_0.x + (-u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_6.xyz / u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_22 = u_xlat16_4.y * u_xlat16_4.y;
    u_xlat16_22 = u_xlat16_4.x * u_xlat16_4.x + (-u_xlat16_22);
    u_xlat16_0 = u_xlat16_4.yzzx * u_xlat16_4.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_4);
    u_xlat16_22 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22) + u_xlat16_2.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_15;
float u_xlat24;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 + (-u_xlat1.x);
    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat1.x;
    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_1.x = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_2.x = u_xlat24 + u_xlat10_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = vec3(u_xlat16_26) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_26 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_27 * u_xlat16_27;
    u_xlat16_8.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_8.x = u_xlat16_8.x + u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26) + u_xlat16_4.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_1.xyz = u_xlat1.xyz * vec3(u_xlat16_26);
    u_xlat16_7.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_7.x * u_xlat16_0.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_15 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_7.xyz / u_xlat16_0.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_26 = u_xlat16_1.y * u_xlat16_1.y;
    u_xlat16_26 = u_xlat16_1.x * u_xlat16_1.x + (-u_xlat16_26);
    u_xlat16_0 = u_xlat16_1.yzzx * u_xlat16_1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_1);
    u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD1.w = u_xlat5.x;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat5.y;
    vs_TEXCOORD3.w = u_xlat5.z;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_15;
float u_xlat24;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 + (-u_xlat1.x);
    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat1.x;
    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_1.x = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_2.x = u_xlat24 + u_xlat10_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
    u_xlat16_0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat16_26 = u_xlat16_0.x * u_xlat16_26;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat10_0.xy = texture(_DetailMask, vs_TEXCOORD0.xy).xy;
    u_xlat16_0.xy = u_xlat10_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = vec3(u_xlat16_26) * u_xlat16_1.xyz;
    u_xlat16_0.x = max(u_xlat16_0.x, 0.00100000005);
    u_xlat16_26 = (-u_xlat16_0.y) * 0.959999979 + 0.959999979;
    u_xlat16_0.x = min(u_xlat16_0.x, 0.999000013);
    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;
    u_xlat16_0.x = u_xlat16_27 * u_xlat16_27;
    u_xlat16_8.x = (-u_xlat16_0.x) * u_xlat16_0.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_8.x = u_xlat16_8.x + u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_1.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_26) + u_xlat16_4.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_1.xyz = u_xlat1.xyz * vec3(u_xlat16_26);
    u_xlat16_7.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_7.x * u_xlat16_0.x + (-u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_15 * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999997e-07);
    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_7.x;
    u_xlat16_0.x = u_xlat16_0.x * 0.318309873;
    u_xlat16_0.x = min(u_xlat16_0.x, 64.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_0.xxx;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + vec3(2.0, 2.0, 2.0);
    u_xlat16_0.xyz = u_xlat16_7.xyz / u_xlat16_0.xyz;
    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_5.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_26 = u_xlat16_1.y * u_xlat16_1.y;
    u_xlat16_26 = u_xlat16_1.x * u_xlat16_1.x + (-u_xlat16_26);
    u_xlat16_0 = u_xlat16_1.yzzx * u_xlat16_1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat16_1);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat16_1);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat16_1);
    u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
    SV_TARGET0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_26) + u_xlat16_3.xyz;
    SV_TARGET0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
""
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "LIGHTPROBE_SH" "INSTANCING_ON" "EMISSION_TYPE_NONE" }
""
}
}
}
 UsePass "miHoYo/Shadow/ShadowMapPass/LSPSM"
}
Fallback "Legacy Shaders/Specular"
}