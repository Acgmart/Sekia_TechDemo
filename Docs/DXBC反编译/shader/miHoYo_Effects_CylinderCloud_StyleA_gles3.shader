//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/Effects/CylinderCloud_StyleA" {
Properties {
_DayColor ("DayColor", Color) = (1,1,1,1)
_MainColor ("MainColor", Color) = (0,0,0,0)
_AlphaScale ("AlphaScale", Float) = 1
_OuterScale ("OuterScale", Float) = 4
_Outer_Color ("Outer_Color", Color) = (1,1,1,1)
_OuterColor_Scale ("OuterColor_Scale", Float) = 1
_InnerThreshold ("InnerThreshold", Float) = 0.1
_InnerAlphaScale ("InnerAlphaScale", Float) = 1
_InnerColor ("InnerColor", Color) = (1,1,1,1)
_InnerColor_Scale ("InnerColor_Scale", Float) = 1
_MaskTex ("MaskTex", 2D) = "white" { }
_MaskRGOffset ("Mask(RG)Offset", Vector) = (0,0,0,0)
_MaskTexRUV ("MaskTex(R)UV", Vector) = (1,1,0,0)
_MaskTexGUV ("MaskTex(G)UV", Vector) = (1,1,0,0)
_MaskRGScale ("Mask(RG)Scale", Float) = 1
_MaskBOffset ("Mask(B)Offset", Vector) = (0,0,0,0)
_MaskBUV ("Mask(B)UV", Vector) = (1,1,0,0)
_MaskBThickness ("Mask(B)Thickness", Range(0, 1)) = 0
_MaskTexBScale ("MaskTex(B)Scale", Float) = 2
_MaskTexB_U2VLinear ("MaskTex(B)_U2VLinear", Range(0, 1)) = 1
_MaskTexB_LinearThreshold ("MaskTex(B)_LinearThreshold", Range(-1, 1)) = 1
_LinearColor ("LinearColor", Color) = (1,1,1,1)
_LinearColorScale ("LinearColorScale", Float) = 1
_LinearColorOffset ("LinearColorOffset", Range(-1, 1)) = 1
_FillLinearThreshold ("FillLinearThreshold", Range(0, 1)) = 0
[Toggle(_SETDISTANCEFADE_ON)] _SetDistanceFade ("SetDistanceFade", Float) = 0
[Header(DistanceFade)] [Toggle(_DISTANCEINVERT_ON)] _DistanceInvert ("DistanceInvert", Float) = 0
_AlphaFadeDistance ("AlphaFadeDistance", Float) = 150
_AlphaFadeOffset ("AlphaFadeOffset", Float) = 0
[Header(MiHoYoDepthFade)] [Toggle(_SOFTPARTICLES_ON)] _SOFTPARTICLES ("SOFTPARTICLES", Float) = 0
_DepthThresh ("DepthThresh", Range(0.001, 20)) = 1
_DepthFade ("DepthFade", Range(0.001, 20)) = 1
[Header(Motion Vectors)] _MotionVectorsAlphaCutoff ("Motion Vectors Alpha Cutoff", Range(0, 1)) = 0.1
[Header(Cull Mode)] [Enum(UnityEngine.Rendering.CullMode)] _Cull ("Cull Mode", Float) = 2
_MHYZBias ("Z Bias", Float) = 0
_PolygonOffsetFactor ("Polygon Offset Factor", Float) = 0
_PolygonOffsetUnit ("Polygon Offset Unit", Float) = 0
[Header(Blend Mode)] [Enum(UnityEngine.Rendering.BlendMode)] _SrcBlendMode ("Src Blend Mode", Float) = 1
[Enum(UnityEngine.Rendering.BlendMode)] _DstBlendMode ("Dst Blend Mode", Float) = 0
[Enum(UnityEngine.Rendering.BlendOp)] _BlendOP ("BlendOp Mode", Float) = 0
[Header(Depth Mode)] [Enum(Off, 0, On, 1)] _Zwrite ("ZWrite Mode", Float) = 1
[Enum(UnityEngine.Rendering.CompareFunction)] _Ztest ("ZTest Mode", Float) = 4
[Header(Fog Mode)] [Toggle(EFFECTED_BY_FOG)] _EffectedByFog ("Effected by fog", Float) = 0
}
SubShader {
 Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "MAIN"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZTest Off
  ZWrite Off
  Cull Off
  GpuProgramID 5219
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat4.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
mediump float u_xlat16_6;
vec2 u_xlat8;
mediump float u_xlat16_10;
float u_xlat12;
mediump float u_xlat16_14;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat12 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x + (-_InnerThreshold);
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat8.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat8.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat4.xy = u_xlat8.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).y;
    u_xlat16_2.y = (-u_xlat10_4) + u_xlat10_0;
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_InnerAlphaScale, _MaskRGScale);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_6 = max(u_xlat16_2.y, 9.99999975e-05);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_6 = float(1.0) / u_xlat16_6;
    u_xlat16_6 = u_xlat16_6 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_6;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_10 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat4.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat4.xy = u_xlat4.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_4 = texture(_MaskTex, u_xlat4.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10_4 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_4 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_4) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_4;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat4.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat4.x = u_xlat4.x + (-_AlphaFadeOffset);
    u_xlat4.x = u_xlat4.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat4.x * u_xlat0.x;
    u_xlat16_2.xzw = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_3.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_2.xzw);
    u_xlat16_2.xyz = vec3(u_xlat16_6) * u_xlat16_3.xyz + u_xlat16_2.xzw;
    u_xlat16_14 = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _MainColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat1.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.w = u_xlat16_18 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat5.x) + 1.0;
    u_xlat0.w = u_xlat0.x * u_xlat16_16;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD5.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD6.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3 = u_xlat0.z * _HeigtFogParams.x;
    u_xlat11 = u_xlat3 * -1.44269502;
    u_xlat11 = exp2(u_xlat11);
    u_xlat11 = (-u_xlat11) + 1.0;
    u_xlat11 = u_xlat11 / u_xlat3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3);
#endif
    u_xlat16_4.x = (u_xlatb3) ? u_xlat11 : 1.0;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = sqrt(u_xlat3);
    u_xlat11 = u_xlat3 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat11 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat19 = u_xlat11 * -1.44269502;
    u_xlat19 = exp2(u_xlat19);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat19 = u_xlat19 / u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<abs(u_xlat11));
#else
    u_xlatb11 = 0.00999999978<abs(u_xlat11);
#endif
    u_xlat16_12 = (u_xlatb11) ? u_xlat19 : 1.0;
    u_xlat11 = u_xlat3 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat11 = u_xlat3 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat11) + 2.0;
    u_xlat16_12 = u_xlat11 * u_xlat16_12;
    u_xlat11 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat11 = u_xlat11 + 1.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat11 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat19 = (-u_xlat11) + 1.0;
    u_xlat27 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat8.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat27) + 2.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat8.x = u_xlat3 + (-_HeigtFogRamp.w);
    u_xlat3 = u_xlat3 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat7.xyz);
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=u_xlat8.x);
#else
    u_xlatb0 = (-u_xlat0.x)>=u_xlat8.x;
#endif
    u_xlat8.x = (-u_xlat3) + 2.0;
    u_xlat8.x = u_xlat8.x * u_xlat3;
    u_xlat16 = u_xlat8.x * _HeigtFogColDelta.w;
    u_xlat0.x = (u_xlatb0) ? u_xlat16 : u_xlat8.x;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_FogColor.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = min(u_xlat0.x, _HeigtFogColBase.w);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat19 * u_xlat0.x;
    u_xlat0.xyz = vec3(u_xlat19) * u_xlat8.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat11) + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD5.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    vs_TEXCOORD6.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskBUV.xy + u_xlat10.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).z;
    u_xlat16_0 = (-u_xlat16_18) + u_xlat10_0;
    u_xlat16_18 = u_xlat16_0 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_0) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_0;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_16 * u_xlat0.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 + (-_AlphaFadeOffset);
    u_xlat5 = u_xlat5 / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5 * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat4.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    vs_TEXCOORD5.xyz = u_xlat4.xyz * vec3(u_xlat3);
    u_xlat4.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat4.x;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat4.x;
    vs_TEXCOORD5.w = (-u_xlat4.x);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _DayColor.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat16;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = u_xlat3.y * _HeigtFogParams.x;
    u_xlat24 = u_xlat8.x * -1.44269502;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat24 / u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<abs(u_xlat8.x));
#else
    u_xlatb8 = 0.00999999978<abs(u_xlat8.x);
#endif
    u_xlat16_4.x = (u_xlatb8) ? u_xlat24 : 1.0;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat24 = u_xlat8.x * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat24 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat24 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_12 = (u_xlatb24) ? u_xlat27 : 1.0;
    u_xlat24 = u_xlat8.x * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat24 = u_xlat8.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat24) + 2.0;
    u_xlat16_12 = u_xlat24 * u_xlat16_12;
    u_xlat24 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;
    u_xlat24 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat24) + 1.0;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat5.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat5.x;
#endif
    u_xlat11 = u_xlat8.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat16) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat6.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD3.w = u_xlat27 * u_xlat8.x;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    vs_TEXCOORD3.xyz = u_xlat5.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat8.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat8.xyz;
    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat8.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat8.x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat8.x;
    vs_TEXCOORD5.w = (-u_xlat8.x);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _LinearColor;
uniform 	mediump float _LinearColorScale;
uniform 	mediump float _LinearColorOffset;
uniform 	mediump vec4 _InnerColor;
uniform 	mediump float _InnerColor_Scale;
uniform 	mediump vec4 _Outer_Color;
uniform 	mediump float _OuterColor_Scale;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
float u_xlat15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_1.x = vs_TEXCOORD0.y + (-_LinearColorOffset);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = _LinearColor.xyz * vec3(_LinearColorScale) + (-_MainColor.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + _MainColor.xyz;
    u_xlat0.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat10.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat10.xy = u_xlat0.xy * _MaskTexRUV.xy + u_xlat10.xy;
    u_xlat10_10 = texture(_MaskTex, u_xlat10.xy).x;
    u_xlat2.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat0.xy = u_xlat0.xy * _MaskTexGUV.xy + u_xlat2.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).y;
    u_xlat16_16 = (-u_xlat10_0) + u_xlat10_10;
    u_xlat16_16 = u_xlat16_16 * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_16 = max(u_xlat16_16, 9.99999975e-05);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_16 = u_xlat16_16 * _OuterScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _InnerColor.xyz * vec3(_InnerColor_Scale);
    u_xlat16_4.xyz = _Outer_Color.xyz * vec3(_OuterColor_Scale) + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat15 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16_18 = (-u_xlat0.x) + 1.0;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = (-u_xlat16_18) * u_xlat16_18 + 1.0;
    u_xlat16_18 = u_xlat16_18 + (-_InnerThreshold);
    u_xlat16_18 = u_xlat16_18 * _InnerAlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_16 = u_xlat16_16 + u_xlat16_18;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_16 = u_xlat16_16 * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat5.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.x = (-u_xlat5.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat2.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat5.xy = u_xlat5.xy * _MaskBUV.xy + u_xlat2.xy;
    u_xlat16_18 = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_18 = _MaskTexB_U2VLinear * u_xlat16_18 + vs_TEXCOORD0.x;
    u_xlat16_18 = u_xlat16_18 + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat10_5 = texture(_MaskTex, u_xlat5.xy).z;
    u_xlat16_5 = (-u_xlat16_18) + u_xlat10_5;
    u_xlat16_18 = u_xlat16_5 * u_xlat16_18 + (-u_xlat16_18);
    u_xlat16_18 = u_xlat16_18 + 1.0;
    u_xlat16_18 = (-u_xlat16_5) + u_xlat16_18;
    u_xlat16_18 = _FillLinearThreshold * u_xlat16_18 + u_xlat16_5;
    u_xlat16_18 = _MaskTexBScale * u_xlat16_18 + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_4.x = _DayColor.w * _MainColor.w;
    u_xlat5.x = u_xlat16_4.x * vs_COLOR0.w;
    u_xlat5.x = u_xlat16_16 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat5.x = u_xlat5.x + (-_AlphaFadeOffset);
    u_xlat5.x = u_xlat5.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat5.x * u_xlat0.x;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat2.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = vs_TEXCOORD3.www * u_xlat2.xyz + vs_TEXCOORD3.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "EFFECTED_BY_FOG" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
}
}
 Pass {
  Name "DISTORTIONVECTORS"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "DISTORTIONVECTORS" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Off
  GpuProgramID 83913
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.497999996, 0.497999996, 0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.497999996, 0.497999996, 0.0, 1.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
}
}
 Pass {
  Name "MOTIONVECTORS"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "MOTIONVECTORS" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Off
  GpuProgramID 149036
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat3.x = u_xlat3.x + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat3.x = u_xlat3.x + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat3.x = u_xlat3.x + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat3.x = u_xlat3.x + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTextureScaled, u_xlat3.xy).x;
    u_xlat3.x = u_xlat3.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTextureScaled, u_xlat3.xy).x;
    u_xlat3.x = u_xlat3.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTextureScaled, u_xlat3.xy).x;
    u_xlat3.x = u_xlat3.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTextureScaled, u_xlat3.xy).x;
    u_xlat3.x = u_xlat3.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat3.x = u_xlat3.x + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat3.x = u_xlat3.x + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat3.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat3.x = u_xlat3.x + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat3.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat3.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat3.x = u_xlat3.x + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat3.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTextureScaled, u_xlat3.xy).x;
    u_xlat3.x = u_xlat3.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTextureScaled, u_xlat3.xy).x;
    u_xlat3.x = u_xlat3.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat3.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD5.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTextureScaled, u_xlat3.xy).x;
    u_xlat3.x = u_xlat3.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat3.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat3.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
int u_xlati4;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati4 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat0.xzw;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat0.xzw;
    u_xlat0.xzw = (-u_xlat0.xzw) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    vs_TEXCOORD5.xyz = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat0.x = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat0.x;
    vs_TEXCOORD5.w = (-u_xlat0.x);
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat2.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	mediump vec4 _DayColor;
uniform 	mediump vec4 _MainColor;
uniform 	mediump vec4 _MaskTexRUV;
uniform 	mediump vec2 _MaskRGOffset;
uniform 	mediump vec4 _MaskTexGUV;
uniform 	mediump float _MaskRGScale;
uniform 	mediump float _OuterScale;
uniform 	mediump float _InnerThreshold;
uniform 	mediump float _InnerAlphaScale;
uniform 	mediump float _AlphaScale;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexBScale;
uniform 	mediump vec4 _MaskBUV;
uniform 	mediump vec2 _MaskBOffset;
uniform 	mediump float _MaskTexB_U2VLinear;
uniform 	mediump float _MaskTexB_LinearThreshold;
uniform 	mediump float _FillLinearThreshold;
uniform 	mediump float _MaskBThickness;
uniform 	float _AlphaFadeDistance;
uniform 	mediump float _AlphaFadeOffset;
uniform lowp sampler2D _MaskTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
ivec2 u_xlati1;
mediump vec2 u_xlat16_2;
vec2 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat6;
ivec2 u_xlati6;
float u_xlat9;
void main()
{
    u_xlat0.xy = vec2(_Time.y * _MaskTexRUV.z, _Time.y * _MaskTexRUV.w);
    u_xlat6.xy = vs_TEXCOORD0.xy + _MaskRGOffset.xy;
    u_xlat0.xy = u_xlat6.xy * _MaskTexRUV.xy + u_xlat0.xy;
    u_xlat10_0 = texture(_MaskTex, u_xlat0.xy).x;
    u_xlat1.xy = vec2(_Time.y * _MaskTexGUV.z, _Time.y * _MaskTexGUV.w);
    u_xlat3.xy = u_xlat6.xy * _MaskTexGUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).y;
    u_xlat16_2.x = (-u_xlat10_3) + u_xlat10_0;
    u_xlat16_2.x = u_xlat16_2.x * _MaskRGScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;
    u_xlat9 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16_5 = (-u_xlat0.x) + 1.0;
    u_xlat16_5 = max(u_xlat16_5, 9.99999975e-05);
    u_xlat16_5 = (-u_xlat16_5) * u_xlat16_5 + 1.0;
    u_xlat16_2.y = u_xlat16_5 + (-_InnerThreshold);
    u_xlat16_2.xy = vec2(u_xlat16_2.x * float(_OuterScale), u_xlat16_2.y * float(_InnerAlphaScale));
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
#else
    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_2.x = u_xlat16_2.x * _AlphaScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = _DayColor.w * _MainColor.w;
    u_xlat0.x = u_xlat16_5 * vs_COLOR0.w;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.x = texture(_CameraDepthTextureScaled, u_xlat3.xy).x;
    u_xlat3.x = u_xlat3.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat6.x = u_xlat3.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat9 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat9 + u_xlat3.x;
    u_xlat0.x = u_xlat3.x * u_xlat0.x;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MaskBOffset.xy;
    u_xlat1.xy = vec2(_Time.y * _MaskBUV.z, _Time.y * _MaskBUV.w);
    u_xlat3.xy = u_xlat3.xy * _MaskBUV.xy + u_xlat1.xy;
    u_xlat10_3 = texture(_MaskTex, u_xlat3.xy).z;
    u_xlat16_2.x = (-vs_TEXCOORD0.x) + vs_TEXCOORD0.y;
    u_xlat16_2.x = _MaskTexB_U2VLinear * u_xlat16_2.x + vs_TEXCOORD0.x;
    u_xlat16_2.x = u_xlat16_2.x + (-_MaskTexB_LinearThreshold);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat10_3 + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_3 * u_xlat16_2.x + (-u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = (-u_xlat16_3) + u_xlat16_2.x;
    u_xlat16_2.x = _FillLinearThreshold * u_xlat16_2.x + u_xlat16_3;
    u_xlat16_2.x = _MaskTexBScale * u_xlat16_2.x + _MaskBThickness;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat3.x = vs_TEXCOORD5.w + (-_ProjectionParams.y);
    u_xlat3.x = u_xlat3.x + (-_AlphaFadeOffset);
    u_xlat3.x = u_xlat3.x / _AlphaFadeDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat0.x * u_xlat3.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0 = u_xlat16_2.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati1.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_DISTANCEINVERT_ON" "_SETDISTANCEFADE_ON" }
""
}
}
}
}
CustomEditor "MiHoYoASEMaterialInspector"
}